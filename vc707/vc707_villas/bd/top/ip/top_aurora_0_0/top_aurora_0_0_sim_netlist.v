// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.3 (lin64) Build 2405991 Thu Dec  6 23:36:41 MST 2018
// Date        : Fri Apr 17 01:42:26 2020
// Host        : ubuntu-svg-xilinx.acs-lab.eonerc.rwth-aachen.de running 64-bit Ubuntu 16.04.6 LTS
// Command     : write_verilog -force -mode funcsim
//               /home/svg-hka/VILLASfpga-hardware/vc707/vc707_villas/bd/top/ip/top_aurora_0_0/top_aurora_0_0_sim_netlist.v
// Design      : top_aurora_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7vx485tffg1761-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "top_aurora_0_0,aurora,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* IP_DEFINITION_SOURCE = "package_project" *) 
(* X_CORE_INFO = "aurora,Vivado 2018.3" *) 
(* NotValidForBitStream *)
module top_aurora_0_0
   (SFP_RX_P,
    SFP_RX_N,
    SFP_TX_P,
    SFP_TX_N,
    SFP_TX_DISABLE_N,
    s_axis_tvalid,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tready,
    m_axis_tvalid,
    m_axis_tdata,
    m_axis_tlast,
    m_axis_tready,
    init_clk_in,
    gt_refclk1,
    drpclk_in,
    user_clk_out,
    reset,
    sys_reset_out,
    S_AXI_ACLK,
    S_AXI_ARESETN,
    S_AXI_AWADDR,
    S_AXI_AWPROT,
    S_AXI_AWVALID,
    S_AXI_AWREADY,
    S_AXI_WDATA,
    S_AXI_WSTRB,
    S_AXI_WVALID,
    S_AXI_WREADY,
    S_AXI_BVALID,
    S_AXI_BREADY,
    S_AXI_ARADDR,
    S_AXI_ARPROT,
    S_AXI_ARVALID,
    S_AXI_ARREADY,
    S_AXI_RDATA,
    S_AXI_RVALID,
    S_AXI_RREADY);
  (* X_INTERFACE_INFO = "xilinx.com:interface:sfp:1.0 SFP RXP" *) input SFP_RX_P;
  (* X_INTERFACE_INFO = "xilinx.com:interface:sfp:1.0 SFP RXN" *) input SFP_RX_N;
  (* X_INTERFACE_INFO = "xilinx.com:interface:sfp:1.0 SFP TXP" *) output SFP_TX_P;
  (* X_INTERFACE_INFO = "xilinx.com:interface:sfp:1.0 SFP TXN" *) output SFP_TX_N;
  (* X_INTERFACE_INFO = "xilinx.com:interface:sfp:1.0 SFP TX_DISABLE" *) output SFP_TX_DISABLE_N;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TVALID" *) input s_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TDATA" *) input [31:0]s_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TLAST" *) input s_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 s_axis TREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axis, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, PHASE 0.000, CLK_DOMAIN top_aurora_0_0_user_clk_out, LAYERED_METADATA undef, INSERT_VIP 0" *) output s_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TVALID" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TDATA" *) output [31:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TLAST" *) output m_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, PHASE 0.000, CLK_DOMAIN top_aurora_0_0_user_clk_out, LAYERED_METADATA undef, INSERT_VIP 0" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 init_clk_in CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME init_clk_in, PHASE 0.000, CLK_DOMAIN top_util_ds_buf_0_0_IBUF_OUT, INSERT_VIP 0" *) input init_clk_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 gt_refclk1 CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME gt_refclk1, PHASE 0.000, CLK_DOMAIN top_util_ds_buf_0_2_IBUF_OUT, INSERT_VIP 0" *) input gt_refclk1;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 drpclk_in CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME drpclk_in, PHASE 0.000, CLK_DOMAIN top_util_ds_buf_1_1_IBUF_OUT, INSERT_VIP 0" *) input drpclk_in;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 usr_clk_out CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME usr_clk_out, ASSOCIATED_BUSIF m_axis:s_axis, ASSOCIATED_RESET sys_reset_out, PHASE 0.000, CLK_DOMAIN top_aurora_0_0_user_clk_out, INSERT_VIP 0" *) output user_clk_out;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME reset, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) input reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 sys_reset_out RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME sys_reset_out, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) output sys_reset_out;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 S_AXI_ACLK CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI_ACLK, ASSOCIATED_BUSIF S_AXI, ASSOCIATED_RESET S_AXI_ARESETN, FREQ_HZ 125000000, PHASE 0.000, CLK_DOMAIN top_axi_pcie_0_0_axi_aclk_out, INSERT_VIP 0" *) input S_AXI_ACLK;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 S_AXI_ARESETN RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI_ARESETN, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input S_AXI_ARESETN;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWADDR" *) input [5:0]S_AXI_AWADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWPROT" *) input [2:0]S_AXI_AWPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWVALID" *) input S_AXI_AWVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI AWREADY" *) output S_AXI_AWREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WDATA" *) input [31:0]S_AXI_WDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WSTRB" *) input [3:0]S_AXI_WSTRB;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WVALID" *) input S_AXI_WVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI WREADY" *) output S_AXI_WREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BVALID" *) output S_AXI_BVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI BREADY" *) input S_AXI_BREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARADDR" *) input [5:0]S_AXI_ARADDR;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARPROT" *) input [2:0]S_AXI_ARPROT;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARVALID" *) input S_AXI_ARVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI ARREADY" *) output S_AXI_ARREADY;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RDATA" *) output [31:0]S_AXI_RDATA;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RVALID" *) output S_AXI_RVALID;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 S_AXI RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXI, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 125000000, ID_WIDTH 0, ADDR_WIDTH 6, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 0, HAS_RRESP 0, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.000, CLK_DOMAIN top_axi_pcie_0_0_axi_aclk_out, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input S_AXI_RREADY;

  wire SFP_RX_N;
  wire SFP_RX_P;
  wire SFP_TX_DISABLE_N;
  wire SFP_TX_N;
  wire SFP_TX_P;
  wire S_AXI_ACLK;
  wire [5:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire [2:0]S_AXI_ARPROT;
  wire S_AXI_ARREADY;
  wire S_AXI_ARVALID;
  wire [5:0]S_AXI_AWADDR;
  wire [2:0]S_AXI_AWPROT;
  wire S_AXI_AWREADY;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire S_AXI_BVALID;
  wire [31:0]S_AXI_RDATA;
  wire S_AXI_RREADY;
  wire S_AXI_RVALID;
  wire [31:0]S_AXI_WDATA;
  wire S_AXI_WREADY;
  wire [3:0]S_AXI_WSTRB;
  wire S_AXI_WVALID;
  wire drpclk_in;
  wire gt_refclk1;
  wire init_clk_in;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire reset;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire sys_reset_out;
  wire user_clk_out;

  (* ADDR_CTRL_LOOPBACK = "4'b0000" *) 
  top_aurora_0_0_aurora inst
       (.SFP_RX_N(SFP_RX_N),
        .SFP_RX_P(SFP_RX_P),
        .SFP_TX_DISABLE_N(SFP_TX_DISABLE_N),
        .SFP_TX_N(SFP_TX_N),
        .SFP_TX_P(SFP_TX_P),
        .S_AXI_ACLK(S_AXI_ACLK),
        .S_AXI_ARADDR(S_AXI_ARADDR),
        .S_AXI_ARESETN(S_AXI_ARESETN),
        .S_AXI_ARPROT(S_AXI_ARPROT),
        .S_AXI_ARREADY(S_AXI_ARREADY),
        .S_AXI_ARVALID(S_AXI_ARVALID),
        .S_AXI_AWADDR(S_AXI_AWADDR),
        .S_AXI_AWPROT(S_AXI_AWPROT),
        .S_AXI_AWREADY(S_AXI_AWREADY),
        .S_AXI_AWVALID(S_AXI_AWVALID),
        .S_AXI_BREADY(S_AXI_BREADY),
        .S_AXI_BVALID(S_AXI_BVALID),
        .S_AXI_RDATA(S_AXI_RDATA),
        .S_AXI_RREADY(S_AXI_RREADY),
        .S_AXI_RVALID(S_AXI_RVALID),
        .S_AXI_WDATA(S_AXI_WDATA),
        .S_AXI_WREADY(S_AXI_WREADY),
        .S_AXI_WSTRB(S_AXI_WSTRB),
        .S_AXI_WVALID(S_AXI_WVALID),
        .drpclk_in(drpclk_in),
        .gt_refclk1(gt_refclk1),
        .init_clk_in(init_clk_in),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .reset(reset),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .sys_reset_out(sys_reset_out),
        .user_clk_out(user_clk_out));
endmodule

(* ADDR_CTRL_LOOPBACK = "4'b0000" *) (* ORIG_REF_NAME = "aurora" *) 
module top_aurora_0_0_aurora
   (SFP_RX_P,
    SFP_RX_N,
    SFP_TX_P,
    SFP_TX_N,
    SFP_TX_DISABLE_N,
    s_axis_tvalid,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tready,
    m_axis_tvalid,
    m_axis_tdata,
    m_axis_tlast,
    m_axis_tready,
    init_clk_in,
    gt_refclk1,
    drpclk_in,
    user_clk_out,
    reset,
    sys_reset_out,
    S_AXI_ACLK,
    S_AXI_ARESETN,
    S_AXI_AWADDR,
    S_AXI_AWPROT,
    S_AXI_AWVALID,
    S_AXI_AWREADY,
    S_AXI_WDATA,
    S_AXI_WSTRB,
    S_AXI_WVALID,
    S_AXI_WREADY,
    S_AXI_BVALID,
    S_AXI_BREADY,
    S_AXI_ARADDR,
    S_AXI_ARPROT,
    S_AXI_ARVALID,
    S_AXI_ARREADY,
    S_AXI_RDATA,
    S_AXI_RVALID,
    S_AXI_RREADY);
  input SFP_RX_P;
  input SFP_RX_N;
  output SFP_TX_P;
  output SFP_TX_N;
  output SFP_TX_DISABLE_N;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  output s_axis_tready;
  output m_axis_tvalid;
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_axis_tready;
  input init_clk_in;
  input gt_refclk1;
  input drpclk_in;
  output user_clk_out;
  input reset;
  output sys_reset_out;
  input S_AXI_ACLK;
  input S_AXI_ARESETN;
  input [5:0]S_AXI_AWADDR;
  input [2:0]S_AXI_AWPROT;
  input S_AXI_AWVALID;
  output S_AXI_AWREADY;
  input [31:0]S_AXI_WDATA;
  input [3:0]S_AXI_WSTRB;
  input S_AXI_WVALID;
  output S_AXI_WREADY;
  output S_AXI_BVALID;
  input S_AXI_BREADY;
  input [5:0]S_AXI_ARADDR;
  input [2:0]S_AXI_ARPROT;
  input S_AXI_ARVALID;
  output S_AXI_ARREADY;
  output [31:0]S_AXI_RDATA;
  output S_AXI_RVALID;
  input S_AXI_RREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire SFP_RX_N;
  wire SFP_RX_P;
  wire SFP_TX_N;
  wire SFP_TX_P;
  wire S_AXI_ACLK;
  wire [5:0]S_AXI_ARADDR;
  wire S_AXI_ARESETN;
  wire S_AXI_ARREADY;
  wire S_AXI_ARREADY0;
  wire S_AXI_ARVALID;
  wire [5:0]S_AXI_AWADDR;
  wire S_AXI_AWREADY;
  wire S_AXI_AWREADY0;
  wire S_AXI_AWREADY_i_1_n_0;
  wire S_AXI_AWVALID;
  wire S_AXI_BREADY;
  wire S_AXI_BVALID;
  wire S_AXI_BVALID_i_1_n_0;
  wire [0:0]\^S_AXI_RDATA ;
  wire \S_AXI_RDATA[0]_i_1_n_0 ;
  wire S_AXI_RREADY;
  wire S_AXI_RVALID;
  wire S_AXI_RVALID_i_1_n_0;
  wire [31:0]S_AXI_WDATA;
  wire S_AXI_WREADY;
  wire S_AXI_WREADY0;
  wire S_AXI_WVALID;
  wire drpclk_in;
  wire fifo_loop_0_i_1_n_0;
  wire gt_refclk1;
  wire init_clk_in;
  wire [0:31]m_axis_aurora_tdata;
  wire m_axis_aurora_tlast;
  wire m_axis_aurora_tvalid;
  wire [31:0]m_axis_tdata;
  wire m_axis_tvalid;
  wire [3:0]p_0_in;
  wire reset;
  wire [5:2]s_axi_araddr;
  wire [0:31]s_axis_aurora_tdata;
  wire s_axis_aurora_tlast;
  wire s_axis_aurora_tready;
  wire s_axis_aurora_tvalid;
  wire [31:0]s_axis_loop_tdata;
  wire s_axis_loop_tlast;
  wire s_axis_loop_tvalid;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire slv_ctrl_loopback_i_1_n_0;
  wire slv_ctrl_loopback_i_2_n_0;
  wire sys_reset_out;
  wire user_clk_out;
  (* MARK_DEBUG *) wire [31:0]vio_in0;
  (* MARK_DEBUG *) wire [31:0]vio_out0;
  wire NLW_aurora_0_channel_up_UNCONNECTED;
  wire NLW_aurora_0_drprdy_out_UNCONNECTED;
  wire NLW_aurora_0_frame_err_UNCONNECTED;
  wire NLW_aurora_0_gt0_qplllock_out_UNCONNECTED;
  wire NLW_aurora_0_gt0_qpllrefclklost_out_UNCONNECTED;
  wire NLW_aurora_0_gt_qpllclk_quad1_out_UNCONNECTED;
  wire NLW_aurora_0_gt_qpllrefclk_quad1_out_UNCONNECTED;
  wire NLW_aurora_0_gt_reset_out_UNCONNECTED;
  wire NLW_aurora_0_hard_err_UNCONNECTED;
  wire NLW_aurora_0_lane_up_UNCONNECTED;
  wire NLW_aurora_0_link_reset_out_UNCONNECTED;
  wire NLW_aurora_0_pll_not_locked_out_UNCONNECTED;
  wire NLW_aurora_0_rx_resetdone_out_UNCONNECTED;
  wire NLW_aurora_0_soft_err_UNCONNECTED;
  wire NLW_aurora_0_sync_clk_out_UNCONNECTED;
  wire NLW_aurora_0_tx_lock_UNCONNECTED;
  wire NLW_aurora_0_tx_resetdone_out_UNCONNECTED;
  wire [15:0]NLW_aurora_0_drpdo_out_UNCONNECTED;
  wire [0:3]NLW_aurora_0_m_axi_rx_tkeep_UNCONNECTED;
  wire NLW_fifo_loop_0_rd_rst_busy_UNCONNECTED;
  wire NLW_fifo_loop_0_s_axis_tready_UNCONNECTED;
  wire NLW_fifo_loop_0_wr_rst_busy_UNCONNECTED;

  assign SFP_TX_DISABLE_N = \<const1> ;
  assign S_AXI_RDATA[31] = \<const0> ;
  assign S_AXI_RDATA[30] = \<const0> ;
  assign S_AXI_RDATA[29] = \<const0> ;
  assign S_AXI_RDATA[28] = \<const0> ;
  assign S_AXI_RDATA[27] = \<const0> ;
  assign S_AXI_RDATA[26] = \<const0> ;
  assign S_AXI_RDATA[25] = \<const0> ;
  assign S_AXI_RDATA[24] = \<const0> ;
  assign S_AXI_RDATA[23] = \<const0> ;
  assign S_AXI_RDATA[22] = \<const0> ;
  assign S_AXI_RDATA[21] = \<const0> ;
  assign S_AXI_RDATA[20] = \<const0> ;
  assign S_AXI_RDATA[19] = \<const0> ;
  assign S_AXI_RDATA[18] = \<const0> ;
  assign S_AXI_RDATA[17] = \<const0> ;
  assign S_AXI_RDATA[16] = \<const0> ;
  assign S_AXI_RDATA[15] = \<const0> ;
  assign S_AXI_RDATA[14] = \<const0> ;
  assign S_AXI_RDATA[13] = \<const0> ;
  assign S_AXI_RDATA[12] = \<const0> ;
  assign S_AXI_RDATA[11] = \<const0> ;
  assign S_AXI_RDATA[10] = \<const0> ;
  assign S_AXI_RDATA[9] = \<const0> ;
  assign S_AXI_RDATA[8] = \<const0> ;
  assign S_AXI_RDATA[7] = \<const0> ;
  assign S_AXI_RDATA[6] = \<const0> ;
  assign S_AXI_RDATA[5] = \<const0> ;
  assign S_AXI_RDATA[4] = \<const0> ;
  assign S_AXI_RDATA[3] = \<const0> ;
  assign S_AXI_RDATA[2] = \<const0> ;
  assign S_AXI_RDATA[1] = \<const0> ;
  assign S_AXI_RDATA[0] = \^S_AXI_RDATA [0];
  assign m_axis_tlast = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h2)) 
    S_AXI_ARREADY_i_1
       (.I0(S_AXI_ARVALID),
        .I1(S_AXI_ARREADY),
        .O(S_AXI_ARREADY0));
  FDRE S_AXI_ARREADY_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(S_AXI_ARREADY0),
        .Q(S_AXI_ARREADY),
        .R(S_AXI_AWREADY_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    S_AXI_AWREADY_i_1
       (.I0(S_AXI_ARESETN),
        .O(S_AXI_AWREADY_i_1_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    S_AXI_AWREADY_i_2
       (.I0(S_AXI_AWREADY),
        .I1(S_AXI_AWVALID),
        .I2(S_AXI_WVALID),
        .O(S_AXI_AWREADY0));
  FDRE S_AXI_AWREADY_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(S_AXI_AWREADY0),
        .Q(S_AXI_AWREADY),
        .R(S_AXI_AWREADY_i_1_n_0));
  LUT6 #(
    .INIT(64'h8000FFFF80008000)) 
    S_AXI_BVALID_i_1
       (.I0(S_AXI_AWVALID),
        .I1(S_AXI_WREADY),
        .I2(S_AXI_AWREADY),
        .I3(S_AXI_WVALID),
        .I4(S_AXI_BREADY),
        .I5(S_AXI_BVALID),
        .O(S_AXI_BVALID_i_1_n_0));
  FDRE S_AXI_BVALID_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(S_AXI_BVALID_i_1_n_0),
        .Q(S_AXI_BVALID),
        .R(S_AXI_AWREADY_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \S_AXI_RDATA[0]_i_1 
       (.I0(vio_in0[0]),
        .I1(s_axi_araddr[4]),
        .I2(s_axi_araddr[5]),
        .I3(s_axi_araddr[2]),
        .I4(s_axi_araddr[3]),
        .I5(S_AXI_ARESETN),
        .O(\S_AXI_RDATA[0]_i_1_n_0 ));
  FDRE \S_AXI_RDATA_reg[0] 
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(\S_AXI_RDATA[0]_i_1_n_0 ),
        .Q(\^S_AXI_RDATA ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h02F2)) 
    S_AXI_RVALID_i_1
       (.I0(S_AXI_ARVALID),
        .I1(S_AXI_ARREADY),
        .I2(S_AXI_RVALID),
        .I3(S_AXI_RREADY),
        .O(S_AXI_RVALID_i_1_n_0));
  FDRE S_AXI_RVALID_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(S_AXI_RVALID_i_1_n_0),
        .Q(S_AXI_RVALID),
        .R(S_AXI_AWREADY_i_1_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    S_AXI_WREADY_i_1
       (.I0(S_AXI_WREADY),
        .I1(S_AXI_AWVALID),
        .I2(S_AXI_WVALID),
        .O(S_AXI_WREADY0));
  FDRE S_AXI_WREADY_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(S_AXI_WREADY0),
        .Q(S_AXI_WREADY),
        .R(S_AXI_AWREADY_i_1_n_0));
  VCC VCC
       (.P(\<const1> ));
  top_aurora_0_0_aurora_8b10b_0 aurora_0
       (.channel_up(NLW_aurora_0_channel_up_UNCONNECTED),
        .drpaddr_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpclk_in(drpclk_in),
        .drpdi_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpdo_out(NLW_aurora_0_drpdo_out_UNCONNECTED[15:0]),
        .drpen_in(1'b0),
        .drprdy_out(NLW_aurora_0_drprdy_out_UNCONNECTED),
        .drpwe_in(1'b0),
        .frame_err(NLW_aurora_0_frame_err_UNCONNECTED),
        .gt0_qplllock_out(NLW_aurora_0_gt0_qplllock_out_UNCONNECTED),
        .gt0_qpllrefclklost_out(NLW_aurora_0_gt0_qpllrefclklost_out_UNCONNECTED),
        .gt_qpllclk_quad1_out(NLW_aurora_0_gt_qpllclk_quad1_out_UNCONNECTED),
        .gt_qpllrefclk_quad1_out(NLW_aurora_0_gt_qpllrefclk_quad1_out_UNCONNECTED),
        .gt_refclk1(gt_refclk1),
        .gt_reset(reset),
        .gt_reset_out(NLW_aurora_0_gt_reset_out_UNCONNECTED),
        .hard_err(NLW_aurora_0_hard_err_UNCONNECTED),
        .init_clk_in(init_clk_in),
        .lane_up(NLW_aurora_0_lane_up_UNCONNECTED),
        .link_reset_out(NLW_aurora_0_link_reset_out_UNCONNECTED),
        .loopback({1'b0,1'b0,1'b0}),
        .m_axi_rx_tdata(m_axis_aurora_tdata),
        .m_axi_rx_tkeep(NLW_aurora_0_m_axi_rx_tkeep_UNCONNECTED[0:3]),
        .m_axi_rx_tlast(m_axis_aurora_tlast),
        .m_axi_rx_tvalid(m_axis_aurora_tvalid),
        .pll_not_locked_out(NLW_aurora_0_pll_not_locked_out_UNCONNECTED),
        .power_down(1'b0),
        .reset(reset),
        .rx_resetdone_out(NLW_aurora_0_rx_resetdone_out_UNCONNECTED),
        .rxn(SFP_RX_N),
        .rxp(SFP_RX_P),
        .s_axi_tx_tdata(s_axis_aurora_tdata),
        .s_axi_tx_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_tx_tlast(s_axis_aurora_tlast),
        .s_axi_tx_tready(s_axis_aurora_tready),
        .s_axi_tx_tvalid(s_axis_aurora_tvalid),
        .soft_err(NLW_aurora_0_soft_err_UNCONNECTED),
        .sync_clk_out(NLW_aurora_0_sync_clk_out_UNCONNECTED),
        .sys_reset_out(sys_reset_out),
        .tx_lock(NLW_aurora_0_tx_lock_UNCONNECTED),
        .tx_resetdone_out(NLW_aurora_0_tx_resetdone_out_UNCONNECTED),
        .txn(SFP_TX_N),
        .txp(SFP_TX_P),
        .user_clk_out(user_clk_out));
  (* CHECK_LICENSE_TYPE = "fifo_loop,fifo_generator_v13_2_3,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "fifo_generator_v13_2_3,Vivado 2018.3" *) 
  top_aurora_0_0_fifo_loop fifo_loop_0
       (.m_axis_tdata(s_axis_loop_tdata),
        .m_axis_tlast(s_axis_loop_tlast),
        .m_axis_tready(s_axis_aurora_tready),
        .m_axis_tvalid(s_axis_loop_tvalid),
        .rd_rst_busy(NLW_fifo_loop_0_rd_rst_busy_UNCONNECTED),
        .s_aclk(user_clk_out),
        .s_aresetn(fifo_loop_0_i_1_n_0),
        .s_axis_tdata({m_axis_aurora_tdata[0],m_axis_aurora_tdata[1],m_axis_aurora_tdata[2],m_axis_aurora_tdata[3],m_axis_aurora_tdata[4],m_axis_aurora_tdata[5],m_axis_aurora_tdata[6],m_axis_aurora_tdata[7],m_axis_aurora_tdata[8],m_axis_aurora_tdata[9],m_axis_aurora_tdata[10],m_axis_aurora_tdata[11],m_axis_aurora_tdata[12],m_axis_aurora_tdata[13],m_axis_aurora_tdata[14],m_axis_aurora_tdata[15],m_axis_aurora_tdata[16],m_axis_aurora_tdata[17],m_axis_aurora_tdata[18],m_axis_aurora_tdata[19],m_axis_aurora_tdata[20],m_axis_aurora_tdata[21],m_axis_aurora_tdata[22],m_axis_aurora_tdata[23],m_axis_aurora_tdata[24],m_axis_aurora_tdata[25],m_axis_aurora_tdata[26],m_axis_aurora_tdata[27],m_axis_aurora_tdata[28],m_axis_aurora_tdata[29],m_axis_aurora_tdata[30],m_axis_aurora_tdata[31]}),
        .s_axis_tlast(m_axis_aurora_tlast),
        .s_axis_tready(NLW_fifo_loop_0_s_axis_tready_UNCONNECTED),
        .s_axis_tvalid(m_axis_aurora_tvalid),
        .wr_rst_busy(NLW_fifo_loop_0_wr_rst_busy_UNCONNECTED));
  LUT1 #(
    .INIT(2'h1)) 
    fifo_loop_0_i_1
       (.I0(sys_reset_out),
        .O(fifo_loop_0_i_1_n_0));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(vio_in0[31]));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(vio_in0[30]));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(vio_in0[21]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(vio_in0[20]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(vio_in0[19]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(vio_in0[18]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(vio_in0[17]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(vio_in0[16]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(vio_in0[15]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(vio_in0[14]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(vio_in0[13]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(vio_in0[12]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(vio_in0[29]));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(vio_in0[11]));
  LUT1 #(
    .INIT(2'h2)) 
    i_21
       (.I0(1'b0),
        .O(vio_in0[10]));
  LUT1 #(
    .INIT(2'h2)) 
    i_22
       (.I0(1'b0),
        .O(vio_in0[9]));
  LUT1 #(
    .INIT(2'h2)) 
    i_23
       (.I0(1'b0),
        .O(vio_in0[8]));
  LUT1 #(
    .INIT(2'h2)) 
    i_24
       (.I0(1'b0),
        .O(vio_in0[7]));
  LUT1 #(
    .INIT(2'h2)) 
    i_25
       (.I0(1'b0),
        .O(vio_in0[6]));
  LUT1 #(
    .INIT(2'h2)) 
    i_26
       (.I0(1'b0),
        .O(vio_in0[5]));
  LUT1 #(
    .INIT(2'h2)) 
    i_27
       (.I0(1'b0),
        .O(vio_in0[4]));
  LUT1 #(
    .INIT(2'h2)) 
    i_28
       (.I0(1'b0),
        .O(vio_in0[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_29
       (.I0(1'b0),
        .O(vio_in0[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(vio_in0[28]));
  LUT1 #(
    .INIT(2'h2)) 
    i_30
       (.I0(1'b0),
        .O(vio_in0[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(vio_in0[27]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(vio_in0[26]));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(vio_in0[25]));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(vio_in0[24]));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(vio_in0[23]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(vio_in0[22]));
  LUT2 #(
    .INIT(4'h4)) 
    m_axis_tvalid_INST_0
       (.I0(m_axis_aurora_tlast),
        .I1(m_axis_aurora_tvalid),
        .O(m_axis_tvalid));
  top_aurora_0_0_post post
       (.m_axi_rx_tdata(m_axis_aurora_tdata),
        .m_axi_rx_tlast(m_axis_aurora_tlast),
        .m_axi_rx_tvalid(m_axis_aurora_tvalid),
        .m_axis_tdata(m_axis_tdata),
        .sys_reset_out(sys_reset_out),
        .user_clk_out(user_clk_out));
  top_aurora_0_0_pre pre
       (.m_axis_tdata(s_axis_loop_tdata),
        .m_axis_tlast(s_axis_loop_tlast),
        .m_axis_tvalid(s_axis_loop_tvalid),
        .passthrough_reg_0(s_axis_tready),
        .s_axi_tx_tdata(s_axis_aurora_tdata),
        .s_axi_tx_tlast(s_axis_aurora_tlast),
        .s_axi_tx_tvalid(s_axis_aurora_tvalid),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid),
        .\storage_r_reg[15] (vio_in0[0]),
        .sys_reset_out(sys_reset_out),
        .user_clk_out(user_clk_out));
  FDRE \s_axi_araddr_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_ARREADY0),
        .D(S_AXI_ARADDR[2]),
        .Q(s_axi_araddr[2]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_araddr_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_ARREADY0),
        .D(S_AXI_ARADDR[3]),
        .Q(s_axi_araddr[3]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_araddr_reg[4] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_ARREADY0),
        .D(S_AXI_ARADDR[4]),
        .Q(s_axi_araddr[4]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_araddr_reg[5] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_ARREADY0),
        .D(S_AXI_ARADDR[5]),
        .Q(s_axi_araddr[5]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_awaddr_reg[2] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_AWREADY0),
        .D(S_AXI_AWADDR[2]),
        .Q(p_0_in[0]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_awaddr_reg[3] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_AWREADY0),
        .D(S_AXI_AWADDR[3]),
        .Q(p_0_in[1]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_awaddr_reg[4] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_AWREADY0),
        .D(S_AXI_AWADDR[4]),
        .Q(p_0_in[2]),
        .R(S_AXI_AWREADY_i_1_n_0));
  FDRE \s_axi_awaddr_reg[5] 
       (.C(S_AXI_ACLK),
        .CE(S_AXI_AWREADY0),
        .D(S_AXI_AWADDR[5]),
        .Q(p_0_in[3]),
        .R(S_AXI_AWREADY_i_1_n_0));
  LUT5 #(
    .INIT(32'hBFFF8000)) 
    slv_ctrl_loopback_i_1
       (.I0(S_AXI_WDATA[0]),
        .I1(S_AXI_AWREADY),
        .I2(slv_ctrl_loopback_i_2_n_0),
        .I3(S_AXI_WVALID),
        .I4(vio_in0[0]),
        .O(slv_ctrl_loopback_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    slv_ctrl_loopback_i_2
       (.I0(S_AXI_AWVALID),
        .I1(p_0_in[3]),
        .I2(p_0_in[1]),
        .I3(p_0_in[0]),
        .I4(p_0_in[2]),
        .I5(S_AXI_WREADY),
        .O(slv_ctrl_loopback_i_2_n_0));
  FDRE slv_ctrl_loopback_reg
       (.C(S_AXI_ACLK),
        .CE(1'b1),
        .D(slv_ctrl_loopback_i_1_n_0),
        .Q(vio_in0[0]),
        .R(S_AXI_AWREADY_i_1_n_0));
  (* CHECK_LICENSE_TYPE = "vio_aurora,vio,{}" *) 
  (* X_CORE_INFO = "vio,Vivado 2018.3" *) 
  top_aurora_0_0_vio_aurora vio_aurora
       (.clk(user_clk_out),
        .probe_in0(vio_in0),
        .probe_out0(vio_out0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0" *) 
module top_aurora_0_0_aurora_8b10b_0
   (s_axi_tx_tdata,
    s_axi_tx_tkeep,
    s_axi_tx_tvalid,
    s_axi_tx_tlast,
    s_axi_tx_tready,
    m_axi_rx_tdata,
    m_axi_rx_tkeep,
    m_axi_rx_tvalid,
    m_axi_rx_tlast,
    rxp,
    rxn,
    txp,
    txn,
    gt_refclk1,
    frame_err,
    hard_err,
    soft_err,
    lane_up,
    channel_up,
    user_clk_out,
    sync_clk_out,
    gt_reset,
    reset,
    sys_reset_out,
    gt_reset_out,
    power_down,
    loopback,
    tx_lock,
    init_clk_in,
    tx_resetdone_out,
    rx_resetdone_out,
    link_reset_out,
    drpclk_in,
    drpaddr_in,
    drpen_in,
    drpdi_in,
    drprdy_out,
    drpdo_out,
    drpwe_in,
    gt0_qplllock_out,
    gt0_qpllrefclklost_out,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    pll_not_locked_out);
  input [0:31]s_axi_tx_tdata;
  input [0:3]s_axi_tx_tkeep;
  input s_axi_tx_tvalid;
  input s_axi_tx_tlast;
  output s_axi_tx_tready;
  output [0:31]m_axi_rx_tdata;
  output [0:3]m_axi_rx_tkeep;
  output m_axi_rx_tvalid;
  output m_axi_rx_tlast;
  input rxp;
  input rxn;
  output txp;
  output txn;
  input gt_refclk1;
  output frame_err;
  output hard_err;
  output soft_err;
  output lane_up;
  output channel_up;
  output user_clk_out;
  output sync_clk_out;
  input gt_reset;
  input reset;
  output sys_reset_out;
  output gt_reset_out;
  input power_down;
  input [2:0]loopback;
  output tx_lock;
  input init_clk_in;
  output tx_resetdone_out;
  output rx_resetdone_out;
  output link_reset_out;
  input drpclk_in;
  input [8:0]drpaddr_in;
  input drpen_in;
  input [15:0]drpdi_in;
  output drprdy_out;
  output [15:0]drpdo_out;
  input drpwe_in;
  output gt0_qplllock_out;
  output gt0_qpllrefclklost_out;
  output gt_qpllclk_quad1_out;
  output gt_qpllrefclk_quad1_out;
  output pll_not_locked_out;

  wire channel_up;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire frame_err;
  wire gt0_qplllock_out;
  wire gt0_qpllrefclklost_out;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire gt_reset;
  wire gt_reset_out;
  wire hard_err;
  wire init_clk_in;
  wire lane_up;
  wire link_reset_out;
  wire [2:0]loopback;
  wire [0:31]m_axi_rx_tdata;
  wire [0:3]m_axi_rx_tkeep;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire pll_not_locked_out;
  wire power_down;
  wire reset;
  wire rx_resetdone_out;
  wire rxn;
  wire rxp;
  wire [0:31]s_axi_tx_tdata;
  wire [0:3]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire soft_err;
  wire sync_clk_out;
  wire sys_reset_out;
  wire tx_lock;
  wire tx_resetdone_out;
  wire txn;
  wire txp;
  wire user_clk_out;

  top_aurora_0_0_aurora_8b10b_0_support inst
       (.channel_up(channel_up),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drpwe_in(drpwe_in),
        .frame_err(frame_err),
        .gt0_qplllock_out(gt0_qplllock_out),
        .gt0_qpllrefclklost_out(gt0_qpllrefclklost_out),
        .gt_qpllclk_quad1_out(gt_qpllclk_quad1_out),
        .gt_qpllrefclk_quad1_out(gt_qpllrefclk_quad1_out),
        .gt_refclk1(gt_refclk1),
        .gt_reset(gt_reset),
        .gt_reset_out(gt_reset_out),
        .hard_err(hard_err),
        .init_clk_in(init_clk_in),
        .lane_up(lane_up),
        .link_reset_out(link_reset_out),
        .loopback(loopback),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tkeep(m_axi_rx_tkeep),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .pll_not_locked_out(pll_not_locked_out),
        .power_down(power_down),
        .reset(reset),
        .rx_resetdone_out(rx_resetdone_out),
        .rxn(rxn),
        .rxp(rxp),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .soft_err(soft_err),
        .sync_clk_out(sync_clk_out),
        .sys_reset_out(sys_reset_out),
        .tx_lock(tx_lock),
        .tx_resetdone_out(tx_resetdone_out),
        .txn(txn),
        .txp(txp),
        .user_clk_out(user_clk_out));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_AURORA_LANE_4BYTE" *) 
module top_aurora_0_0_aurora_8b10b_0_AURORA_LANE_4BYTE
   (lane_up,
    ena_comma_align_i,
    consecutive_commas_r,
    begin_r,
    enable_err_detect_i,
    TXCHARISK,
    \left_align_select_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    got_v_i,
    link_reset_out,
    rx_polarity_i,
    \RX_ECP_reg[1] ,
    Q,
    \RX_SCP_reg[0] ,
    \RX_ECP_reg[0] ,
    \RX_PAD_reg[1] ,
    hard_err_i,
    ready_r_reg,
    \previous_cycle_data_r_reg[7] ,
    \previous_cycle_control_r_reg[0] ,
    TXDATA,
    \word_aligned_data_r_reg[24] ,
    \word_aligned_data_r_reg[16] ,
    \word_aligned_data_r_reg[8] ,
    \word_aligned_data_r_reg[0] ,
    \RX_PE_DATA_V_reg[0] ,
    \SOFT_ERR_reg[0] ,
    after_scp_select_c_0,
    after_scp_select_c_1,
    \TX_DATA_reg[0] ,
    SR,
    gen_cc_i,
    gen_ecp_i,
    gen_scp_striped_i,
    gen_a_i,
    \left_align_select_r_reg[0]_0 ,
    \left_align_select_r_reg[1]_0 ,
    \word_aligned_control_bits_r_reg[3] ,
    \word_aligned_control_bits_r_reg[2] ,
    hard_err_gt0,
    init_clk_in,
    rx_realign_i,
    reset_count_r_reg,
    reset_count_r_reg_0,
    RXCHARISK,
    RXDATA,
    D,
    \tx_pe_data_v_r_reg[0] ,
    \gen_pad_r_reg[0] ,
    \gen_v_r_reg[1] ,
    \gen_r_r_reg[0] ,
    \gen_k_r_reg[0] ,
    \tx_pe_data_r_reg[0] ,
    \word_aligned_data_r_reg[24]_0 ,
    \word_aligned_data_r_reg[16]_0 ,
    \soft_err_r_reg[0] );
  output lane_up;
  output ena_comma_align_i;
  output consecutive_commas_r;
  output begin_r;
  output enable_err_detect_i;
  output [3:0]TXCHARISK;
  output \left_align_select_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  output got_v_i;
  output link_reset_out;
  output rx_polarity_i;
  output \RX_ECP_reg[1] ;
  output [1:0]Q;
  output [1:0]\RX_SCP_reg[0] ;
  output \RX_ECP_reg[0] ;
  output \RX_PAD_reg[1] ;
  output hard_err_i;
  output ready_r_reg;
  output [5:0]\previous_cycle_data_r_reg[7] ;
  output [0:0]\previous_cycle_control_r_reg[0] ;
  output [31:0]TXDATA;
  output [7:0]\word_aligned_data_r_reg[24] ;
  output [7:0]\word_aligned_data_r_reg[16] ;
  output [7:0]\word_aligned_data_r_reg[8] ;
  output [7:0]\word_aligned_data_r_reg[0] ;
  output [1:0]\RX_PE_DATA_V_reg[0] ;
  output [1:0]\SOFT_ERR_reg[0] ;
  output after_scp_select_c_0;
  output after_scp_select_c_1;
  input \TX_DATA_reg[0] ;
  input [0:0]SR;
  input gen_cc_i;
  input gen_ecp_i;
  input [0:0]gen_scp_striped_i;
  input gen_a_i;
  input \left_align_select_r_reg[0]_0 ;
  input \left_align_select_r_reg[1]_0 ;
  input \word_aligned_control_bits_r_reg[3] ;
  input \word_aligned_control_bits_r_reg[2] ;
  input hard_err_gt0;
  input init_clk_in;
  input rx_realign_i;
  input reset_count_r_reg;
  input reset_count_r_reg_0;
  input [3:0]RXCHARISK;
  input [31:0]RXDATA;
  input [3:0]D;
  input [1:0]\tx_pe_data_v_r_reg[0] ;
  input [1:0]\gen_pad_r_reg[0] ;
  input [2:0]\gen_v_r_reg[1] ;
  input [3:0]\gen_r_r_reg[0] ;
  input [3:0]\gen_k_r_reg[0] ;
  input [31:0]\tx_pe_data_r_reg[0] ;
  input [7:0]\word_aligned_data_r_reg[24]_0 ;
  input [5:0]\word_aligned_data_r_reg[16]_0 ;
  input [3:0]\soft_err_r_reg[0] ;

  wire [3:0]D;
  wire GEN_SP;
  wire [1:0]Q;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA;
  wire RX_CC;
  wire \RX_ECP_reg[0] ;
  wire \RX_ECP_reg[1] ;
  wire RX_NEG;
  wire \RX_PAD_reg[1] ;
  wire [1:0]\RX_PE_DATA_V_reg[0] ;
  wire [1:0]\RX_SCP_reg[0] ;
  wire [1:0]\SOFT_ERR_reg[0] ;
  wire [0:0]SR;
  wire [3:0]TXCHARISK;
  wire [31:0]TXDATA;
  wire \TX_DATA_reg[0] ;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire aurora_8b10b_0_lane_init_sm_4byte_i_n_9;
  wire begin_r;
  wire consecutive_commas_r;
  wire counter3_r0;
  wire counter4_r0;
  wire ena_comma_align_i;
  wire enable_err_detect_i;
  wire first_v_received_r;
  wire gen_a_i;
  wire gen_cc_i;
  wire gen_ecp_i;
  wire [3:0]\gen_k_r_reg[0] ;
  wire [1:0]\gen_pad_r_reg[0] ;
  wire [3:0]\gen_r_r_reg[0] ;
  wire [0:0]gen_scp_striped_i;
  wire gen_spa_i;
  wire gen_spa_r;
  wire [2:0]\gen_v_r_reg[1] ;
  wire got_v_i;
  wire hard_err_gt0;
  wire hard_err_i;
  wire init_clk_in;
  wire lane_up;
  wire \left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire link_reset_out;
  wire [0:0]\previous_cycle_control_r_reg[0] ;
  wire [5:0]\previous_cycle_data_r_reg[7] ;
  wire ready_r;
  wire ready_r_reg;
  wire ready_r_reg0;
  wire reset_count_r_reg;
  wire reset_count_r_reg_0;
  wire rx_polarity_i;
  wire rx_realign_i;
  wire [3:0]\soft_err_r_reg[0] ;
  wire [31:0]\tx_pe_data_r_reg[0] ;
  wire [1:0]\tx_pe_data_v_r_reg[0] ;
  wire \word_aligned_control_bits_r_reg[2] ;
  wire \word_aligned_control_bits_r_reg[3] ;
  wire [7:0]\word_aligned_data_r_reg[0] ;
  wire [7:0]\word_aligned_data_r_reg[16] ;
  wire [5:0]\word_aligned_data_r_reg[16]_0 ;
  wire [7:0]\word_aligned_data_r_reg[24] ;
  wire [7:0]\word_aligned_data_r_reg[24]_0 ;
  wire [7:0]\word_aligned_data_r_reg[8] ;

  top_aurora_0_0_aurora_8b10b_0_ERR_DETECT_4BYTE aurora_8b10b_0_err_detect_4byte_i
       (.\SOFT_ERR_reg[0]_0 (\SOFT_ERR_reg[0] ),
        .SR(SR),
        .enable_err_detect_i(enable_err_detect_i),
        .\good_cnt_r_reg[0]_0 (\TX_DATA_reg[0] ),
        .hard_err_frm_soft_err_reg_0(aurora_8b10b_0_lane_init_sm_4byte_i_n_9),
        .hard_err_gt0(hard_err_gt0),
        .hard_err_i(hard_err_i),
        .ready_r_reg0(ready_r_reg0),
        .\soft_err_r_reg[0]_0 (\soft_err_r_reg[0] ));
  top_aurora_0_0_aurora_8b10b_0_hotplug aurora_8b10b_0_hotplug_i
       (.D(RX_CC),
        .SR(SR),
        .init_clk_in(init_clk_in),
        .link_reset_out(link_reset_out),
        .p_level_in_d1_cdc_from_reg(\TX_DATA_reg[0] ));
  top_aurora_0_0_aurora_8b10b_0_LANE_INIT_SM_4BYTE aurora_8b10b_0_lane_init_sm_4byte_i
       (.D(D),
        .ENABLE_ERR_DETECT_reg_0(aurora_8b10b_0_lane_init_sm_4byte_i_n_9),
        .GEN_SP(GEN_SP),
        .RXCHARISK(RXCHARISK[3:2]),
        .RX_NEG(RX_NEG),
        .SR(SR),
        .align_r_reg_0(ena_comma_align_i),
        .begin_r(begin_r),
        .consecutive_commas_r(consecutive_commas_r),
        .\counter1_r_reg[0]_0 (\TX_DATA_reg[0] ),
        .counter3_r0(counter3_r0),
        .counter4_r0(counter4_r0),
        .enable_err_detect_i(enable_err_detect_i),
        .first_v_received_r(first_v_received_r),
        .gen_spa_i(gen_spa_i),
        .gen_spa_r(gen_spa_r),
        .lane_up(lane_up),
        .ready_r(ready_r),
        .ready_r_reg0(ready_r_reg0),
        .ready_r_reg_0(ready_r_reg),
        .reset_count_r_reg_0(reset_count_r_reg),
        .reset_count_r_reg_1(reset_count_r_reg_0),
        .rx_polarity_i(rx_polarity_i),
        .rx_realign_i(rx_realign_i));
  top_aurora_0_0_aurora_8b10b_0_SYM_DEC_4BYTE aurora_8b10b_0_sym_dec_4byte_i
       (.D(RX_CC),
        .Q(Q),
        .RXCHARISK(RXCHARISK),
        .RXDATA(RXDATA),
        .\RX_ECP_reg[0]_0 (\RX_ECP_reg[0] ),
        .\RX_ECP_reg[1]_0 (\RX_ECP_reg[1] ),
        .RX_NEG(RX_NEG),
        .\RX_PAD_reg[1]_0 (\RX_PAD_reg[1] ),
        .\RX_PE_DATA_V_reg[0]_0 (\RX_PE_DATA_V_reg[0] ),
        .\RX_SCP_reg[0]_0 (\RX_SCP_reg[0] ),
        .after_scp_select_c_0(after_scp_select_c_0),
        .after_scp_select_c_1(after_scp_select_c_1),
        .counter3_r0(counter3_r0),
        .counter4_r0(counter4_r0),
        .first_v_received_r(first_v_received_r),
        .gen_spa_i(gen_spa_i),
        .got_v_i(got_v_i),
        .lane_up(lane_up),
        .\left_align_select_r_reg[0]_0 (\left_align_select_r_reg[0] ),
        .\left_align_select_r_reg[0]_1 (\left_align_select_r_reg[0]_0 ),
        .\left_align_select_r_reg[1]_0 (\left_align_select_r_reg[1] ),
        .\left_align_select_r_reg[1]_1 (\left_align_select_r_reg[1]_0 ),
        .\previous_cycle_control_r_reg[0]_0 (\previous_cycle_control_r_reg[0] ),
        .\previous_cycle_data_r_reg[7]_0 (\previous_cycle_data_r_reg[7] ),
        .ready_r(ready_r),
        .\rx_cc_r_reg[1]_0 (\TX_DATA_reg[0] ),
        .\word_aligned_control_bits_r_reg[2]_0 (\word_aligned_control_bits_r_reg[2] ),
        .\word_aligned_control_bits_r_reg[3]_0 (\word_aligned_control_bits_r_reg[3] ),
        .\word_aligned_data_r_reg[0]_0 (\word_aligned_data_r_reg[0] ),
        .\word_aligned_data_r_reg[16]_0 (\word_aligned_data_r_reg[16] ),
        .\word_aligned_data_r_reg[16]_1 (\word_aligned_data_r_reg[16]_0 ),
        .\word_aligned_data_r_reg[24]_0 (\word_aligned_data_r_reg[24] ),
        .\word_aligned_data_r_reg[24]_1 (\word_aligned_data_r_reg[24]_0 ),
        .\word_aligned_data_r_reg[8]_0 (\word_aligned_data_r_reg[8] ));
  top_aurora_0_0_aurora_8b10b_0_SYM_GEN_4BYTE aurora_8b10b_0_sym_gen_4byte_i
       (.GEN_SP(GEN_SP),
        .TXCHARISK(TXCHARISK),
        .TXDATA(TXDATA),
        .\TX_DATA_reg[0]_0 (\TX_DATA_reg[0] ),
        .gen_a_i(gen_a_i),
        .gen_cc_i(gen_cc_i),
        .gen_ecp_i(gen_ecp_i),
        .\gen_k_r_reg[0]_0 (\gen_k_r_reg[0] ),
        .\gen_pad_r_reg[0]_0 (\gen_pad_r_reg[0] ),
        .\gen_r_r_reg[0]_0 (\gen_r_r_reg[0] ),
        .gen_scp_striped_i(gen_scp_striped_i),
        .gen_spa_i(gen_spa_i),
        .gen_spa_r(gen_spa_r),
        .\gen_v_r_reg[1]_0 (\gen_v_r_reg[1] ),
        .\tx_pe_data_r_reg[0]_0 (\tx_pe_data_r_reg[0] ),
        .\tx_pe_data_v_r_reg[0]_0 (\tx_pe_data_v_r_reg[0] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_AXI_TO_LL" *) 
module top_aurora_0_0_aurora_8b10b_0_AXI_TO_LL
   (new_pkt_r_reg_0,
    new_pkt_r,
    new_pkt_r_reg_1);
  output new_pkt_r_reg_0;
  input new_pkt_r;
  input new_pkt_r_reg_1;

  wire new_pkt_r;
  wire new_pkt_r_reg_0;
  wire new_pkt_r_reg_1;

  FDRE new_pkt_r_reg
       (.C(new_pkt_r_reg_1),
        .CE(1'b1),
        .D(new_pkt_r),
        .Q(new_pkt_r_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_CHANNEL_ERR_DETECT" *) 
module top_aurora_0_0_aurora_8b10b_0_CHANNEL_ERR_DETECT
   (soft_err,
    hard_err,
    reset_channel_i,
    wait_for_lane_up_r0,
    RESET_CHANNEL_reg_0,
    hard_err_i,
    lane_up,
    verify_r_reg,
    power_down,
    D);
  output soft_err;
  output hard_err;
  output reset_channel_i;
  output wait_for_lane_up_r0;
  input RESET_CHANNEL_reg_0;
  input hard_err_i;
  input lane_up;
  input [0:0]verify_r_reg;
  input power_down;
  input [1:0]D;

  wire [1:0]D;
  wire RESET_CHANNEL0;
  wire RESET_CHANNEL_reg_0;
  wire channel_soft_err_c;
  wire hard_err;
  wire hard_err_i;
  wire hard_err_r;
  wire lane_up;
  wire lane_up_r;
  wire power_down;
  wire reset_channel_i;
  wire soft_err;
  wire [1:0]soft_err_r;
  wire [0:0]verify_r_reg;
  wire wait_for_lane_up_r0;

  FDRE #(
    .INIT(1'b1)) 
    CHANNEL_HARD_ERR_reg
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(hard_err_r),
        .Q(hard_err),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    CHANNEL_SOFT_ERR_i_1
       (.I0(soft_err_r[1]),
        .I1(soft_err_r[0]),
        .O(channel_soft_err_c));
  FDRE #(
    .INIT(1'b1)) 
    CHANNEL_SOFT_ERR_reg
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(channel_soft_err_c),
        .Q(soft_err),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    RESET_CHANNEL_i_1
       (.I0(power_down),
        .I1(lane_up_r),
        .O(RESET_CHANNEL0));
  FDRE #(
    .INIT(1'b1)) 
    RESET_CHANNEL_reg
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(RESET_CHANNEL0),
        .Q(reset_channel_i),
        .R(1'b0));
  FDRE hard_err_r_reg
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(hard_err_i),
        .Q(hard_err_r),
        .R(1'b0));
  FDRE lane_up_r_reg
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(lane_up),
        .Q(lane_up_r),
        .R(1'b0));
  FDRE \soft_err_r_reg[0] 
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(D[1]),
        .Q(soft_err_r[1]),
        .R(1'b0));
  FDRE \soft_err_r_reg[1] 
       (.C(RESET_CHANNEL_reg_0),
        .CE(1'b1),
        .D(D[0]),
        .Q(soft_err_r[0]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    verify_r_i_1
       (.I0(reset_channel_i),
        .I1(verify_r_reg),
        .O(wait_for_lane_up_r0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_CHANNEL_INIT_SM" *) 
module top_aurora_0_0_aurora_8b10b_0_CHANNEL_INIT_SM
   (gen_ver_i,
    SR,
    channel_up,
    start_rx_i,
    gtrxreset_i,
    START_RX_reg_0,
    p_0_in,
    \free_count_r_reg[13]_0 ,
    txver_count_r0,
    got_v_i,
    wait_for_lane_up_r0,
    \gtrxreset_extend_r_reg[0]_0 ,
    reset_channel_i);
  output gen_ver_i;
  output [0:0]SR;
  output channel_up;
  output start_rx_i;
  output gtrxreset_i;
  output [0:0]START_RX_reg_0;
  output p_0_in;
  input \free_count_r_reg[13]_0 ;
  input txver_count_r0;
  input got_v_i;
  input wait_for_lane_up_r0;
  input [0:0]\gtrxreset_extend_r_reg[0]_0 ;
  input reset_channel_i;

  wire GTRXRESET_OUT_i_1_n_0;
  wire GTRXRESET_OUT_i_2_n_0;
  wire [0:0]SR;
  wire START_RX0;
  wire [0:0]START_RX_reg_0;
  wire all_lanes_v_r;
  wire bad_v_r;
  wire bad_v_r0;
  wire channel_up;
  wire \free_count_r[13]_i_2_n_0 ;
  wire \free_count_r[13]_i_3_n_0 ;
  wire \free_count_r[13]_i_4_n_0 ;
  wire \free_count_r[13]_i_5_n_0 ;
  wire \free_count_r[1]_i_2_n_0 ;
  wire \free_count_r[1]_i_3_n_0 ;
  wire \free_count_r[5]_i_2_n_0 ;
  wire \free_count_r[5]_i_3_n_0 ;
  wire \free_count_r[5]_i_4_n_0 ;
  wire \free_count_r[5]_i_5_n_0 ;
  wire \free_count_r[9]_i_2_n_0 ;
  wire \free_count_r[9]_i_3_n_0 ;
  wire \free_count_r[9]_i_4_n_0 ;
  wire \free_count_r[9]_i_5_n_0 ;
  wire [0:13]free_count_r_reg;
  wire \free_count_r_reg[13]_0 ;
  wire \free_count_r_reg[13]_i_1_n_0 ;
  wire \free_count_r_reg[13]_i_1_n_1 ;
  wire \free_count_r_reg[13]_i_1_n_2 ;
  wire \free_count_r_reg[13]_i_1_n_3 ;
  wire \free_count_r_reg[13]_i_1_n_4 ;
  wire \free_count_r_reg[13]_i_1_n_5 ;
  wire \free_count_r_reg[13]_i_1_n_6 ;
  wire \free_count_r_reg[13]_i_1_n_7 ;
  wire \free_count_r_reg[1]_i_1_n_3 ;
  wire \free_count_r_reg[1]_i_1_n_6 ;
  wire \free_count_r_reg[1]_i_1_n_7 ;
  wire \free_count_r_reg[5]_i_1_n_0 ;
  wire \free_count_r_reg[5]_i_1_n_1 ;
  wire \free_count_r_reg[5]_i_1_n_2 ;
  wire \free_count_r_reg[5]_i_1_n_3 ;
  wire \free_count_r_reg[5]_i_1_n_4 ;
  wire \free_count_r_reg[5]_i_1_n_5 ;
  wire \free_count_r_reg[5]_i_1_n_6 ;
  wire \free_count_r_reg[5]_i_1_n_7 ;
  wire \free_count_r_reg[9]_i_1_n_0 ;
  wire \free_count_r_reg[9]_i_1_n_1 ;
  wire \free_count_r_reg[9]_i_1_n_2 ;
  wire \free_count_r_reg[9]_i_1_n_3 ;
  wire \free_count_r_reg[9]_i_1_n_4 ;
  wire \free_count_r_reg[9]_i_1_n_5 ;
  wire \free_count_r_reg[9]_i_1_n_6 ;
  wire \free_count_r_reg[9]_i_1_n_7 ;
  wire gen_ver_i;
  wire got_first_v_r;
  wire got_first_v_r_i_1_n_0;
  wire got_v_i;
  wire gtreset_c;
  wire [7:0]gtrxreset_extend_r;
  wire [0:0]\gtrxreset_extend_r_reg[0]_0 ;
  wire gtrxreset_i;
  wire gtrxreset_nxt;
  wire next_ready_c;
  wire next_verify_c;
  wire p_0_in;
  wire [15:15]p_2_out;
  wire ready_r;
  wire ready_r2;
  wire reset_channel_i;
  wire reset_lanes_c;
  wire \rxver_count_r_reg[1]_srl2_i_1_n_0 ;
  wire \rxver_count_r_reg[1]_srl2_n_0 ;
  wire \rxver_count_r_reg_n_0_[2] ;
  wire start_rx_i;
  wire txver_count_r0;
  wire \txver_count_r_reg[6]_srl7_n_0 ;
  wire \txver_count_r_reg_n_0_[7] ;
  wire \v_count_r_reg[14]_srl15_n_0 ;
  wire \v_count_r_reg_n_0_[15] ;
  wire \verify_watchdog_r_reg[14]_srl15_i_1_n_0 ;
  wire \verify_watchdog_r_reg[14]_srl15_i_2_n_0 ;
  wire \verify_watchdog_r_reg[14]_srl15_i_3_n_0 ;
  wire \verify_watchdog_r_reg[14]_srl15_i_4_n_0 ;
  wire \verify_watchdog_r_reg[14]_srl15_n_0 ;
  wire \verify_watchdog_r_reg_n_0_[15] ;
  wire wait_for_lane_up_r;
  wire wait_for_lane_up_r0;
  wire [3:1]\NLW_free_count_r_reg[1]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_free_count_r_reg[1]_i_1_O_UNCONNECTED ;

  FDRE CHANNEL_UP_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(ready_r2),
        .Q(channel_up),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    FRAME_ERR_i_1
       (.I0(start_rx_i),
        .O(START_RX_reg_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    GTRXRESET_OUT_i_1
       (.I0(gtrxreset_extend_r[2]),
        .I1(gtrxreset_extend_r[3]),
        .I2(gtrxreset_extend_r[0]),
        .I3(gtrxreset_extend_r[1]),
        .I4(GTRXRESET_OUT_i_2_n_0),
        .O(GTRXRESET_OUT_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    GTRXRESET_OUT_i_2
       (.I0(gtrxreset_extend_r[5]),
        .I1(gtrxreset_extend_r[4]),
        .I2(gtrxreset_extend_r[7]),
        .I3(gtrxreset_extend_r[6]),
        .O(GTRXRESET_OUT_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    GTRXRESET_OUT_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(GTRXRESET_OUT_i_1_n_0),
        .Q(gtrxreset_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    START_RX_i_1
       (.I0(wait_for_lane_up_r),
        .O(START_RX0));
  FDRE START_RX_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(START_RX0),
        .Q(start_rx_i),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE all_lanes_v_r_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(got_v_i),
        .Q(all_lanes_v_r),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h28)) 
    bad_v_r_i_1
       (.I0(got_first_v_r),
        .I1(all_lanes_v_r),
        .I2(\v_count_r_reg_n_0_[15] ),
        .O(bad_v_r0));
  FDRE bad_v_r_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(bad_v_r0),
        .Q(bad_v_r),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_2 
       (.I0(free_count_r_reg[10]),
        .O(\free_count_r[13]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_3 
       (.I0(free_count_r_reg[11]),
        .O(\free_count_r[13]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_4 
       (.I0(free_count_r_reg[12]),
        .O(\free_count_r[13]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_5 
       (.I0(free_count_r_reg[13]),
        .O(\free_count_r[13]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[1]_i_2 
       (.I0(free_count_r_reg[0]),
        .O(\free_count_r[1]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[1]_i_3 
       (.I0(free_count_r_reg[1]),
        .O(\free_count_r[1]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_2 
       (.I0(free_count_r_reg[2]),
        .O(\free_count_r[5]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_3 
       (.I0(free_count_r_reg[3]),
        .O(\free_count_r[5]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_4 
       (.I0(free_count_r_reg[4]),
        .O(\free_count_r[5]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_5 
       (.I0(free_count_r_reg[5]),
        .O(\free_count_r[5]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_2 
       (.I0(free_count_r_reg[6]),
        .O(\free_count_r[9]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_3 
       (.I0(free_count_r_reg[7]),
        .O(\free_count_r[9]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_4 
       (.I0(free_count_r_reg[8]),
        .O(\free_count_r[9]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_5 
       (.I0(free_count_r_reg[9]),
        .O(\free_count_r[9]_i_5_n_0 ));
  FDSE \free_count_r_reg[0] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[1]_i_1_n_6 ),
        .Q(free_count_r_reg[0]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[10] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_4 ),
        .Q(free_count_r_reg[10]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[11] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_5 ),
        .Q(free_count_r_reg[11]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[12] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_6 ),
        .Q(free_count_r_reg[12]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[13] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_7 ),
        .Q(free_count_r_reg[13]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[13]_i_1 
       (.CI(1'b0),
        .CO({\free_count_r_reg[13]_i_1_n_0 ,\free_count_r_reg[13]_i_1_n_1 ,\free_count_r_reg[13]_i_1_n_2 ,\free_count_r_reg[13]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\free_count_r_reg[13]_i_1_n_4 ,\free_count_r_reg[13]_i_1_n_5 ,\free_count_r_reg[13]_i_1_n_6 ,\free_count_r_reg[13]_i_1_n_7 }),
        .S({\free_count_r[13]_i_2_n_0 ,\free_count_r[13]_i_3_n_0 ,\free_count_r[13]_i_4_n_0 ,\free_count_r[13]_i_5_n_0 }));
  FDSE \free_count_r_reg[1] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[1]_i_1_n_7 ),
        .Q(free_count_r_reg[1]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[1]_i_1 
       (.CI(\free_count_r_reg[5]_i_1_n_0 ),
        .CO({\NLW_free_count_r_reg[1]_i_1_CO_UNCONNECTED [3:1],\free_count_r_reg[1]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\NLW_free_count_r_reg[1]_i_1_O_UNCONNECTED [3:2],\free_count_r_reg[1]_i_1_n_6 ,\free_count_r_reg[1]_i_1_n_7 }),
        .S({1'b0,1'b0,\free_count_r[1]_i_2_n_0 ,\free_count_r[1]_i_3_n_0 }));
  FDSE \free_count_r_reg[2] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_4 ),
        .Q(free_count_r_reg[2]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[3] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_5 ),
        .Q(free_count_r_reg[3]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[4] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_6 ),
        .Q(free_count_r_reg[4]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[5] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_7 ),
        .Q(free_count_r_reg[5]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[5]_i_1 
       (.CI(\free_count_r_reg[9]_i_1_n_0 ),
        .CO({\free_count_r_reg[5]_i_1_n_0 ,\free_count_r_reg[5]_i_1_n_1 ,\free_count_r_reg[5]_i_1_n_2 ,\free_count_r_reg[5]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\free_count_r_reg[5]_i_1_n_4 ,\free_count_r_reg[5]_i_1_n_5 ,\free_count_r_reg[5]_i_1_n_6 ,\free_count_r_reg[5]_i_1_n_7 }),
        .S({\free_count_r[5]_i_2_n_0 ,\free_count_r[5]_i_3_n_0 ,\free_count_r[5]_i_4_n_0 ,\free_count_r[5]_i_5_n_0 }));
  FDSE \free_count_r_reg[6] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_4 ),
        .Q(free_count_r_reg[6]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[7] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_5 ),
        .Q(free_count_r_reg[7]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[8] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_6 ),
        .Q(free_count_r_reg[8]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[9] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_7 ),
        .Q(free_count_r_reg[9]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[9]_i_1 
       (.CI(\free_count_r_reg[13]_i_1_n_0 ),
        .CO({\free_count_r_reg[9]_i_1_n_0 ,\free_count_r_reg[9]_i_1_n_1 ,\free_count_r_reg[9]_i_1_n_2 ,\free_count_r_reg[9]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\free_count_r_reg[9]_i_1_n_4 ,\free_count_r_reg[9]_i_1_n_5 ,\free_count_r_reg[9]_i_1_n_6 ,\free_count_r_reg[9]_i_1_n_7 }),
        .S({\free_count_r[9]_i_2_n_0 ,\free_count_r[9]_i_3_n_0 ,\free_count_r[9]_i_4_n_0 ,\free_count_r[9]_i_5_n_0 }));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    got_first_v_r_i_1
       (.I0(gen_ver_i),
        .I1(got_first_v_r),
        .I2(all_lanes_v_r),
        .O(got_first_v_r_i_1_n_0));
  FDRE got_first_v_r_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(got_first_v_r_i_1_n_0),
        .Q(got_first_v_r),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    gtreset_flop_0_i
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtreset_c),
        .Q(gtrxreset_nxt),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8A88)) 
    gtreset_flop_0_i_i_1
       (.I0(gen_ver_i),
        .I1(\verify_watchdog_r_reg_n_0_[15] ),
        .I2(\rxver_count_r_reg_n_0_[2] ),
        .I3(bad_v_r),
        .O(gtreset_c));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[0] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[1]),
        .Q(gtrxreset_extend_r[0]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[1] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[2]),
        .Q(gtrxreset_extend_r[1]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[2] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[3]),
        .Q(gtrxreset_extend_r[2]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[3] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[4]),
        .Q(gtrxreset_extend_r[3]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[4] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[5]),
        .Q(gtrxreset_extend_r[4]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[5] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[6]),
        .Q(gtrxreset_extend_r[5]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[6] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_extend_r[7]),
        .Q(gtrxreset_extend_r[6]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[7] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(gtrxreset_nxt),
        .Q(gtrxreset_extend_r[7]),
        .R(\gtrxreset_extend_r_reg[0]_0 ));
  FDRE ready_r2_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(ready_r),
        .Q(ready_r2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hEAAA)) 
    ready_r_i_1__0
       (.I0(ready_r),
        .I1(\rxver_count_r_reg_n_0_[2] ),
        .I2(\txver_count_r_reg_n_0_[7] ),
        .I3(gen_ver_i),
        .O(next_ready_c));
  FDRE ready_r_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(next_ready_c),
        .Q(ready_r),
        .R(wait_for_lane_up_r0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_lanes_flop_i
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(reset_lanes_c),
        .Q(SR),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFAE)) 
    reset_lanes_flop_i_i_1
       (.I0(gtreset_c),
        .I1(reset_channel_i),
        .I2(wait_for_lane_up_r),
        .I3(\gtrxreset_extend_r_reg[0]_0 ),
        .O(reset_lanes_c));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/rxver_count_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/rxver_count_r_reg[1]_srl2 " *) 
  SRL16E \rxver_count_r_reg[1]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(\rxver_count_r_reg[1]_srl2_i_1_n_0 ),
        .CLK(\free_count_r_reg[13]_0 ),
        .D(gen_ver_i),
        .Q(\rxver_count_r_reg[1]_srl2_n_0 ));
  LUT3 #(
    .INIT(8'h8F)) 
    \rxver_count_r_reg[1]_srl2_i_1 
       (.I0(all_lanes_v_r),
        .I1(\v_count_r_reg_n_0_[15] ),
        .I2(gen_ver_i),
        .O(\rxver_count_r_reg[1]_srl2_i_1_n_0 ));
  FDRE \rxver_count_r_reg[2] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(\rxver_count_r_reg[1]_srl2_i_1_n_0 ),
        .D(\rxver_count_r_reg[1]_srl2_n_0 ),
        .Q(\rxver_count_r_reg_n_0_[2] ),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    sof_to_eof_1_r_i_1
       (.I0(channel_up),
        .O(p_0_in));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/txver_count_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/txver_count_r_reg[6]_srl7 " *) 
  SRL16E \txver_count_r_reg[6]_srl7 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(txver_count_r0),
        .CLK(\free_count_r_reg[13]_0 ),
        .D(gen_ver_i),
        .Q(\txver_count_r_reg[6]_srl7_n_0 ));
  FDRE \txver_count_r_reg[7] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(txver_count_r0),
        .D(\txver_count_r_reg[6]_srl7_n_0 ),
        .Q(\txver_count_r_reg_n_0_[7] ),
        .R(1'b0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/v_count_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/v_count_r_reg[14]_srl15 " *) 
  SRL16E \v_count_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(\free_count_r_reg[13]_0 ),
        .D(p_2_out),
        .Q(\v_count_r_reg[14]_srl15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'h8F88)) 
    \v_count_r_reg[14]_srl15_i_1 
       (.I0(\v_count_r_reg_n_0_[15] ),
        .I1(gen_ver_i),
        .I2(got_first_v_r),
        .I3(all_lanes_v_r),
        .O(p_2_out));
  FDRE \v_count_r_reg[15] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(\v_count_r_reg[14]_srl15_n_0 ),
        .Q(\v_count_r_reg_n_0_[15] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hAEEE)) 
    verify_r_i_2
       (.I0(wait_for_lane_up_r),
        .I1(gen_ver_i),
        .I2(\rxver_count_r_reg_n_0_[2] ),
        .I3(\txver_count_r_reg_n_0_[7] ),
        .O(next_verify_c));
  FDRE verify_r_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(next_verify_c),
        .Q(gen_ver_i),
        .R(wait_for_lane_up_r0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/verify_watchdog_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/channel_init_sm_i/verify_watchdog_r_reg[14]_srl15 " *) 
  SRL16E \verify_watchdog_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(\verify_watchdog_r_reg[14]_srl15_i_1_n_0 ),
        .CLK(\free_count_r_reg[13]_0 ),
        .D(gen_ver_i),
        .Q(\verify_watchdog_r_reg[14]_srl15_n_0 ));
  LUT4 #(
    .INIT(16'h10FF)) 
    \verify_watchdog_r_reg[14]_srl15_i_1 
       (.I0(\verify_watchdog_r_reg[14]_srl15_i_2_n_0 ),
        .I1(\verify_watchdog_r_reg[14]_srl15_i_3_n_0 ),
        .I2(\verify_watchdog_r_reg[14]_srl15_i_4_n_0 ),
        .I3(gen_ver_i),
        .O(\verify_watchdog_r_reg[14]_srl15_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \verify_watchdog_r_reg[14]_srl15_i_2 
       (.I0(free_count_r_reg[13]),
        .I1(free_count_r_reg[5]),
        .I2(free_count_r_reg[8]),
        .I3(free_count_r_reg[12]),
        .O(\verify_watchdog_r_reg[14]_srl15_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \verify_watchdog_r_reg[14]_srl15_i_3 
       (.I0(free_count_r_reg[6]),
        .I1(free_count_r_reg[11]),
        .I2(free_count_r_reg[0]),
        .I3(free_count_r_reg[7]),
        .O(\verify_watchdog_r_reg[14]_srl15_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \verify_watchdog_r_reg[14]_srl15_i_4 
       (.I0(free_count_r_reg[2]),
        .I1(free_count_r_reg[4]),
        .I2(free_count_r_reg[9]),
        .I3(free_count_r_reg[3]),
        .I4(free_count_r_reg[10]),
        .I5(free_count_r_reg[1]),
        .O(\verify_watchdog_r_reg[14]_srl15_i_4_n_0 ));
  FDRE \verify_watchdog_r_reg[15] 
       (.C(\free_count_r_reg[13]_0 ),
        .CE(\verify_watchdog_r_reg[14]_srl15_i_1_n_0 ),
        .D(\verify_watchdog_r_reg[14]_srl15_n_0 ),
        .Q(\verify_watchdog_r_reg_n_0_[15] ),
        .R(1'b0));
  FDRE wait_for_lane_up_r_reg
       (.C(\free_count_r_reg[13]_0 ),
        .CE(1'b1),
        .D(wait_for_lane_up_r0),
        .Q(wait_for_lane_up_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_CLOCK_MODULE" *) 
module top_aurora_0_0_aurora_8b10b_0_CLOCK_MODULE
   (init_clk_in,
    tx_out_clk);
  output init_clk_in;
  input tx_out_clk;

  wire init_clk_in;
  wire tx_out_clk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG user_clk_buf_i
       (.I(tx_out_clk),
        .O(init_clk_in));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_ERR_DETECT_4BYTE" *) 
module top_aurora_0_0_aurora_8b10b_0_ERR_DETECT_4BYTE
   (ready_r_reg0,
    hard_err_i,
    \SOFT_ERR_reg[0]_0 ,
    hard_err_frm_soft_err_reg_0,
    \good_cnt_r_reg[0]_0 ,
    hard_err_gt0,
    SR,
    enable_err_detect_i,
    \soft_err_r_reg[0]_0 );
  output ready_r_reg0;
  output hard_err_i;
  output [1:0]\SOFT_ERR_reg[0]_0 ;
  input hard_err_frm_soft_err_reg_0;
  input \good_cnt_r_reg[0]_0 ;
  input hard_err_gt0;
  input [0:0]SR;
  input enable_err_detect_i;
  input [3:0]\soft_err_r_reg[0]_0 ;

  wire SOFT_ERR0;
  wire \SOFT_ERR[1]_i_1_n_0 ;
  wire [1:0]\SOFT_ERR_reg[0]_0 ;
  wire [0:0]SR;
  wire cnt_good_code_r;
  wire cnt_good_code_r_i_3_n_0;
  wire cnt_good_code_r_i_4_n_0;
  wire cnt_soft_err_r;
  wire enable_err_detect_i;
  wire [1:0]err_cnt_r;
  wire \err_cnt_r[0]_i_1_n_0 ;
  wire \err_cnt_r[1]_i_1_n_0 ;
  wire \err_cnt_r[2]_i_1_n_0 ;
  wire \err_cnt_r[2]_i_2_n_0 ;
  wire \good_cnt_r[3]_i_1_n_0 ;
  wire \good_cnt_r_reg[0]_0 ;
  wire [3:0]good_cnt_r_reg__0;
  wire hard_err_frm_soft_err;
  wire hard_err_frm_soft_err_reg_0;
  wire hard_err_gt;
  wire hard_err_gt0;
  wire hard_err_i;
  wire next_good_code_c;
  wire next_soft_err_c;
  wire next_start_c;
  wire p_0_in;
  wire [3:0]p_0_in__0;
  wire ready_r_reg0;
  wire [3:0]\soft_err_r_reg[0]_0 ;
  wire \soft_err_r_reg_n_0_[0] ;
  wire \soft_err_r_reg_n_0_[1] ;
  wire \soft_err_r_reg_n_0_[2] ;
  wire \soft_err_r_reg_n_0_[3] ;
  wire start_r;

  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \SOFT_ERR[0]_i_1 
       (.I0(\soft_err_r_reg_n_0_[0] ),
        .I1(\soft_err_r_reg_n_0_[1] ),
        .O(SOFT_ERR0));
  LUT2 #(
    .INIT(4'hE)) 
    \SOFT_ERR[1]_i_1 
       (.I0(\soft_err_r_reg_n_0_[2] ),
        .I1(\soft_err_r_reg_n_0_[3] ),
        .O(\SOFT_ERR[1]_i_1_n_0 ));
  FDRE \SOFT_ERR_reg[0] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(SOFT_ERR0),
        .Q(\SOFT_ERR_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \SOFT_ERR_reg[1] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\SOFT_ERR[1]_i_1_n_0 ),
        .Q(\SOFT_ERR_reg[0]_0 [0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'hFFAE)) 
    align_r_i_1
       (.I0(SR),
        .I1(p_0_in),
        .I2(hard_err_frm_soft_err),
        .I3(hard_err_gt),
        .O(ready_r_reg0));
  LUT5 #(
    .INIT(32'hAAAA2A00)) 
    cnt_good_code_r_i_2
       (.I0(cnt_good_code_r_i_3_n_0),
        .I1(cnt_good_code_r_i_4_n_0),
        .I2(good_cnt_r_reg__0[3]),
        .I3(cnt_good_code_r),
        .I4(cnt_soft_err_r),
        .O(next_good_code_c));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    cnt_good_code_r_i_3
       (.I0(\soft_err_r_reg_n_0_[1] ),
        .I1(\soft_err_r_reg_n_0_[0] ),
        .I2(\soft_err_r_reg_n_0_[3] ),
        .I3(\soft_err_r_reg_n_0_[2] ),
        .O(cnt_good_code_r_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h80)) 
    cnt_good_code_r_i_4
       (.I0(good_cnt_r_reg__0[2]),
        .I1(good_cnt_r_reg__0[1]),
        .I2(good_cnt_r_reg__0[0]),
        .O(cnt_good_code_r_i_4_n_0));
  FDRE cnt_good_code_r_reg
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_good_code_c),
        .Q(cnt_good_code_r),
        .R(hard_err_frm_soft_err_reg_0));
  LUT4 #(
    .INIT(16'h00FE)) 
    cnt_soft_err_r_i_1
       (.I0(cnt_soft_err_r),
        .I1(start_r),
        .I2(cnt_good_code_r),
        .I3(cnt_good_code_r_i_3_n_0),
        .O(next_soft_err_c));
  FDRE cnt_soft_err_r_reg
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_soft_err_c),
        .Q(cnt_soft_err_r),
        .R(hard_err_frm_soft_err_reg_0));
  LUT5 #(
    .INIT(32'hBEBE4140)) 
    \err_cnt_r[0]_i_1 
       (.I0(p_0_in),
        .I1(\err_cnt_r[2]_i_2_n_0 ),
        .I2(cnt_soft_err_r),
        .I3(err_cnt_r[1]),
        .I4(err_cnt_r[0]),
        .O(\err_cnt_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'hCCCC6CC8)) 
    \err_cnt_r[1]_i_1 
       (.I0(err_cnt_r[0]),
        .I1(err_cnt_r[1]),
        .I2(cnt_soft_err_r),
        .I3(\err_cnt_r[2]_i_2_n_0 ),
        .I4(p_0_in),
        .O(\err_cnt_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \err_cnt_r[2]_i_1 
       (.I0(err_cnt_r[0]),
        .I1(err_cnt_r[1]),
        .I2(cnt_soft_err_r),
        .I3(\err_cnt_r[2]_i_2_n_0 ),
        .I4(p_0_in),
        .O(\err_cnt_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hFFF1)) 
    \err_cnt_r[2]_i_2 
       (.I0(good_cnt_r_reg__0[3]),
        .I1(good_cnt_r_reg__0[2]),
        .I2(good_cnt_r_reg__0[1]),
        .I3(good_cnt_r_reg__0[0]),
        .O(\err_cnt_r[2]_i_2_n_0 ));
  FDRE \err_cnt_r_reg[0] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\err_cnt_r[0]_i_1_n_0 ),
        .Q(err_cnt_r[0]),
        .R(hard_err_frm_soft_err_reg_0));
  FDRE \err_cnt_r_reg[1] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\err_cnt_r[1]_i_1_n_0 ),
        .Q(err_cnt_r[1]),
        .R(hard_err_frm_soft_err_reg_0));
  FDRE \err_cnt_r_reg[2] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\err_cnt_r[2]_i_1_n_0 ),
        .Q(p_0_in),
        .R(hard_err_frm_soft_err_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \good_cnt_r[0]_i_1 
       (.I0(good_cnt_r_reg__0[0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \good_cnt_r[1]_i_1 
       (.I0(good_cnt_r_reg__0[0]),
        .I1(good_cnt_r_reg__0[1]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \good_cnt_r[2]_i_1 
       (.I0(good_cnt_r_reg__0[0]),
        .I1(good_cnt_r_reg__0[1]),
        .I2(good_cnt_r_reg__0[2]),
        .O(p_0_in__0[2]));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \good_cnt_r[3]_i_1 
       (.I0(start_r),
        .I1(cnt_soft_err_r),
        .I2(enable_err_detect_i),
        .I3(cnt_good_code_r),
        .O(\good_cnt_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \good_cnt_r[3]_i_2 
       (.I0(good_cnt_r_reg__0[3]),
        .I1(good_cnt_r_reg__0[0]),
        .I2(good_cnt_r_reg__0[1]),
        .I3(good_cnt_r_reg__0[2]),
        .O(p_0_in__0[3]));
  FDRE \good_cnt_r_reg[0] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(good_cnt_r_reg__0[0]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE \good_cnt_r_reg[1] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(good_cnt_r_reg__0[1]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE \good_cnt_r_reg[2] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(good_cnt_r_reg__0[2]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE \good_cnt_r_reg[3] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(good_cnt_r_reg__0[3]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE hard_err_frm_soft_err_reg
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_0_in),
        .Q(hard_err_frm_soft_err),
        .R(hard_err_frm_soft_err_reg_0));
  FDRE hard_err_gt_reg
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(hard_err_gt0),
        .Q(hard_err_gt),
        .R(hard_err_frm_soft_err_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    hard_err_r_i_1
       (.I0(hard_err_gt),
        .I1(hard_err_frm_soft_err),
        .I2(p_0_in),
        .O(hard_err_i));
  FDRE \soft_err_r_reg[0] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\soft_err_r_reg[0]_0 [3]),
        .Q(\soft_err_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \soft_err_r_reg[1] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\soft_err_r_reg[0]_0 [2]),
        .Q(\soft_err_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \soft_err_r_reg[2] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\soft_err_r_reg[0]_0 [1]),
        .Q(\soft_err_r_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \soft_err_r_reg[3] 
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\soft_err_r_reg[0]_0 [0]),
        .Q(\soft_err_r_reg_n_0_[3] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hA8888888)) 
    start_r_i_1
       (.I0(cnt_good_code_r_i_3_n_0),
        .I1(start_r),
        .I2(cnt_good_code_r_i_4_n_0),
        .I3(good_cnt_r_reg__0[3]),
        .I4(cnt_good_code_r),
        .O(next_start_c));
  FDSE start_r_reg
       (.C(\good_cnt_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_start_c),
        .Q(start_r),
        .S(hard_err_frm_soft_err_reg_0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_GLOBAL_LOGIC" *) 
module top_aurora_0_0_aurora_8b10b_0_GLOBAL_LOGIC
   (SR,
    gen_v_flop_1_i,
    gen_a_i,
    gen_k_flop_0_i,
    gen_r_flop_0_i,
    channel_up,
    start_rx_i,
    gtrxreset_i,
    soft_err,
    hard_err,
    START_RX_reg,
    p_0_in,
    \down_count_r_reg[0] ,
    got_v_i,
    \downcounter_r_reg[0] ,
    hard_err_i,
    lane_up,
    power_down,
    D);
  output [0:0]SR;
  output [2:0]gen_v_flop_1_i;
  output gen_a_i;
  output [3:0]gen_k_flop_0_i;
  output [3:0]gen_r_flop_0_i;
  output channel_up;
  output start_rx_i;
  output gtrxreset_i;
  output soft_err;
  output hard_err;
  output [0:0]START_RX_reg;
  output p_0_in;
  input \down_count_r_reg[0] ;
  input got_v_i;
  input [0:0]\downcounter_r_reg[0] ;
  input hard_err_i;
  input lane_up;
  input power_down;
  input [1:0]D;

  wire [1:0]D;
  wire [0:0]SR;
  wire [0:0]START_RX_reg;
  wire channel_up;
  wire \down_count_r_reg[0] ;
  wire [0:0]\downcounter_r_reg[0] ;
  wire gen_a_i;
  wire [3:0]gen_k_flop_0_i;
  wire [3:0]gen_r_flop_0_i;
  wire [2:0]gen_v_flop_1_i;
  wire gen_ver_i;
  wire got_v_i;
  wire gtrxreset_i;
  wire hard_err;
  wire hard_err_i;
  wire lane_up;
  wire p_0_in;
  wire power_down;
  wire reset_channel_i;
  wire soft_err;
  wire start_rx_i;
  wire txver_count_r0;
  wire wait_for_lane_up_r0;

  top_aurora_0_0_aurora_8b10b_0_CHANNEL_ERR_DETECT channel_err_detect_i
       (.D(D),
        .RESET_CHANNEL_reg_0(\down_count_r_reg[0] ),
        .hard_err(hard_err),
        .hard_err_i(hard_err_i),
        .lane_up(lane_up),
        .power_down(power_down),
        .reset_channel_i(reset_channel_i),
        .soft_err(soft_err),
        .verify_r_reg(\downcounter_r_reg[0] ),
        .wait_for_lane_up_r0(wait_for_lane_up_r0));
  top_aurora_0_0_aurora_8b10b_0_CHANNEL_INIT_SM channel_init_sm_i
       (.SR(SR),
        .START_RX_reg_0(START_RX_reg),
        .channel_up(channel_up),
        .\free_count_r_reg[13]_0 (\down_count_r_reg[0] ),
        .gen_ver_i(gen_ver_i),
        .got_v_i(got_v_i),
        .\gtrxreset_extend_r_reg[0]_0 (\downcounter_r_reg[0] ),
        .gtrxreset_i(gtrxreset_i),
        .p_0_in(p_0_in),
        .reset_channel_i(reset_channel_i),
        .start_rx_i(start_rx_i),
        .txver_count_r0(txver_count_r0),
        .wait_for_lane_up_r0(wait_for_lane_up_r0));
  top_aurora_0_0_aurora_8b10b_0_IDLE_AND_VER_GEN idle_and_ver_gen_i
       (.\down_count_r_reg[0]_0 (\down_count_r_reg[0] ),
        .\downcounter_r_reg[0]_0 (\downcounter_r_reg[0] ),
        .gen_a_i(gen_a_i),
        .gen_k_flop_0_i_0(gen_k_flop_0_i),
        .gen_r_flop_0_i_0(gen_r_flop_0_i),
        .gen_v_flop_1_i_0(gen_v_flop_1_i),
        .gen_ver_i(gen_ver_i),
        .txver_count_r0(txver_count_r0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_GT_WRAPPER" *) 
module top_aurora_0_0_aurora_8b10b_0_GT_WRAPPER
   (out,
    init_clk_in_0,
    drprdy_out,
    txn,
    txp,
    rx_realign_i,
    tx_out_clk,
    drpdo_out,
    RXDATA,
    D,
    RXCHARISK,
    rx_resetdone_out,
    link_reset_r,
    pll_not_locked_out,
    ENABLE_ERR_DETECT_reg,
    consecutive_commas_r_reg,
    init_clk_in_1,
    \previous_cycle_data_r_reg[7] ,
    \left_align_select_r_reg[0] ,
    \previous_cycle_control_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    hard_err_gt0,
    s_level_out_d3_reg,
    rxfsm_rxresetdone_r3_reg_0,
    \left_align_select_r_reg[0]_0 ,
    \left_align_select_r_reg[1]_0 ,
    p_level_in_d1_cdc_from_reg,
    gt_refclk1,
    init_clk_in,
    drpclk_in,
    drpen_in,
    drpwe_in,
    rxn,
    rxp,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    ena_comma_align_i,
    rx_polarity_i,
    power_down,
    drpdi_in,
    loopback,
    TXDATA,
    TXCHARISK,
    drpaddr_in,
    gtrxreset_i,
    link_reset_out,
    \init_wait_count_reg[7] ,
    enable_err_detect_i,
    consecutive_commas_r,
    begin_r,
    \word_aligned_data_r_reg[16] ,
    \left_align_select_r_reg[0]_1 ,
    \left_align_select_r_reg[1]_1 ,
    \word_aligned_control_bits_r_reg[2] ,
    \left_align_select_r_reg[0]_2 );
  output out;
  output init_clk_in_0;
  output drprdy_out;
  output txn;
  output txp;
  output rx_realign_i;
  output tx_out_clk;
  output [15:0]drpdo_out;
  output [31:0]RXDATA;
  output [3:0]D;
  output [3:0]RXCHARISK;
  output rx_resetdone_out;
  output link_reset_r;
  output pll_not_locked_out;
  output [3:0]ENABLE_ERR_DETECT_reg;
  output consecutive_commas_r_reg;
  output init_clk_in_1;
  output [5:0]\previous_cycle_data_r_reg[7] ;
  output [7:0]\left_align_select_r_reg[0] ;
  output \previous_cycle_control_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  output hard_err_gt0;
  output s_level_out_d3_reg;
  output rxfsm_rxresetdone_r3_reg_0;
  output \left_align_select_r_reg[0]_0 ;
  output \left_align_select_r_reg[1]_0 ;
  input p_level_in_d1_cdc_from_reg;
  input gt_refclk1;
  input init_clk_in;
  input drpclk_in;
  input drpen_in;
  input drpwe_in;
  input rxn;
  input rxp;
  input gt_qpllclk_quad1_out;
  input gt_qpllrefclk_quad1_out;
  input ena_comma_align_i;
  input rx_polarity_i;
  input power_down;
  input [15:0]drpdi_in;
  input [2:0]loopback;
  input [31:0]TXDATA;
  input [3:0]TXCHARISK;
  input [8:0]drpaddr_in;
  input gtrxreset_i;
  input link_reset_out;
  input \init_wait_count_reg[7] ;
  input enable_err_detect_i;
  input consecutive_commas_r;
  input begin_r;
  input [5:0]\word_aligned_data_r_reg[16] ;
  input \left_align_select_r_reg[0]_1 ;
  input \left_align_select_r_reg[1]_1 ;
  input [0:0]\word_aligned_control_bits_r_reg[2] ;
  input \left_align_select_r_reg[0]_2 ;

  wire [3:0]D;
  wire [3:0]ENABLE_ERR_DETECT_reg;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA;
  wire [3:0]TXCHARISK;
  wire [31:0]TXDATA;
  wire aurora_8b10b_0_multi_gt_i_n_5;
  wire aurora_8b10b_0_multi_gt_i_n_7;
  wire begin_r;
  wire consecutive_commas_r;
  wire consecutive_commas_r_reg;
  wire cpll_reset_i;
  wire [31:1]data0;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire ena_comma_align_i;
  wire enable_err_detect_i;
  wire \gt0_aurora_8b10b_0_i/ack_flag ;
  wire gt0_rxresetdone_r3_reg_srl3_n_0;
  wire gt0_txresetdone_r3_reg_srl3_n_0;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire gt_rx_reset_i;
  wire gt_rxdfelfhold_i;
  wire gt_rxuserrdy_i;
  wire gt_tx_reset_i;
  wire gt_txresetfsm_i_n_4;
  wire gt_txuserrdy_i;
  wire gtrxreset_i;
  wire gtrxreset_i_0;
  wire gtrxreset_pulse;
  wire gtrxreset_pulse_i_1_n_0;
  wire gtrxreset_r1;
  wire gtrxreset_r2;
  wire gtrxreset_r3;
  wire gtrxreset_sync;
  wire hard_err_gt0;
  wire init_clk_in;
  wire init_clk_in_0;
  wire init_clk_in_1;
  wire \init_wait_count_reg[7] ;
  wire [7:0]\left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[0]_1 ;
  wire \left_align_select_r_reg[0]_2 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire \left_align_select_r_reg[1]_1 ;
  wire link_reset_out;
  wire link_reset_r;
  wire link_reset_r2;
  wire [2:0]loopback;
  wire out;
  wire p_level_in_d1_cdc_from_reg;
  wire pll_not_locked_out;
  wire power_down;
  wire \previous_cycle_control_r_reg[0] ;
  wire [5:0]\previous_cycle_data_r_reg[7] ;
  wire [31:1]rx_cdrlock_counter;
  wire rx_cdrlock_counter0_carry__0_n_0;
  wire rx_cdrlock_counter0_carry__0_n_1;
  wire rx_cdrlock_counter0_carry__0_n_2;
  wire rx_cdrlock_counter0_carry__0_n_3;
  wire rx_cdrlock_counter0_carry__1_n_0;
  wire rx_cdrlock_counter0_carry__1_n_1;
  wire rx_cdrlock_counter0_carry__1_n_2;
  wire rx_cdrlock_counter0_carry__1_n_3;
  wire rx_cdrlock_counter0_carry__2_n_0;
  wire rx_cdrlock_counter0_carry__2_n_1;
  wire rx_cdrlock_counter0_carry__2_n_2;
  wire rx_cdrlock_counter0_carry__2_n_3;
  wire rx_cdrlock_counter0_carry__3_n_0;
  wire rx_cdrlock_counter0_carry__3_n_1;
  wire rx_cdrlock_counter0_carry__3_n_2;
  wire rx_cdrlock_counter0_carry__3_n_3;
  wire rx_cdrlock_counter0_carry__4_n_0;
  wire rx_cdrlock_counter0_carry__4_n_1;
  wire rx_cdrlock_counter0_carry__4_n_2;
  wire rx_cdrlock_counter0_carry__4_n_3;
  wire rx_cdrlock_counter0_carry__5_n_0;
  wire rx_cdrlock_counter0_carry__5_n_1;
  wire rx_cdrlock_counter0_carry__5_n_2;
  wire rx_cdrlock_counter0_carry__5_n_3;
  wire rx_cdrlock_counter0_carry__6_n_2;
  wire rx_cdrlock_counter0_carry__6_n_3;
  wire rx_cdrlock_counter0_carry_n_0;
  wire rx_cdrlock_counter0_carry_n_1;
  wire rx_cdrlock_counter0_carry_n_2;
  wire rx_cdrlock_counter0_carry_n_3;
  wire \rx_cdrlock_counter[0]_i_1_n_0 ;
  wire \rx_cdrlock_counter[31]_i_2_n_0 ;
  wire \rx_cdrlock_counter[31]_i_3_n_0 ;
  wire \rx_cdrlock_counter[31]_i_4_n_0 ;
  wire \rx_cdrlock_counter[31]_i_5_n_0 ;
  wire \rx_cdrlock_counter[31]_i_6_n_0 ;
  wire \rx_cdrlock_counter[31]_i_7_n_0 ;
  wire \rx_cdrlock_counter[31]_i_8_n_0 ;
  wire \rx_cdrlock_counter[31]_i_9_n_0 ;
  wire \rx_cdrlock_counter_reg_n_0_[0] ;
  wire \rx_cdrlock_counter_reg_n_0_[10] ;
  wire \rx_cdrlock_counter_reg_n_0_[11] ;
  wire \rx_cdrlock_counter_reg_n_0_[12] ;
  wire \rx_cdrlock_counter_reg_n_0_[13] ;
  wire \rx_cdrlock_counter_reg_n_0_[14] ;
  wire \rx_cdrlock_counter_reg_n_0_[15] ;
  wire \rx_cdrlock_counter_reg_n_0_[16] ;
  wire \rx_cdrlock_counter_reg_n_0_[17] ;
  wire \rx_cdrlock_counter_reg_n_0_[18] ;
  wire \rx_cdrlock_counter_reg_n_0_[19] ;
  wire \rx_cdrlock_counter_reg_n_0_[1] ;
  wire \rx_cdrlock_counter_reg_n_0_[20] ;
  wire \rx_cdrlock_counter_reg_n_0_[21] ;
  wire \rx_cdrlock_counter_reg_n_0_[22] ;
  wire \rx_cdrlock_counter_reg_n_0_[23] ;
  wire \rx_cdrlock_counter_reg_n_0_[24] ;
  wire \rx_cdrlock_counter_reg_n_0_[25] ;
  wire \rx_cdrlock_counter_reg_n_0_[26] ;
  wire \rx_cdrlock_counter_reg_n_0_[27] ;
  wire \rx_cdrlock_counter_reg_n_0_[28] ;
  wire \rx_cdrlock_counter_reg_n_0_[29] ;
  wire \rx_cdrlock_counter_reg_n_0_[2] ;
  wire \rx_cdrlock_counter_reg_n_0_[30] ;
  wire \rx_cdrlock_counter_reg_n_0_[31] ;
  wire \rx_cdrlock_counter_reg_n_0_[3] ;
  wire \rx_cdrlock_counter_reg_n_0_[4] ;
  wire \rx_cdrlock_counter_reg_n_0_[5] ;
  wire \rx_cdrlock_counter_reg_n_0_[6] ;
  wire \rx_cdrlock_counter_reg_n_0_[7] ;
  wire \rx_cdrlock_counter_reg_n_0_[8] ;
  wire \rx_cdrlock_counter_reg_n_0_[9] ;
  wire rx_cdrlocked_i_1_n_0;
  wire rx_cdrlocked_reg_n_0;
  wire rx_polarity_i;
  wire rx_realign_i;
  wire rx_resetdone_out;
  wire rxfsm_rxresetdone_r;
  wire rxfsm_rxresetdone_r2;
  wire rxfsm_rxresetdone_r3_reg_0;
  wire rxfsm_soft_reset_r;
  wire rxfsm_soft_reset_r_i_1_n_0;
  wire rxn;
  wire rxp;
  wire s_level_out_d3_reg;
  wire tx_out_clk;
  wire txfsm_txresetdone_r;
  wire txn;
  wire txp;
  wire [0:0]\word_aligned_control_bits_r_reg[2] ;
  wire [5:0]\word_aligned_data_r_reg[16] ;
  wire [3:2]NLW_rx_cdrlock_counter0_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_rx_cdrlock_counter0_carry__6_O_UNCONNECTED;

  top_aurora_0_0_aurora_8b10b_0_multi_gt aurora_8b10b_0_multi_gt_i
       (.D(D),
        .ENABLE_ERR_DETECT_reg(ENABLE_ERR_DETECT_reg),
        .RXCHARISK(RXCHARISK),
        .RXDATA(RXDATA),
        .SR(gt_rx_reset_i),
        .TXCHARISK(TXCHARISK),
        .TXDATA(TXDATA),
        .ack_flag(\gt0_aurora_8b10b_0_i/ack_flag ),
        .begin_r(begin_r),
        .consecutive_commas_r(consecutive_commas_r),
        .consecutive_commas_r_reg(consecutive_commas_r_reg),
        .cpll_reset_i(cpll_reset_i),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drpwe_in(drpwe_in),
        .ena_comma_align_i(ena_comma_align_i),
        .enable_err_detect_i(enable_err_detect_i),
        .flag2_reg(gt_txresetfsm_i_n_4),
        .gt_qpllclk_quad1_out(gt_qpllclk_quad1_out),
        .gt_qpllrefclk_quad1_out(gt_qpllrefclk_quad1_out),
        .gt_refclk1(gt_refclk1),
        .gt_rxdfelfhold_i(gt_rxdfelfhold_i),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .gt_tx_reset_i(gt_tx_reset_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .hard_err_gt0(hard_err_gt0),
        .in0(init_clk_in_0),
        .init_clk_in(init_clk_in),
        .init_clk_in_0(aurora_8b10b_0_multi_gt_i_n_5),
        .init_clk_in_1(aurora_8b10b_0_multi_gt_i_n_7),
        .init_clk_in_2(init_clk_in_1),
        .\left_align_select_r_reg[0] (\left_align_select_r_reg[0] ),
        .\left_align_select_r_reg[0]_0 (\left_align_select_r_reg[0]_0 ),
        .\left_align_select_r_reg[0]_1 (\left_align_select_r_reg[0]_1 ),
        .\left_align_select_r_reg[0]_2 (\left_align_select_r_reg[0]_2 ),
        .\left_align_select_r_reg[1] (\left_align_select_r_reg[1] ),
        .\left_align_select_r_reg[1]_0 (\left_align_select_r_reg[1]_0 ),
        .\left_align_select_r_reg[1]_1 (\left_align_select_r_reg[1]_1 ),
        .loopback(loopback),
        .pll_not_locked_out(pll_not_locked_out),
        .power_down(power_down),
        .\previous_cycle_control_r_reg[0] (\previous_cycle_control_r_reg[0] ),
        .\previous_cycle_data_r_reg[7] (\previous_cycle_data_r_reg[7] ),
        .rx_polarity_i(rx_polarity_i),
        .rx_realign_i(rx_realign_i),
        .rxn(rxn),
        .rxp(rxp),
        .s_level_out_d1_aurora_8b10b_0_cdc_to_reg(p_level_in_d1_cdc_from_reg),
        .tx_out_clk(tx_out_clk),
        .txn(txn),
        .txp(txp),
        .\word_aligned_control_bits_r_reg[2] (\word_aligned_control_bits_r_reg[2] ),
        .\word_aligned_data_r_reg[16] (\word_aligned_data_r_reg[16] ));
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/gt0_rxresetdone_r3_reg_srl3 " *) 
  SRL16E gt0_rxresetdone_r3_reg_srl3
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(p_level_in_d1_cdc_from_reg),
        .D(aurora_8b10b_0_multi_gt_i_n_5),
        .Q(gt0_rxresetdone_r3_reg_srl3_n_0));
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/gt0_txresetdone_r3_reg_srl3 " *) 
  SRL16E gt0_txresetdone_r3_reg_srl3
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(p_level_in_d1_cdc_from_reg),
        .D(aurora_8b10b_0_multi_gt_i_n_7),
        .Q(gt0_txresetdone_r3_reg_srl3_n_0));
  FDRE gt_rx_reset_i_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_i_0),
        .Q(gt_rx_reset_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    gt_rxresetdone_r_i_1
       (.I0(rx_resetdone_out),
        .O(rxfsm_rxresetdone_r3_reg_0));
  top_aurora_0_0_aurora_8b10b_0_rx_startup_fsm gt_rxresetfsm_i
       (.AR(rxfsm_soft_reset_r),
        .gt_rxdfelfhold_i(gt_rxdfelfhold_i),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .gtrxreset_i_0(gtrxreset_i_0),
        .init_clk_in(init_clk_in),
        .p_level_in_d1_cdc_from_reg(p_level_in_d1_cdc_from_reg),
        .reset_time_out_reg_0(rx_cdrlocked_reg_n_0),
        .rxfsm_rxresetdone_r(rxfsm_rxresetdone_r),
        .s_level_out_d1_aurora_8b10b_0_cdc_to_reg(init_clk_in_0));
  top_aurora_0_0_aurora_8b10b_0_tx_startup_fsm gt_txresetfsm_i
       (.CPLL_RESET_reg_0(gt_txresetfsm_i_n_4),
        .ack_flag(\gt0_aurora_8b10b_0_i/ack_flag ),
        .cpll_reset_i(cpll_reset_i),
        .gt_tx_reset_i(gt_tx_reset_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .init_clk_in(init_clk_in),
        .\init_wait_count_reg[7]_0 (\init_wait_count_reg[7] ),
        .out(out),
        .s_level_out_d1_aurora_8b10b_0_cdc_to_reg(init_clk_in_0),
        .s_level_out_d3_reg(s_level_out_d3_reg),
        .s_level_out_d5_reg(p_level_in_d1_cdc_from_reg),
        .txfsm_txresetdone_r(txfsm_txresetdone_r));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_6 gtrxreset_cdc_sync
       (.gtrxreset_i(gtrxreset_i),
        .init_clk_in(init_clk_in),
        .out(gtrxreset_sync),
        .p_level_in_d1_cdc_from_reg_0(p_level_in_d1_cdc_from_reg));
  LUT2 #(
    .INIT(4'h2)) 
    gtrxreset_pulse_i_1
       (.I0(gtrxreset_r2),
        .I1(gtrxreset_r3),
        .O(gtrxreset_pulse_i_1_n_0));
  FDRE gtrxreset_pulse_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_pulse_i_1_n_0),
        .Q(gtrxreset_pulse),
        .R(1'b0));
  (* equivalent_register_removal = "no" *) 
  FDRE gtrxreset_r1_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_sync),
        .Q(gtrxreset_r1),
        .R(1'b0));
  FDRE gtrxreset_r2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_r1),
        .Q(gtrxreset_r2),
        .R(1'b0));
  FDRE gtrxreset_r3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_r2),
        .Q(gtrxreset_r3),
        .R(1'b0));
  FDRE link_reset_r2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_r),
        .Q(link_reset_r2),
        .R(1'b0));
  FDRE link_reset_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_out),
        .Q(link_reset_r),
        .R(1'b0));
  CARRY4 rx_cdrlock_counter0_carry
       (.CI(1'b0),
        .CO({rx_cdrlock_counter0_carry_n_0,rx_cdrlock_counter0_carry_n_1,rx_cdrlock_counter0_carry_n_2,rx_cdrlock_counter0_carry_n_3}),
        .CYINIT(\rx_cdrlock_counter_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[4:1]),
        .S({\rx_cdrlock_counter_reg_n_0_[4] ,\rx_cdrlock_counter_reg_n_0_[3] ,\rx_cdrlock_counter_reg_n_0_[2] ,\rx_cdrlock_counter_reg_n_0_[1] }));
  CARRY4 rx_cdrlock_counter0_carry__0
       (.CI(rx_cdrlock_counter0_carry_n_0),
        .CO({rx_cdrlock_counter0_carry__0_n_0,rx_cdrlock_counter0_carry__0_n_1,rx_cdrlock_counter0_carry__0_n_2,rx_cdrlock_counter0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[8:5]),
        .S({\rx_cdrlock_counter_reg_n_0_[8] ,\rx_cdrlock_counter_reg_n_0_[7] ,\rx_cdrlock_counter_reg_n_0_[6] ,\rx_cdrlock_counter_reg_n_0_[5] }));
  CARRY4 rx_cdrlock_counter0_carry__1
       (.CI(rx_cdrlock_counter0_carry__0_n_0),
        .CO({rx_cdrlock_counter0_carry__1_n_0,rx_cdrlock_counter0_carry__1_n_1,rx_cdrlock_counter0_carry__1_n_2,rx_cdrlock_counter0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[12:9]),
        .S({\rx_cdrlock_counter_reg_n_0_[12] ,\rx_cdrlock_counter_reg_n_0_[11] ,\rx_cdrlock_counter_reg_n_0_[10] ,\rx_cdrlock_counter_reg_n_0_[9] }));
  CARRY4 rx_cdrlock_counter0_carry__2
       (.CI(rx_cdrlock_counter0_carry__1_n_0),
        .CO({rx_cdrlock_counter0_carry__2_n_0,rx_cdrlock_counter0_carry__2_n_1,rx_cdrlock_counter0_carry__2_n_2,rx_cdrlock_counter0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[16:13]),
        .S({\rx_cdrlock_counter_reg_n_0_[16] ,\rx_cdrlock_counter_reg_n_0_[15] ,\rx_cdrlock_counter_reg_n_0_[14] ,\rx_cdrlock_counter_reg_n_0_[13] }));
  CARRY4 rx_cdrlock_counter0_carry__3
       (.CI(rx_cdrlock_counter0_carry__2_n_0),
        .CO({rx_cdrlock_counter0_carry__3_n_0,rx_cdrlock_counter0_carry__3_n_1,rx_cdrlock_counter0_carry__3_n_2,rx_cdrlock_counter0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[20:17]),
        .S({\rx_cdrlock_counter_reg_n_0_[20] ,\rx_cdrlock_counter_reg_n_0_[19] ,\rx_cdrlock_counter_reg_n_0_[18] ,\rx_cdrlock_counter_reg_n_0_[17] }));
  CARRY4 rx_cdrlock_counter0_carry__4
       (.CI(rx_cdrlock_counter0_carry__3_n_0),
        .CO({rx_cdrlock_counter0_carry__4_n_0,rx_cdrlock_counter0_carry__4_n_1,rx_cdrlock_counter0_carry__4_n_2,rx_cdrlock_counter0_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[24:21]),
        .S({\rx_cdrlock_counter_reg_n_0_[24] ,\rx_cdrlock_counter_reg_n_0_[23] ,\rx_cdrlock_counter_reg_n_0_[22] ,\rx_cdrlock_counter_reg_n_0_[21] }));
  CARRY4 rx_cdrlock_counter0_carry__5
       (.CI(rx_cdrlock_counter0_carry__4_n_0),
        .CO({rx_cdrlock_counter0_carry__5_n_0,rx_cdrlock_counter0_carry__5_n_1,rx_cdrlock_counter0_carry__5_n_2,rx_cdrlock_counter0_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[28:25]),
        .S({\rx_cdrlock_counter_reg_n_0_[28] ,\rx_cdrlock_counter_reg_n_0_[27] ,\rx_cdrlock_counter_reg_n_0_[26] ,\rx_cdrlock_counter_reg_n_0_[25] }));
  CARRY4 rx_cdrlock_counter0_carry__6
       (.CI(rx_cdrlock_counter0_carry__5_n_0),
        .CO({NLW_rx_cdrlock_counter0_carry__6_CO_UNCONNECTED[3:2],rx_cdrlock_counter0_carry__6_n_2,rx_cdrlock_counter0_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_rx_cdrlock_counter0_carry__6_O_UNCONNECTED[3],data0[31:29]}),
        .S({1'b0,\rx_cdrlock_counter_reg_n_0_[31] ,\rx_cdrlock_counter_reg_n_0_[30] ,\rx_cdrlock_counter_reg_n_0_[29] }));
  LUT5 #(
    .INIT(32'h0000FFFE)) 
    \rx_cdrlock_counter[0]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(\rx_cdrlock_counter_reg_n_0_[0] ),
        .O(\rx_cdrlock_counter[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[10]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[10]),
        .O(rx_cdrlock_counter[10]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \rx_cdrlock_counter[11]_i_1 
       (.I0(data0[11]),
        .I1(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(rx_cdrlock_counter[11]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[12]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[12]),
        .O(rx_cdrlock_counter[12]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[13]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[13]),
        .O(rx_cdrlock_counter[13]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[14]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[14]),
        .O(rx_cdrlock_counter[14]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[15]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[15]),
        .O(rx_cdrlock_counter[15]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[16]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[16]),
        .O(rx_cdrlock_counter[16]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[17]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[17]),
        .O(rx_cdrlock_counter[17]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[18]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[18]),
        .O(rx_cdrlock_counter[18]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[19]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[19]),
        .O(rx_cdrlock_counter[19]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[1]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[1]),
        .O(rx_cdrlock_counter[1]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[20]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[20]),
        .O(rx_cdrlock_counter[20]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[21]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[21]),
        .O(rx_cdrlock_counter[21]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[22]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[22]),
        .O(rx_cdrlock_counter[22]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[23]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[23]),
        .O(rx_cdrlock_counter[23]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[24]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[24]),
        .O(rx_cdrlock_counter[24]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[25]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[25]),
        .O(rx_cdrlock_counter[25]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[26]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[26]),
        .O(rx_cdrlock_counter[26]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[27]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[27]),
        .O(rx_cdrlock_counter[27]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[28]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[28]),
        .O(rx_cdrlock_counter[28]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[29]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[29]),
        .O(rx_cdrlock_counter[29]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \rx_cdrlock_counter[2]_i_1 
       (.I0(data0[2]),
        .I1(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(rx_cdrlock_counter[2]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[30]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[30]),
        .O(rx_cdrlock_counter[30]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[31]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[31]),
        .O(rx_cdrlock_counter[31]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rx_cdrlock_counter[31]_i_2 
       (.I0(\rx_cdrlock_counter_reg_n_0_[18] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[19] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[16] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[17] ),
        .I4(\rx_cdrlock_counter[31]_i_6_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rx_cdrlock_counter[31]_i_3 
       (.I0(\rx_cdrlock_counter_reg_n_0_[26] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[27] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[24] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[25] ),
        .I4(\rx_cdrlock_counter[31]_i_7_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFB)) 
    \rx_cdrlock_counter[31]_i_4 
       (.I0(\rx_cdrlock_counter_reg_n_0_[3] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[2] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[0] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[1] ),
        .I4(\rx_cdrlock_counter[31]_i_8_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \rx_cdrlock_counter[31]_i_5 
       (.I0(\rx_cdrlock_counter_reg_n_0_[10] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[11] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[9] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[8] ),
        .I4(\rx_cdrlock_counter[31]_i_9_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_cdrlock_counter[31]_i_6 
       (.I0(\rx_cdrlock_counter_reg_n_0_[21] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[20] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[23] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[22] ),
        .O(\rx_cdrlock_counter[31]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_cdrlock_counter[31]_i_7 
       (.I0(\rx_cdrlock_counter_reg_n_0_[29] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[28] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[31] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[30] ),
        .O(\rx_cdrlock_counter[31]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \rx_cdrlock_counter[31]_i_8 
       (.I0(\rx_cdrlock_counter_reg_n_0_[5] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[4] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[7] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[6] ),
        .O(\rx_cdrlock_counter[31]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_cdrlock_counter[31]_i_9 
       (.I0(\rx_cdrlock_counter_reg_n_0_[13] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[12] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[15] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[14] ),
        .O(\rx_cdrlock_counter[31]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[3]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[3]),
        .O(rx_cdrlock_counter[3]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[4]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[4]),
        .O(rx_cdrlock_counter[4]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[5]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[5]),
        .O(rx_cdrlock_counter[5]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \rx_cdrlock_counter[6]_i_1 
       (.I0(data0[6]),
        .I1(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(rx_cdrlock_counter[6]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \rx_cdrlock_counter[7]_i_1 
       (.I0(data0[7]),
        .I1(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(rx_cdrlock_counter[7]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \rx_cdrlock_counter[8]_i_1 
       (.I0(data0[8]),
        .I1(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(rx_cdrlock_counter[8]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[9]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[9]),
        .O(rx_cdrlock_counter[9]));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\rx_cdrlock_counter[0]_i_1_n_0 ),
        .Q(\rx_cdrlock_counter_reg_n_0_[0] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[10] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[10]),
        .Q(\rx_cdrlock_counter_reg_n_0_[10] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[11] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[11]),
        .Q(\rx_cdrlock_counter_reg_n_0_[11] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[12] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[12]),
        .Q(\rx_cdrlock_counter_reg_n_0_[12] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[13] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[13]),
        .Q(\rx_cdrlock_counter_reg_n_0_[13] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[14] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[14]),
        .Q(\rx_cdrlock_counter_reg_n_0_[14] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[15] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[15]),
        .Q(\rx_cdrlock_counter_reg_n_0_[15] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[16] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[16]),
        .Q(\rx_cdrlock_counter_reg_n_0_[16] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[17] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[17]),
        .Q(\rx_cdrlock_counter_reg_n_0_[17] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[18] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[18]),
        .Q(\rx_cdrlock_counter_reg_n_0_[18] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[19] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[19]),
        .Q(\rx_cdrlock_counter_reg_n_0_[19] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[1] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[1]),
        .Q(\rx_cdrlock_counter_reg_n_0_[1] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[20] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[20]),
        .Q(\rx_cdrlock_counter_reg_n_0_[20] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[21] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[21]),
        .Q(\rx_cdrlock_counter_reg_n_0_[21] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[22] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[22]),
        .Q(\rx_cdrlock_counter_reg_n_0_[22] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[23] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[23]),
        .Q(\rx_cdrlock_counter_reg_n_0_[23] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[24] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[24]),
        .Q(\rx_cdrlock_counter_reg_n_0_[24] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[25] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[25]),
        .Q(\rx_cdrlock_counter_reg_n_0_[25] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[26] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[26]),
        .Q(\rx_cdrlock_counter_reg_n_0_[26] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[27] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[27]),
        .Q(\rx_cdrlock_counter_reg_n_0_[27] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[28] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[28]),
        .Q(\rx_cdrlock_counter_reg_n_0_[28] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[29] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[29]),
        .Q(\rx_cdrlock_counter_reg_n_0_[29] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[2] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[2]),
        .Q(\rx_cdrlock_counter_reg_n_0_[2] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[30] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[30]),
        .Q(\rx_cdrlock_counter_reg_n_0_[30] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[31] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[31]),
        .Q(\rx_cdrlock_counter_reg_n_0_[31] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[3] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[3]),
        .Q(\rx_cdrlock_counter_reg_n_0_[3] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[4] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[4]),
        .Q(\rx_cdrlock_counter_reg_n_0_[4] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[5] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[5]),
        .Q(\rx_cdrlock_counter_reg_n_0_[5] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[6] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[6]),
        .Q(\rx_cdrlock_counter_reg_n_0_[6] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[7] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[7]),
        .Q(\rx_cdrlock_counter_reg_n_0_[7] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[8] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[8]),
        .Q(\rx_cdrlock_counter_reg_n_0_[8] ),
        .R(gt_rx_reset_i));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[9] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[9]),
        .Q(\rx_cdrlock_counter_reg_n_0_[9] ),
        .R(gt_rx_reset_i));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    rx_cdrlocked_i_1
       (.I0(rx_cdrlocked_reg_n_0),
        .I1(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(rx_cdrlocked_i_1_n_0));
  FDRE rx_cdrlocked_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlocked_i_1_n_0),
        .Q(rx_cdrlocked_reg_n_0),
        .R(gt_rx_reset_i));
  (* equivalent_register_removal = "no" *) 
  FDRE rxfsm_rxresetdone_r2_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rxfsm_rxresetdone_r),
        .Q(rxfsm_rxresetdone_r2),
        .R(1'b0));
  FDRE rxfsm_rxresetdone_r3_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rxfsm_rxresetdone_r2),
        .Q(rx_resetdone_out),
        .R(1'b0));
  FDRE rxfsm_rxresetdone_r_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(gt0_rxresetdone_r3_reg_srl3_n_0),
        .Q(rxfsm_rxresetdone_r),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hFE)) 
    rxfsm_soft_reset_r_i_1
       (.I0(link_reset_r2),
        .I1(gtrxreset_pulse),
        .I2(\init_wait_count_reg[7] ),
        .O(rxfsm_soft_reset_r_i_1_n_0));
  FDRE rxfsm_soft_reset_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rxfsm_soft_reset_r_i_1_n_0),
        .Q(rxfsm_soft_reset_r),
        .R(1'b0));
  FDRE txfsm_txresetdone_r_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(gt0_txresetdone_r3_reg_srl3_n_0),
        .Q(txfsm_txresetdone_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_IDLE_AND_VER_GEN" *) 
module top_aurora_0_0_aurora_8b10b_0_IDLE_AND_VER_GEN
   (gen_v_flop_1_i_0,
    gen_a_i,
    gen_k_flop_0_i_0,
    gen_r_flop_0_i_0,
    txver_count_r0,
    \down_count_r_reg[0]_0 ,
    gen_ver_i,
    \downcounter_r_reg[0]_0 );
  output [2:0]gen_v_flop_1_i_0;
  output gen_a_i;
  output [3:0]gen_k_flop_0_i_0;
  output [3:0]gen_r_flop_0_i_0;
  output txver_count_r0;
  input \down_count_r_reg[0]_0 ;
  input gen_ver_i;
  input [0:0]\downcounter_r_reg[0]_0 ;

  wire did_ver_i;
  wire [0:2]down_count_r;
  wire \down_count_r[0]_i_1_n_0 ;
  wire \down_count_r[1]_i_1_n_0 ;
  wire \down_count_r_reg[0]_0 ;
  wire \downcounter_r[0]_i_1_n_0 ;
  wire \downcounter_r[1]_i_1_n_0 ;
  wire \downcounter_r[2]_i_1_n_0 ;
  wire [0:0]\downcounter_r_reg[0]_0 ;
  wire \downcounter_r_reg_n_0_[0] ;
  wire \downcounter_r_reg_n_0_[1] ;
  wire \downcounter_r_reg_n_0_[2] ;
  wire gen_a_flop_c;
  wire gen_a_i;
  wire [3:0]gen_k_flop_0_i_0;
  wire gen_k_flop_c_0;
  wire gen_k_flop_c_1;
  wire gen_k_flop_c_2;
  wire gen_k_flop_c_3;
  wire [3:0]gen_r_flop_0_i_0;
  wire gen_r_flop_c_0;
  wire gen_r_flop_c_2;
  wire gen_r_flop_c_3;
  wire [2:0]gen_v_flop_1_i_0;
  wire gen_ver_i;
  wire insert_ver_c;
  wire \lfsr_reg[3]_i_1_n_0 ;
  wire p_1_in;
  wire p_2_in;
  wire prev_cycle_gen_ver_r;
  wire recycle_gen_ver_c;
  wire txver_count_r0;
  wire ver_counter_c;

  FDRE DID_VER_reg
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(ver_counter_c),
        .Q(did_ver_i),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \down_count_r[0]_i_1 
       (.I0(gen_r_flop_c_0),
        .I1(p_2_in),
        .O(\down_count_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \down_count_r[1]_i_1 
       (.I0(gen_r_flop_c_0),
        .I1(p_2_in),
        .O(\down_count_r[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \down_count_r_reg[0] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\down_count_r[0]_i_1_n_0 ),
        .Q(down_count_r[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \down_count_r_reg[1] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\down_count_r[1]_i_1_n_0 ),
        .Q(down_count_r[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \down_count_r_reg[2] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_k_flop_c_0),
        .Q(down_count_r[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'hFC02)) 
    \downcounter_r[0]_i_1 
       (.I0(down_count_r[0]),
        .I1(\downcounter_r_reg_n_0_[1] ),
        .I2(\downcounter_r_reg_n_0_[2] ),
        .I3(\downcounter_r_reg_n_0_[0] ),
        .O(\downcounter_r[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hC3C2)) 
    \downcounter_r[1]_i_1 
       (.I0(down_count_r[1]),
        .I1(\downcounter_r_reg_n_0_[1] ),
        .I2(\downcounter_r_reg_n_0_[2] ),
        .I3(\downcounter_r_reg_n_0_[0] ),
        .O(\downcounter_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h0F0E)) 
    \downcounter_r[2]_i_1 
       (.I0(down_count_r[2]),
        .I1(\downcounter_r_reg_n_0_[1] ),
        .I2(\downcounter_r_reg_n_0_[2] ),
        .I3(\downcounter_r_reg_n_0_[0] ),
        .O(\downcounter_r[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \downcounter_r_reg[0] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\downcounter_r[0]_i_1_n_0 ),
        .Q(\downcounter_r_reg_n_0_[0] ),
        .R(\downcounter_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \downcounter_r_reg[1] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\downcounter_r[1]_i_1_n_0 ),
        .Q(\downcounter_r_reg_n_0_[1] ),
        .R(\downcounter_r_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \downcounter_r_reg[2] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\downcounter_r[2]_i_1_n_0 ),
        .Q(\downcounter_r_reg_n_0_[2] ),
        .R(\downcounter_r_reg[0]_0 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_a_flop_0_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_a_flop_c),
        .Q(gen_a_i),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT5 #(
    .INIT(32'h00010101)) 
    gen_a_flop_0_i_i_1
       (.I0(\downcounter_r_reg_n_0_[0] ),
        .I1(\downcounter_r_reg_n_0_[2] ),
        .I2(\downcounter_r_reg_n_0_[1] ),
        .I3(gen_ver_i),
        .I4(did_ver_i),
        .O(gen_a_flop_c));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_0_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_k_flop_c_3),
        .Q(gen_k_flop_0_i_0[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hD5D5D5D5D5D5D5C0)) 
    gen_k_flop_0_i_i_1
       (.I0(p_1_in),
        .I1(did_ver_i),
        .I2(gen_ver_i),
        .I3(\downcounter_r_reg_n_0_[1] ),
        .I4(\downcounter_r_reg_n_0_[2] ),
        .I5(\downcounter_r_reg_n_0_[0] ),
        .O(gen_k_flop_c_3));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_1_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_k_flop_c_2),
        .Q(gen_k_flop_0_i_0[2]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    gen_k_flop_1_i_i_1
       (.I0(gen_r_flop_c_2),
        .O(gen_k_flop_c_2));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_2_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_k_flop_c_1),
        .Q(gen_k_flop_0_i_0[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    gen_k_flop_2_i_i_1
       (.I0(p_2_in),
        .O(gen_k_flop_c_1));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_3_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_k_flop_c_0),
        .Q(gen_k_flop_0_i_0[0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT1 #(
    .INIT(2'h1)) 
    gen_k_flop_3_i_i_1
       (.I0(gen_r_flop_c_0),
        .O(gen_k_flop_c_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_0_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_r_flop_c_3),
        .Q(gen_r_flop_0_i_0[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000FE00FE00FE00)) 
    gen_r_flop_0_i_i_1
       (.I0(\downcounter_r_reg_n_0_[0] ),
        .I1(\downcounter_r_reg_n_0_[2] ),
        .I2(\downcounter_r_reg_n_0_[1] ),
        .I3(p_1_in),
        .I4(did_ver_i),
        .I5(gen_ver_i),
        .O(gen_r_flop_c_3));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_1_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_r_flop_c_2),
        .Q(gen_r_flop_0_i_0[2]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_2_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_2_in),
        .Q(gen_r_flop_0_i_0[1]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_3_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_r_flop_c_0),
        .Q(gen_r_flop_0_i_0[0]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_v_flop_1_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(recycle_gen_ver_c),
        .Q(gen_v_flop_1_i_0[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gen_v_flop_1_i_i_1
       (.I0(did_ver_i),
        .I1(gen_ver_i),
        .O(recycle_gen_ver_c));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_v_flop_2_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(recycle_gen_ver_c),
        .Q(gen_v_flop_1_i_0[1]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_v_flop_3_i
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(recycle_gen_ver_c),
        .Q(gen_v_flop_1_i_0[0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h55A9)) 
    \lfsr_reg[3]_i_1 
       (.I0(p_1_in),
        .I1(p_2_in),
        .I2(gen_r_flop_c_2),
        .I3(gen_r_flop_c_0),
        .O(\lfsr_reg[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[0] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_r_flop_c_2),
        .Q(p_1_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[1] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(p_2_in),
        .Q(gen_r_flop_c_2),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[2] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_r_flop_c_0),
        .Q(p_2_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[3] 
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\lfsr_reg[3]_i_1_n_0 ),
        .Q(gen_r_flop_c_0),
        .R(1'b0));
  FDRE prev_cycle_gen_ver_r_reg
       (.C(\down_count_r_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_ver_i),
        .Q(prev_cycle_gen_ver_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \txver_count_r_reg[6]_srl7_i_1 
       (.I0(did_ver_i),
        .I1(gen_ver_i),
        .O(txver_count_r0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_global_logic_i/idle_and_ver_gen_i/ver_counter_i " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    ver_counter_i
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(\down_count_r_reg[0]_0 ),
        .D(insert_ver_c),
        .Q(ver_counter_c));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    ver_counter_i_i_1
       (.I0(gen_ver_i),
        .I1(did_ver_i),
        .I2(prev_cycle_gen_ver_r),
        .O(insert_ver_c));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_LANE_INIT_SM_4BYTE" *) 
module top_aurora_0_0_aurora_8b10b_0_LANE_INIT_SM_4BYTE
   (ready_r,
    gen_spa_i,
    lane_up,
    align_r_reg_0,
    consecutive_commas_r,
    begin_r,
    enable_err_detect_i,
    rx_polarity_i,
    GEN_SP,
    ENABLE_ERR_DETECT_reg_0,
    ready_r_reg_0,
    counter4_r0,
    \counter1_r_reg[0]_0 ,
    counter3_r0,
    gen_spa_r,
    SR,
    ready_r_reg0,
    rx_realign_i,
    RX_NEG,
    reset_count_r_reg_0,
    reset_count_r_reg_1,
    RXCHARISK,
    first_v_received_r,
    D);
  output ready_r;
  output gen_spa_i;
  output lane_up;
  output align_r_reg_0;
  output consecutive_commas_r;
  output begin_r;
  output enable_err_detect_i;
  output rx_polarity_i;
  output GEN_SP;
  output ENABLE_ERR_DETECT_reg_0;
  output ready_r_reg_0;
  input counter4_r0;
  input \counter1_r_reg[0]_0 ;
  input counter3_r0;
  input gen_spa_r;
  input [0:0]SR;
  input ready_r_reg0;
  input rx_realign_i;
  input RX_NEG;
  input reset_count_r_reg_0;
  input reset_count_r_reg_1;
  input [1:0]RXCHARISK;
  input first_v_received_r;
  input [3:0]D;

  wire [3:0]D;
  wire ENABLE_ERR_DETECT0;
  wire ENABLE_ERR_DETECT_reg_0;
  wire GEN_SP;
  wire [1:0]RXCHARISK;
  wire \RX_CHAR_IS_COMMA_R_reg_n_0_[0] ;
  wire \RX_CHAR_IS_COMMA_R_reg_n_0_[3] ;
  wire RX_NEG;
  wire [0:0]SR;
  wire align_r_reg_0;
  wire begin_r;
  wire begin_r_i_2_n_0;
  wire consecutive_commas_r;
  wire consecutive_commas_r0;
  wire count_128d_done_r;
  wire count_32d_done_r;
  wire count_8d_done_r;
  wire counter1_r0;
  wire \counter1_r[0]_i_3_n_0 ;
  wire \counter1_r[2]_i_1_n_0 ;
  wire \counter1_r_reg[0]_0 ;
  wire \counter1_r_reg_n_0_[1] ;
  wire \counter1_r_reg_n_0_[3] ;
  wire \counter1_r_reg_n_0_[5] ;
  wire \counter1_r_reg_n_0_[6] ;
  wire \counter1_r_reg_n_0_[7] ;
  wire \counter2_r_reg[14]_srl14_n_0 ;
  wire \counter2_r_reg_n_0_[15] ;
  wire counter3_r0;
  wire \counter3_r_reg[2]_srl3_n_0 ;
  wire \counter3_r_reg_n_0_[3] ;
  wire counter4_r0;
  wire \counter4_r_reg[14]_srl15_n_0 ;
  wire \counter4_r_reg_n_0_[15] ;
  wire counter5_r0;
  wire \counter5_r_reg[14]_srl15_n_0 ;
  wire \counter5_r_reg_n_0_[15] ;
  wire do_watchdog_count_r;
  wire do_watchdog_count_r0;
  wire enable_err_detect_i;
  wire first_v_received_r;
  wire gen_spa_i;
  wire gen_spa_r;
  wire lane_up;
  wire next_ack_c;
  wire next_align_c;
  wire next_begin_c;
  wire next_polarity_c;
  wire next_ready_c;
  wire next_realign_c;
  wire next_rst_c;
  wire [7:0]p_0_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire polarity_r;
  wire prev_count_128d_done_r;
  wire ready_r;
  wire ready_r_reg0;
  wire ready_r_reg_0;
  wire realign_r;
  wire reset_count_r;
  wire reset_count_r0;
  wire reset_count_r_reg_0;
  wire reset_count_r_reg_1;
  wire rx_polarity_i;
  wire rx_polarity_r_i_1_n_0;
  wire rx_realign_i;
  wire tx_reset_i;

  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'hE)) 
    ENABLE_ERR_DETECT_i_1
       (.I0(gen_spa_i),
        .I1(ready_r),
        .O(ENABLE_ERR_DETECT0));
  FDRE ENABLE_ERR_DETECT_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(ENABLE_ERR_DETECT0),
        .Q(enable_err_detect_i),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[0] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(D[0]),
        .Q(\RX_CHAR_IS_COMMA_R_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[1] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(D[1]),
        .Q(p_1_in),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[2] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(D[2]),
        .Q(p_0_in2_in),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[3] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(D[3]),
        .Q(\RX_CHAR_IS_COMMA_R_reg_n_0_[3] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0444FFFF04440444)) 
    ack_r_i_1
       (.I0(\counter5_r_reg_n_0_[15] ),
        .I1(gen_spa_i),
        .I2(\counter2_r_reg_n_0_[15] ),
        .I3(\counter3_r_reg_n_0_[3] ),
        .I4(RX_NEG),
        .I5(polarity_r),
        .O(next_ack_c));
  FDRE ack_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_ack_c),
        .Q(gen_spa_i),
        .R(ready_r_reg0));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'hF222)) 
    align_r_i_2
       (.I0(align_r_reg_0),
        .I1(count_128d_done_r),
        .I2(tx_reset_i),
        .I3(count_8d_done_r),
        .O(next_align_c));
  FDRE align_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_align_c),
        .Q(align_r_reg_0),
        .R(ready_r_reg0));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    begin_r_i_1
       (.I0(rx_realign_i),
        .I1(realign_r),
        .I2(polarity_r),
        .I3(RX_NEG),
        .I4(begin_r_i_2_n_0),
        .O(next_begin_c));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    begin_r_i_2
       (.I0(gen_spa_i),
        .I1(\counter5_r_reg_n_0_[15] ),
        .I2(\counter4_r_reg_n_0_[15] ),
        .I3(ready_r),
        .O(begin_r_i_2_n_0));
  FDSE begin_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_begin_c),
        .Q(begin_r),
        .S(ready_r_reg0));
  LUT1 #(
    .INIT(2'h1)) 
    cnt_good_code_r_i_1
       (.I0(enable_err_detect_i),
        .O(ENABLE_ERR_DETECT_reg_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    consecutive_commas_r_i_1
       (.I0(align_r_reg_0),
        .I1(p_0_in2_in),
        .I2(\RX_CHAR_IS_COMMA_R_reg_n_0_[0] ),
        .I3(\RX_CHAR_IS_COMMA_R_reg_n_0_[3] ),
        .I4(p_1_in),
        .O(consecutive_commas_r0));
  FDRE consecutive_commas_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(consecutive_commas_r0),
        .Q(consecutive_commas_r),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \counter1_r[0]_i_1 
       (.I0(ready_r),
        .I1(reset_count_r),
        .O(counter1_r0));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \counter1_r[0]_i_2 
       (.I0(count_128d_done_r),
        .I1(count_32d_done_r),
        .I2(count_8d_done_r),
        .I3(\counter1_r[0]_i_3_n_0 ),
        .I4(\counter1_r_reg_n_0_[3] ),
        .I5(\counter1_r_reg_n_0_[1] ),
        .O(p_0_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \counter1_r[0]_i_3 
       (.I0(\counter1_r_reg_n_0_[5] ),
        .I1(\counter1_r_reg_n_0_[6] ),
        .I2(\counter1_r_reg_n_0_[7] ),
        .O(\counter1_r[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \counter1_r[1]_i_1 
       (.I0(\counter1_r_reg_n_0_[1] ),
        .I1(\counter1_r_reg_n_0_[3] ),
        .I2(\counter1_r[0]_i_3_n_0 ),
        .I3(count_8d_done_r),
        .I4(count_32d_done_r),
        .O(p_0_in[6]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \counter1_r[2]_i_1 
       (.I0(count_32d_done_r),
        .I1(count_8d_done_r),
        .I2(\counter1_r_reg_n_0_[7] ),
        .I3(\counter1_r_reg_n_0_[6] ),
        .I4(\counter1_r_reg_n_0_[5] ),
        .I5(\counter1_r_reg_n_0_[3] ),
        .O(\counter1_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \counter1_r[3]_i_1 
       (.I0(\counter1_r_reg_n_0_[3] ),
        .I1(\counter1_r_reg_n_0_[5] ),
        .I2(\counter1_r_reg_n_0_[6] ),
        .I3(\counter1_r_reg_n_0_[7] ),
        .I4(count_8d_done_r),
        .O(p_0_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \counter1_r[4]_i_1 
       (.I0(count_8d_done_r),
        .I1(\counter1_r_reg_n_0_[7] ),
        .I2(\counter1_r_reg_n_0_[6] ),
        .I3(\counter1_r_reg_n_0_[5] ),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \counter1_r[5]_i_1 
       (.I0(\counter1_r_reg_n_0_[7] ),
        .I1(\counter1_r_reg_n_0_[6] ),
        .I2(\counter1_r_reg_n_0_[5] ),
        .O(p_0_in[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \counter1_r[6]_i_1 
       (.I0(\counter1_r_reg_n_0_[7] ),
        .I1(\counter1_r_reg_n_0_[6] ),
        .O(p_0_in[1]));
  LUT1 #(
    .INIT(2'h1)) 
    \counter1_r[7]_i_1 
       (.I0(\counter1_r_reg_n_0_[7] ),
        .O(p_0_in[0]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[0] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[7]),
        .Q(count_128d_done_r),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[1] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[6]),
        .Q(\counter1_r_reg_n_0_[1] ),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[2] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(\counter1_r[2]_i_1_n_0 ),
        .Q(count_32d_done_r),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[3] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[4]),
        .Q(\counter1_r_reg_n_0_[3] ),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[4] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[3]),
        .Q(count_8d_done_r),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[5] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[2]),
        .Q(\counter1_r_reg_n_0_[5] ),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[6] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[1]),
        .Q(\counter1_r_reg_n_0_[6] ),
        .R(counter1_r0));
  FDSE #(
    .INIT(1'b1)) 
    \counter1_r_reg[7] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(consecutive_commas_r0),
        .D(p_0_in[0]),
        .Q(\counter1_r_reg_n_0_[7] ),
        .S(counter1_r0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter2_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter2_r_reg[14]_srl14 " *) 
  SRL16E \counter2_r_reg[14]_srl14 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(\counter1_r_reg[0]_0 ),
        .D(gen_spa_r),
        .Q(\counter2_r_reg[14]_srl14_n_0 ));
  FDRE \counter2_r_reg[15] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\counter2_r_reg[14]_srl14_n_0 ),
        .Q(\counter2_r_reg_n_0_[15] ),
        .R(1'b0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter3_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter3_r_reg[2]_srl3 " *) 
  SRL16E \counter3_r_reg[2]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(counter3_r0),
        .CLK(\counter1_r_reg[0]_0 ),
        .D(gen_spa_i),
        .Q(\counter3_r_reg[2]_srl3_n_0 ));
  FDRE \counter3_r_reg[3] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(counter3_r0),
        .D(\counter3_r_reg[2]_srl3_n_0 ),
        .Q(\counter3_r_reg_n_0_[3] ),
        .R(1'b0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter4_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter4_r_reg[14]_srl15 " *) 
  SRL16E \counter4_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(counter4_r0),
        .CLK(\counter1_r_reg[0]_0 ),
        .D(ready_r),
        .Q(\counter4_r_reg[14]_srl15_n_0 ));
  FDRE \counter4_r_reg[15] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(counter4_r0),
        .D(\counter4_r_reg[14]_srl15_n_0 ),
        .Q(\counter4_r_reg_n_0_[15] ),
        .R(1'b0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter5_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_aurora_lane_4byte_0_i/aurora_8b10b_0_lane_init_sm_4byte_i/counter5_r_reg[14]_srl15 " *) 
  SRL16E \counter5_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(counter5_r0),
        .CLK(\counter1_r_reg[0]_0 ),
        .D(gen_spa_i),
        .Q(\counter5_r_reg[14]_srl15_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \counter5_r_reg[14]_srl15_i_1 
       (.I0(do_watchdog_count_r),
        .I1(gen_spa_i),
        .O(counter5_r0));
  FDRE \counter5_r_reg[15] 
       (.C(\counter1_r_reg[0]_0 ),
        .CE(counter5_r0),
        .D(\counter5_r_reg[14]_srl15_n_0 ),
        .Q(\counter5_r_reg_n_0_[15] ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    do_watchdog_count_r_i_1
       (.I0(count_128d_done_r),
        .I1(prev_count_128d_done_r),
        .O(do_watchdog_count_r0));
  FDRE do_watchdog_count_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(do_watchdog_count_r0),
        .Q(do_watchdog_count_r),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h1)) 
    gen_sp_r_i_1
       (.I0(ready_r),
        .I1(gen_spa_i),
        .O(GEN_SP));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    lane_up_flop_i
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(ready_r),
        .Q(lane_up),
        .R(SR));
  LUT5 #(
    .INIT(32'hFFFF888F)) 
    \left_align_select_r[0]_i_2 
       (.I0(RXCHARISK[1]),
        .I1(RXCHARISK[0]),
        .I2(ready_r),
        .I3(align_r_reg_0),
        .I4(first_v_received_r),
        .O(ready_r_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h08)) 
    polarity_r_i_1
       (.I0(count_32d_done_r),
        .I1(realign_r),
        .I2(rx_realign_i),
        .O(next_polarity_c));
  FDRE polarity_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_polarity_c),
        .Q(polarity_r),
        .R(ready_r_reg0));
  FDRE prev_count_128d_done_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(count_128d_done_r),
        .Q(prev_count_128d_done_r),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h4F44444444444444)) 
    ready_r_i_1
       (.I0(\counter4_r_reg_n_0_[15] ),
        .I1(ready_r),
        .I2(\counter5_r_reg_n_0_[15] ),
        .I3(gen_spa_i),
        .I4(\counter2_r_reg_n_0_[15] ),
        .I5(\counter3_r_reg_n_0_[3] ),
        .O(next_ready_c));
  FDRE ready_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_ready_c),
        .Q(ready_r),
        .R(ready_r_reg0));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'hFF040404)) 
    realign_r_i_1
       (.I0(rx_realign_i),
        .I1(realign_r),
        .I2(count_32d_done_r),
        .I3(align_r_reg_0),
        .I4(count_128d_done_r),
        .O(next_realign_c));
  FDRE realign_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_realign_c),
        .Q(realign_r),
        .R(ready_r_reg0));
  LUT6 #(
    .INIT(64'hFFFFFFFF0FBB00BB)) 
    reset_count_r_i_1
       (.I0(reset_count_r_reg_0),
        .I1(reset_count_r_reg_1),
        .I2(begin_r),
        .I3(tx_reset_i),
        .I4(count_8d_done_r),
        .I5(SR),
        .O(reset_count_r0));
  FDRE reset_count_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(reset_count_r0),
        .Q(reset_count_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    rst_r_i_1
       (.I0(begin_r),
        .I1(count_8d_done_r),
        .I2(tx_reset_i),
        .O(next_rst_c));
  FDRE rst_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(next_rst_c),
        .Q(tx_reset_i),
        .R(ready_r_reg0));
  LUT3 #(
    .INIT(8'h78)) 
    rx_polarity_r_i_1
       (.I0(RX_NEG),
        .I1(polarity_r),
        .I2(rx_polarity_i),
        .O(rx_polarity_r_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rx_polarity_r_reg
       (.C(\counter1_r_reg[0]_0 ),
        .CE(1'b1),
        .D(rx_polarity_r_i_1_n_0),
        .Q(rx_polarity_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_LEFT_ALIGN_CONTROL" *) 
module top_aurora_0_0_aurora_8b10b_0_LEFT_ALIGN_CONTROL
   (MUX_SELECT,
    mux_select_c,
    \MUX_SELECT_reg[2]_0 );
  output [0:0]MUX_SELECT;
  input [0:0]mux_select_c;
  input \MUX_SELECT_reg[2]_0 ;

  wire [0:0]MUX_SELECT;
  wire \MUX_SELECT_reg[2]_0 ;
  wire [0:0]mux_select_c;

  FDRE \MUX_SELECT_reg[2] 
       (.C(\MUX_SELECT_reg[2]_0 ),
        .CE(1'b1),
        .D(mux_select_c),
        .Q(MUX_SELECT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_LEFT_ALIGN_MUX" *) 
module top_aurora_0_0_aurora_8b10b_0_LEFT_ALIGN_MUX
   (\MUXED_DATA_reg[0]_0 ,
    stage_2_data_r,
    MUX_SELECT,
    \MUXED_DATA_reg[0]_1 );
  output [31:0]\MUXED_DATA_reg[0]_0 ;
  input [0:31]stage_2_data_r;
  input [0:0]MUX_SELECT;
  input \MUXED_DATA_reg[0]_1 ;

  wire [31:0]\MUXED_DATA_reg[0]_0 ;
  wire \MUXED_DATA_reg[0]_1 ;
  wire [0:0]MUX_SELECT;
  wire [0:15]muxed_data_c;
  wire [0:31]stage_2_data_r;

  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[0]_i_1 
       (.I0(stage_2_data_r[16]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[0]),
        .O(muxed_data_c[0]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[10]_i_1 
       (.I0(stage_2_data_r[26]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[10]),
        .O(muxed_data_c[10]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[11]_i_1 
       (.I0(stage_2_data_r[27]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[11]),
        .O(muxed_data_c[11]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[12]_i_1 
       (.I0(stage_2_data_r[28]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[12]),
        .O(muxed_data_c[12]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[13]_i_1 
       (.I0(stage_2_data_r[29]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[13]),
        .O(muxed_data_c[13]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[14]_i_1 
       (.I0(stage_2_data_r[30]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[14]),
        .O(muxed_data_c[14]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[15]_i_1 
       (.I0(stage_2_data_r[31]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[15]),
        .O(muxed_data_c[15]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[1]_i_1 
       (.I0(stage_2_data_r[17]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[1]),
        .O(muxed_data_c[1]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[2]_i_1 
       (.I0(stage_2_data_r[18]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[2]),
        .O(muxed_data_c[2]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[3]_i_1 
       (.I0(stage_2_data_r[19]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[3]),
        .O(muxed_data_c[3]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[4]_i_1 
       (.I0(stage_2_data_r[20]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[4]),
        .O(muxed_data_c[4]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[5]_i_1 
       (.I0(stage_2_data_r[21]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[5]),
        .O(muxed_data_c[5]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[6]_i_1 
       (.I0(stage_2_data_r[22]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[6]),
        .O(muxed_data_c[6]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[7]_i_1 
       (.I0(stage_2_data_r[23]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[7]),
        .O(muxed_data_c[7]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[8]_i_1 
       (.I0(stage_2_data_r[24]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[8]),
        .O(muxed_data_c[8]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MUXED_DATA[9]_i_1 
       (.I0(stage_2_data_r[25]),
        .I1(MUX_SELECT),
        .I2(stage_2_data_r[9]),
        .O(muxed_data_c[9]));
  FDRE \MUXED_DATA_reg[0] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[0]),
        .Q(\MUXED_DATA_reg[0]_0 [31]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[10] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[10]),
        .Q(\MUXED_DATA_reg[0]_0 [21]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[11] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[11]),
        .Q(\MUXED_DATA_reg[0]_0 [20]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[12] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[12]),
        .Q(\MUXED_DATA_reg[0]_0 [19]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[13] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[13]),
        .Q(\MUXED_DATA_reg[0]_0 [18]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[14] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[14]),
        .Q(\MUXED_DATA_reg[0]_0 [17]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[15] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[15]),
        .Q(\MUXED_DATA_reg[0]_0 [16]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[16] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[16]),
        .Q(\MUXED_DATA_reg[0]_0 [15]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[17] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[17]),
        .Q(\MUXED_DATA_reg[0]_0 [14]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[18] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[18]),
        .Q(\MUXED_DATA_reg[0]_0 [13]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[19] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[19]),
        .Q(\MUXED_DATA_reg[0]_0 [12]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[1] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[1]),
        .Q(\MUXED_DATA_reg[0]_0 [30]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[20] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[20]),
        .Q(\MUXED_DATA_reg[0]_0 [11]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[21] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[21]),
        .Q(\MUXED_DATA_reg[0]_0 [10]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[22] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[22]),
        .Q(\MUXED_DATA_reg[0]_0 [9]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[23] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[23]),
        .Q(\MUXED_DATA_reg[0]_0 [8]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[24] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[24]),
        .Q(\MUXED_DATA_reg[0]_0 [7]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[25] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[25]),
        .Q(\MUXED_DATA_reg[0]_0 [6]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[26] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[26]),
        .Q(\MUXED_DATA_reg[0]_0 [5]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[27] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[27]),
        .Q(\MUXED_DATA_reg[0]_0 [4]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[28] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[28]),
        .Q(\MUXED_DATA_reg[0]_0 [3]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[29] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[29]),
        .Q(\MUXED_DATA_reg[0]_0 [2]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[2] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[2]),
        .Q(\MUXED_DATA_reg[0]_0 [29]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[30] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[30]),
        .Q(\MUXED_DATA_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[31] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(stage_2_data_r[31]),
        .Q(\MUXED_DATA_reg[0]_0 [0]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[3] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[3]),
        .Q(\MUXED_DATA_reg[0]_0 [28]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[4] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[4]),
        .Q(\MUXED_DATA_reg[0]_0 [27]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[5] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[5]),
        .Q(\MUXED_DATA_reg[0]_0 [26]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[6] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[6]),
        .Q(\MUXED_DATA_reg[0]_0 [25]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[7] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[7]),
        .Q(\MUXED_DATA_reg[0]_0 [24]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[8] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[8]),
        .Q(\MUXED_DATA_reg[0]_0 [23]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[9] 
       (.C(\MUXED_DATA_reg[0]_1 ),
        .CE(1'b1),
        .D(muxed_data_c[9]),
        .Q(\MUXED_DATA_reg[0]_0 [22]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_LL_TO_AXI" *) 
module top_aurora_0_0_aurora_8b10b_0_LL_TO_AXI
   (m_axi_rx_tkeep,
    rx_eof,
    Q);
  output [2:0]m_axi_rx_tkeep;
  input rx_eof;
  input [1:0]Q;

  wire [1:0]Q;
  wire [2:0]m_axi_rx_tkeep;
  wire rx_eof;

  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \m_axi_rx_tkeep[1]_INST_0 
       (.I0(rx_eof),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(m_axi_rx_tkeep[2]));
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_rx_tkeep[2]_INST_0 
       (.I0(rx_eof),
        .I1(Q[1]),
        .O(m_axi_rx_tkeep[1]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \m_axi_rx_tkeep[3]_INST_0 
       (.I0(rx_eof),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(m_axi_rx_tkeep[0]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_OUTPUT_MUX" *) 
module top_aurora_0_0_aurora_8b10b_0_OUTPUT_MUX
   (m_axi_rx_tdata,
    Q,
    \OUTPUT_DATA_reg[0]_0 ,
    \OUTPUT_DATA_reg[16]_0 ,
    OUTPUT_SELECT);
  output [0:31]m_axi_rx_tdata;
  input [31:0]Q;
  input \OUTPUT_DATA_reg[0]_0 ;
  input [15:0]\OUTPUT_DATA_reg[16]_0 ;
  input OUTPUT_SELECT;

  wire \OUTPUT_DATA_reg[0]_0 ;
  wire [15:0]\OUTPUT_DATA_reg[16]_0 ;
  wire OUTPUT_SELECT;
  wire [31:0]Q;
  wire [0:31]m_axi_rx_tdata;
  wire [16:31]output_data_c;

  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[16]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [15]),
        .I1(OUTPUT_SELECT),
        .I2(Q[15]),
        .O(output_data_c[16]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[17]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [14]),
        .I1(OUTPUT_SELECT),
        .I2(Q[14]),
        .O(output_data_c[17]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[18]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [13]),
        .I1(OUTPUT_SELECT),
        .I2(Q[13]),
        .O(output_data_c[18]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[19]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [12]),
        .I1(OUTPUT_SELECT),
        .I2(Q[12]),
        .O(output_data_c[19]));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[20]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [11]),
        .I1(OUTPUT_SELECT),
        .I2(Q[11]),
        .O(output_data_c[20]));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[21]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [10]),
        .I1(OUTPUT_SELECT),
        .I2(Q[10]),
        .O(output_data_c[21]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[22]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [9]),
        .I1(OUTPUT_SELECT),
        .I2(Q[9]),
        .O(output_data_c[22]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[23]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [8]),
        .I1(OUTPUT_SELECT),
        .I2(Q[8]),
        .O(output_data_c[23]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[24]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [7]),
        .I1(OUTPUT_SELECT),
        .I2(Q[7]),
        .O(output_data_c[24]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[25]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [6]),
        .I1(OUTPUT_SELECT),
        .I2(Q[6]),
        .O(output_data_c[25]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[26]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [5]),
        .I1(OUTPUT_SELECT),
        .I2(Q[5]),
        .O(output_data_c[26]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[27]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [4]),
        .I1(OUTPUT_SELECT),
        .I2(Q[4]),
        .O(output_data_c[27]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[28]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [3]),
        .I1(OUTPUT_SELECT),
        .I2(Q[3]),
        .O(output_data_c[28]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[29]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [2]),
        .I1(OUTPUT_SELECT),
        .I2(Q[2]),
        .O(output_data_c[29]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[30]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [1]),
        .I1(OUTPUT_SELECT),
        .I2(Q[1]),
        .O(output_data_c[30]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \OUTPUT_DATA[31]_i_1 
       (.I0(\OUTPUT_DATA_reg[16]_0 [0]),
        .I1(OUTPUT_SELECT),
        .I2(Q[0]),
        .O(output_data_c[31]));
  FDRE \OUTPUT_DATA_reg[0] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[31]),
        .Q(m_axi_rx_tdata[0]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[10] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[21]),
        .Q(m_axi_rx_tdata[10]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[11] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[20]),
        .Q(m_axi_rx_tdata[11]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[12] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[19]),
        .Q(m_axi_rx_tdata[12]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[13] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[18]),
        .Q(m_axi_rx_tdata[13]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[14] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[17]),
        .Q(m_axi_rx_tdata[14]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[15] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[16]),
        .Q(m_axi_rx_tdata[15]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[16] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[16]),
        .Q(m_axi_rx_tdata[16]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[17] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[17]),
        .Q(m_axi_rx_tdata[17]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[18] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[18]),
        .Q(m_axi_rx_tdata[18]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[19] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[19]),
        .Q(m_axi_rx_tdata[19]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[1] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[30]),
        .Q(m_axi_rx_tdata[1]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[20] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[20]),
        .Q(m_axi_rx_tdata[20]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[21] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[21]),
        .Q(m_axi_rx_tdata[21]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[22] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[22]),
        .Q(m_axi_rx_tdata[22]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[23] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[23]),
        .Q(m_axi_rx_tdata[23]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[24] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[24]),
        .Q(m_axi_rx_tdata[24]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[25] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[25]),
        .Q(m_axi_rx_tdata[25]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[26] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[26]),
        .Q(m_axi_rx_tdata[26]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[27] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[27]),
        .Q(m_axi_rx_tdata[27]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[28] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[28]),
        .Q(m_axi_rx_tdata[28]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[29] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[29]),
        .Q(m_axi_rx_tdata[29]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[2] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[29]),
        .Q(m_axi_rx_tdata[2]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[30] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[30]),
        .Q(m_axi_rx_tdata[30]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[31] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(output_data_c[31]),
        .Q(m_axi_rx_tdata[31]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[3] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[28]),
        .Q(m_axi_rx_tdata[3]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[4] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[27]),
        .Q(m_axi_rx_tdata[4]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[5] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[26]),
        .Q(m_axi_rx_tdata[5]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[6] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[25]),
        .Q(m_axi_rx_tdata[6]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[7] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[24]),
        .Q(m_axi_rx_tdata[7]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[8] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[23]),
        .Q(m_axi_rx_tdata[8]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[9] 
       (.C(\OUTPUT_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(Q[22]),
        .Q(m_axi_rx_tdata[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_OUTPUT_SWITCH_CONTROL" *) 
module top_aurora_0_0_aurora_8b10b_0_OUTPUT_SWITCH_CONTROL
   (OUTPUT_SELECT,
    output_select_c,
    \OUTPUT_SELECT_reg[9]_0 );
  output OUTPUT_SELECT;
  input [0:0]output_select_c;
  input \OUTPUT_SELECT_reg[9]_0 ;

  wire OUTPUT_SELECT;
  wire \OUTPUT_SELECT_reg[9]_0 ;
  wire [0:0]output_select_c;

  FDRE \OUTPUT_SELECT_reg[9] 
       (.C(\OUTPUT_SELECT_reg[9]_0 ),
        .CE(1'b1),
        .D(output_select_c),
        .Q(OUTPUT_SELECT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_RESET_LOGIC" *) 
module top_aurora_0_0_aurora_8b10b_0_RESET_LOGIC
   (SR,
    new_pkt_r,
    in0,
    link_reset_r,
    init_clk_in,
    s_level_out_d5_reg,
    tx_lock_comb_r_reg_0,
    gt_txresetdone_r2_reg_0,
    gt_rxresetdone_r2_reg_0,
    s_axi_tx_tlast,
    channel_up,
    s_axi_tx_tvalid,
    tx_dst_rdy,
    new_pkt_r_reg);
  output [0:0]SR;
  output new_pkt_r;
  input in0;
  input link_reset_r;
  input init_clk_in;
  input s_level_out_d5_reg;
  input tx_lock_comb_r_reg_0;
  input gt_txresetdone_r2_reg_0;
  input gt_rxresetdone_r2_reg_0;
  input s_axi_tx_tlast;
  input channel_up;
  input s_axi_tx_tvalid;
  input tx_dst_rdy;
  input new_pkt_r_reg;

  wire [0:0]SR;
  wire SYSTEM_RESET0_n_0;
  wire channel_up;
  wire gt_rxresetdone_r;
  wire gt_rxresetdone_r2;
  wire gt_rxresetdone_r2_reg_0;
  wire gt_rxresetdone_r3;
  wire gt_txresetdone_r;
  wire gt_txresetdone_r2;
  wire gt_txresetdone_r2_reg_0;
  wire gt_txresetdone_r3;
  wire in0;
  wire init_clk_in;
  wire link_reset_r;
  wire link_reset_sync;
  wire new_pkt_r;
  wire new_pkt_r_reg;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tvalid;
  wire s_level_out_d5_reg;
  wire tx_dst_rdy;
  wire tx_lock_comb_r;
  wire tx_lock_comb_r_reg_0;
  wire tx_lock_sync;

  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    SYSTEM_RESET0
       (.I0(in0),
        .I1(gt_rxresetdone_r3),
        .I2(gt_txresetdone_r3),
        .I3(link_reset_sync),
        .I4(tx_lock_sync),
        .O(SYSTEM_RESET0_n_0));
  FDRE SYSTEM_RESET_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .D(SYSTEM_RESET0_n_0),
        .Q(SR),
        .R(1'b0));
  FDCE gt_rxresetdone_r2_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .CLR(gt_rxresetdone_r2_reg_0),
        .D(gt_rxresetdone_r),
        .Q(gt_rxresetdone_r2));
  FDRE gt_rxresetdone_r3_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .D(gt_rxresetdone_r2),
        .Q(gt_rxresetdone_r3),
        .R(1'b0));
  FDCE gt_rxresetdone_r_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .CLR(gt_rxresetdone_r2_reg_0),
        .D(1'b1),
        .Q(gt_rxresetdone_r));
  FDCE gt_txresetdone_r2_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .CLR(gt_txresetdone_r2_reg_0),
        .D(gt_txresetdone_r),
        .Q(gt_txresetdone_r2));
  FDRE gt_txresetdone_r3_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .D(gt_txresetdone_r2),
        .Q(gt_txresetdone_r3),
        .R(1'b0));
  FDCE gt_txresetdone_r_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .CLR(gt_txresetdone_r2_reg_0),
        .D(1'b1),
        .Q(gt_txresetdone_r));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_21 link_reset_cdc_sync
       (.init_clk_in(init_clk_in),
        .link_reset_r(link_reset_r),
        .out(link_reset_sync),
        .s_level_out_d5_reg_0(s_level_out_d5_reg));
  LUT6 #(
    .INIT(64'h3030103000001000)) 
    new_pkt_r_i_1
       (.I0(s_axi_tx_tlast),
        .I1(SR),
        .I2(channel_up),
        .I3(s_axi_tx_tvalid),
        .I4(tx_dst_rdy),
        .I5(new_pkt_r_reg),
        .O(new_pkt_r));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_22 tx_lock_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(tx_lock_sync),
        .s_level_out_d5_reg_0(s_level_out_d5_reg),
        .tx_lock_comb_r(tx_lock_comb_r));
  FDRE tx_lock_comb_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_lock_comb_r_reg_0),
        .Q(tx_lock_comb_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_RX_LL" *) 
module top_aurora_0_0_aurora_8b10b_0_RX_LL
   (rx_eof,
    frame_err,
    m_axi_rx_tlast,
    m_axi_rx_tvalid,
    Q,
    m_axi_rx_tdata,
    \stage_2_data_r_reg[0] ,
    \STORAGE_DATA_reg[31] ,
    \stage_2_data_r_reg[8] ,
    \stage_2_data_r_reg[16] ,
    \stage_2_data_r_reg[24] ,
    \IN_FRAME_reg[1] ,
    D,
    in_frame_r_reg,
    after_scp_select_c_1,
    after_scp_select_c_0,
    SR,
    stage_1_pad_r_reg,
    start_rx_i,
    \DEFRAMED_DATA_V_reg[0] ,
    \stage_1_ecp_r_reg[0] );
  output rx_eof;
  output frame_err;
  output m_axi_rx_tlast;
  output m_axi_rx_tvalid;
  output [1:0]Q;
  output [0:31]m_axi_rx_tdata;
  input [7:0]\stage_2_data_r_reg[0] ;
  input \STORAGE_DATA_reg[31] ;
  input [7:0]\stage_2_data_r_reg[8] ;
  input [7:0]\stage_2_data_r_reg[16] ;
  input [7:0]\stage_2_data_r_reg[24] ;
  input \IN_FRAME_reg[1] ;
  input [1:0]D;
  input in_frame_r_reg;
  input after_scp_select_c_1;
  input after_scp_select_c_0;
  input [0:0]SR;
  input stage_1_pad_r_reg;
  input start_rx_i;
  input [1:0]\DEFRAMED_DATA_V_reg[0] ;
  input [1:0]\stage_1_ecp_r_reg[0] ;

  wire [1:0]D;
  wire [1:0]\DEFRAMED_DATA_V_reg[0] ;
  wire \IN_FRAME_reg[1] ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire \STORAGE_DATA[0]_i_1_n_0 ;
  wire \STORAGE_DATA[10]_i_1_n_0 ;
  wire \STORAGE_DATA[11]_i_1_n_0 ;
  wire \STORAGE_DATA[12]_i_1_n_0 ;
  wire \STORAGE_DATA[13]_i_1_n_0 ;
  wire \STORAGE_DATA[14]_i_1_n_0 ;
  wire \STORAGE_DATA[15]_i_1_n_0 ;
  wire \STORAGE_DATA[16]_i_1_n_0 ;
  wire \STORAGE_DATA[17]_i_1_n_0 ;
  wire \STORAGE_DATA[18]_i_1_n_0 ;
  wire \STORAGE_DATA[19]_i_1_n_0 ;
  wire \STORAGE_DATA[1]_i_1_n_0 ;
  wire \STORAGE_DATA[20]_i_1_n_0 ;
  wire \STORAGE_DATA[21]_i_1_n_0 ;
  wire \STORAGE_DATA[22]_i_1_n_0 ;
  wire \STORAGE_DATA[23]_i_1_n_0 ;
  wire \STORAGE_DATA[24]_i_1_n_0 ;
  wire \STORAGE_DATA[25]_i_1_n_0 ;
  wire \STORAGE_DATA[26]_i_1_n_0 ;
  wire \STORAGE_DATA[27]_i_1_n_0 ;
  wire \STORAGE_DATA[28]_i_1_n_0 ;
  wire \STORAGE_DATA[29]_i_1_n_0 ;
  wire \STORAGE_DATA[2]_i_1_n_0 ;
  wire \STORAGE_DATA[30]_i_1_n_0 ;
  wire \STORAGE_DATA[31]_i_1_n_0 ;
  wire \STORAGE_DATA[3]_i_1_n_0 ;
  wire \STORAGE_DATA[4]_i_1_n_0 ;
  wire \STORAGE_DATA[5]_i_1_n_0 ;
  wire \STORAGE_DATA[6]_i_1_n_0 ;
  wire \STORAGE_DATA[7]_i_1_n_0 ;
  wire \STORAGE_DATA[8]_i_1_n_0 ;
  wire \STORAGE_DATA[9]_i_1_n_0 ;
  wire \STORAGE_DATA_reg[31] ;
  wire [4:9]STORAGE_SELECT;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire frame_err;
  wire in_frame_r_reg;
  wire [0:31]m_axi_rx_tdata;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire [15:0]p_1_in;
  wire rx_eof;
  wire rx_ll_pdu_datapath_i_n_22;
  wire rx_ll_pdu_datapath_i_n_23;
  wire rx_ll_pdu_datapath_i_n_24;
  wire rx_ll_pdu_datapath_i_n_25;
  wire rx_ll_pdu_datapath_i_n_26;
  wire rx_ll_pdu_datapath_i_n_27;
  wire rx_ll_pdu_datapath_i_n_28;
  wire rx_ll_pdu_datapath_i_n_29;
  wire rx_ll_pdu_datapath_i_n_30;
  wire rx_ll_pdu_datapath_i_n_31;
  wire rx_ll_pdu_datapath_i_n_32;
  wire rx_ll_pdu_datapath_i_n_33;
  wire rx_ll_pdu_datapath_i_n_34;
  wire rx_ll_pdu_datapath_i_n_35;
  wire rx_ll_pdu_datapath_i_n_36;
  wire rx_ll_pdu_datapath_i_n_37;
  wire [1:0]\stage_1_ecp_r_reg[0] ;
  wire stage_1_pad_r_reg;
  wire [7:0]\stage_2_data_r_reg[0] ;
  wire [7:0]\stage_2_data_r_reg[16] ;
  wire [7:0]\stage_2_data_r_reg[24] ;
  wire [7:0]\stage_2_data_r_reg[8] ;
  wire start_rx_i;

  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[0]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_22),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[15]),
        .O(\STORAGE_DATA[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[10]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_32),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[5]),
        .O(\STORAGE_DATA[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[11]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_33),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[4]),
        .O(\STORAGE_DATA[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[12]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_34),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[3]),
        .O(\STORAGE_DATA[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[13]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_35),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[2]),
        .O(\STORAGE_DATA[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[14]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_36),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[1]),
        .O(\STORAGE_DATA[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[15]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_37),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[0]),
        .O(\STORAGE_DATA[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[16]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_22),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[15]),
        .O(\STORAGE_DATA[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[17]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_23),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[14]),
        .O(\STORAGE_DATA[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[18]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_24),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[13]),
        .O(\STORAGE_DATA[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[19]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_25),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[12]),
        .O(\STORAGE_DATA[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[1]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_23),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[14]),
        .O(\STORAGE_DATA[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[20]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_26),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[11]),
        .O(\STORAGE_DATA[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[21]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_27),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[10]),
        .O(\STORAGE_DATA[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[22]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_28),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[9]),
        .O(\STORAGE_DATA[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[23]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_29),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[8]),
        .O(\STORAGE_DATA[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[24]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_30),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[7]),
        .O(\STORAGE_DATA[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[25]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_31),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[6]),
        .O(\STORAGE_DATA[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[26]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_32),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[5]),
        .O(\STORAGE_DATA[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[27]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_33),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[4]),
        .O(\STORAGE_DATA[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[28]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_34),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[3]),
        .O(\STORAGE_DATA[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[29]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_35),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[2]),
        .O(\STORAGE_DATA[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[2]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_24),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[13]),
        .O(\STORAGE_DATA[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[30]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_36),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[1]),
        .O(\STORAGE_DATA[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[31]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_37),
        .I1(STORAGE_SELECT[9]),
        .I2(p_1_in[0]),
        .O(\STORAGE_DATA[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[3]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_25),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[12]),
        .O(\STORAGE_DATA[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[4]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_26),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[11]),
        .O(\STORAGE_DATA[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[5]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_27),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[10]),
        .O(\STORAGE_DATA[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[6]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_28),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[9]),
        .O(\STORAGE_DATA[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[7]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_29),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[8]),
        .O(\STORAGE_DATA[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[8]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_30),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[7]),
        .O(\STORAGE_DATA[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \STORAGE_DATA[9]_i_1 
       (.I0(rx_ll_pdu_datapath_i_n_31),
        .I1(STORAGE_SELECT[4]),
        .I2(p_1_in[6]),
        .O(\STORAGE_DATA[9]_i_1_n_0 ));
  top_aurora_0_0_aurora_8b10b_0_RX_LL_PDU_DATAPATH rx_ll_pdu_datapath_i
       (.D(D),
        .\DEFRAMED_DATA_V_reg[0] (\DEFRAMED_DATA_V_reg[0] ),
        .\IN_FRAME_reg[1] (\IN_FRAME_reg[1] ),
        .\MUXED_DATA_reg[0] ({p_1_in,rx_ll_pdu_datapath_i_n_22,rx_ll_pdu_datapath_i_n_23,rx_ll_pdu_datapath_i_n_24,rx_ll_pdu_datapath_i_n_25,rx_ll_pdu_datapath_i_n_26,rx_ll_pdu_datapath_i_n_27,rx_ll_pdu_datapath_i_n_28,rx_ll_pdu_datapath_i_n_29,rx_ll_pdu_datapath_i_n_30,rx_ll_pdu_datapath_i_n_31,rx_ll_pdu_datapath_i_n_32,rx_ll_pdu_datapath_i_n_33,rx_ll_pdu_datapath_i_n_34,rx_ll_pdu_datapath_i_n_35,rx_ll_pdu_datapath_i_n_36,rx_ll_pdu_datapath_i_n_37}),
        .Q(Q),
        .SR(SR),
        .\STORAGE_DATA_reg[0] ({\STORAGE_DATA[0]_i_1_n_0 ,\STORAGE_DATA[1]_i_1_n_0 ,\STORAGE_DATA[2]_i_1_n_0 ,\STORAGE_DATA[3]_i_1_n_0 ,\STORAGE_DATA[4]_i_1_n_0 ,\STORAGE_DATA[5]_i_1_n_0 ,\STORAGE_DATA[6]_i_1_n_0 ,\STORAGE_DATA[7]_i_1_n_0 ,\STORAGE_DATA[8]_i_1_n_0 ,\STORAGE_DATA[9]_i_1_n_0 ,\STORAGE_DATA[10]_i_1_n_0 ,\STORAGE_DATA[11]_i_1_n_0 ,\STORAGE_DATA[12]_i_1_n_0 ,\STORAGE_DATA[13]_i_1_n_0 ,\STORAGE_DATA[14]_i_1_n_0 ,\STORAGE_DATA[15]_i_1_n_0 ,\STORAGE_DATA[16]_i_1_n_0 ,\STORAGE_DATA[17]_i_1_n_0 ,\STORAGE_DATA[18]_i_1_n_0 ,\STORAGE_DATA[19]_i_1_n_0 ,\STORAGE_DATA[20]_i_1_n_0 ,\STORAGE_DATA[21]_i_1_n_0 ,\STORAGE_DATA[22]_i_1_n_0 ,\STORAGE_DATA[23]_i_1_n_0 ,\STORAGE_DATA[24]_i_1_n_0 ,\STORAGE_DATA[25]_i_1_n_0 ,\STORAGE_DATA[26]_i_1_n_0 ,\STORAGE_DATA[27]_i_1_n_0 ,\STORAGE_DATA[28]_i_1_n_0 ,\STORAGE_DATA[29]_i_1_n_0 ,\STORAGE_DATA[30]_i_1_n_0 ,\STORAGE_DATA[31]_i_1_n_0 }),
        .\STORAGE_DATA_reg[31] (\STORAGE_DATA_reg[31] ),
        .STORAGE_SELECT({STORAGE_SELECT[4],STORAGE_SELECT[9]}),
        .after_scp_select_c_0(after_scp_select_c_0),
        .after_scp_select_c_1(after_scp_select_c_1),
        .frame_err(frame_err),
        .in_frame_r_reg(in_frame_r_reg),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .rx_eof(rx_eof),
        .\stage_1_ecp_r_reg[0]_0 (\stage_1_ecp_r_reg[0] ),
        .stage_1_pad_r_reg_0(stage_1_pad_r_reg),
        .\stage_2_data_r_reg[0]_0 (\stage_2_data_r_reg[0] ),
        .\stage_2_data_r_reg[16]_0 (\stage_2_data_r_reg[16] ),
        .\stage_2_data_r_reg[24]_0 (\stage_2_data_r_reg[24] ),
        .\stage_2_data_r_reg[8]_0 (\stage_2_data_r_reg[8] ),
        .start_rx_i(start_rx_i));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_RX_LL_DEFRAMER" *) 
module top_aurora_0_0_aurora_8b10b_0_RX_LL_DEFRAMER
   (\stage_1_ecp_r_reg[0] ,
    mux_select_c,
    \AFTER_SCP_reg[1]_0 ,
    \AFTER_SCP_reg[1]_1 ,
    \AFTER_SCP_reg[1]_2 ,
    \DEFRAMED_DATA_V_reg[1]_0 ,
    \IN_FRAME_reg[1]_0 ,
    D,
    in_frame_r_reg_0,
    after_scp_select_c_1,
    after_scp_select_c_0,
    SR,
    \IN_FRAME_reg[0]_0 ,
    Q,
    stage_2_frame_err_r_reg,
    \DEFRAMED_DATA_V_reg[0]_0 );
  output \stage_1_ecp_r_reg[0] ;
  output [0:0]mux_select_c;
  output \AFTER_SCP_reg[1]_0 ;
  output \AFTER_SCP_reg[1]_1 ;
  output \AFTER_SCP_reg[1]_2 ;
  output [1:0]\DEFRAMED_DATA_V_reg[1]_0 ;
  input \IN_FRAME_reg[1]_0 ;
  input [1:0]D;
  input in_frame_r_reg_0;
  input after_scp_select_c_1;
  input after_scp_select_c_0;
  input [0:0]SR;
  input \IN_FRAME_reg[0]_0 ;
  input [1:0]Q;
  input [1:0]stage_2_frame_err_r_reg;
  input [1:0]\DEFRAMED_DATA_V_reg[0]_0 ;

  wire \AFTER_SCP_reg[1]_0 ;
  wire \AFTER_SCP_reg[1]_1 ;
  wire \AFTER_SCP_reg[1]_2 ;
  wire [1:0]D;
  wire \DEFRAMED_DATA_V[0]_i_1_n_0 ;
  wire \DEFRAMED_DATA_V[1]_i_1_n_0 ;
  wire [1:0]\DEFRAMED_DATA_V_reg[0]_0 ;
  wire [1:0]\DEFRAMED_DATA_V_reg[1]_0 ;
  wire \IN_FRAME_reg[0]_0 ;
  wire \IN_FRAME_reg[1]_0 ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire after_scp_c_1;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire data_after_start_muxcy_1_n_0;
  wire in_frame_c_0;
  wire in_frame_c_1;
  wire in_frame_r;
  wire in_frame_r_reg_0;
  wire [0:0]mux_select_c;
  wire [0:1]stage_1_after_scp_r;
  wire [0:1]stage_1_data_v_r;
  wire \stage_1_ecp_r_reg[0] ;
  wire [0:1]stage_1_in_frame_r;
  wire [1:0]stage_2_frame_err_r_reg;
  wire [3:2]NLW_data_after_start_muxcy_0_CARRY4_CO_UNCONNECTED;
  wire [3:2]NLW_data_after_start_muxcy_0_CARRY4_DI_UNCONNECTED;
  wire [3:0]NLW_data_after_start_muxcy_0_CARRY4_O_UNCONNECTED;
  wire [3:2]NLW_data_after_start_muxcy_0_CARRY4_S_UNCONNECTED;
  wire [3:2]NLW_in_frame_muxcy_0_CARRY4_CO_UNCONNECTED;
  wire [3:2]NLW_in_frame_muxcy_0_CARRY4_DI_UNCONNECTED;
  wire [3:0]NLW_in_frame_muxcy_0_CARRY4_O_UNCONNECTED;
  wire [3:2]NLW_in_frame_muxcy_0_CARRY4_S_UNCONNECTED;

  FDRE \AFTER_SCP_reg[0] 
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(after_scp_c_1),
        .Q(stage_1_after_scp_r[0]),
        .R(SR));
  FDRE \AFTER_SCP_reg[1] 
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(data_after_start_muxcy_1_n_0),
        .Q(stage_1_after_scp_r[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \COUNT[0]_i_1 
       (.I0(stage_1_data_v_r[1]),
        .I1(stage_1_data_v_r[0]),
        .O(\DEFRAMED_DATA_V_reg[1]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \COUNT[1]_i_1 
       (.I0(stage_1_data_v_r[0]),
        .I1(stage_1_data_v_r[1]),
        .O(\DEFRAMED_DATA_V_reg[1]_0 [0]));
  LUT2 #(
    .INIT(4'h8)) 
    \DEFRAMED_DATA_V[0]_i_1 
       (.I0(in_frame_c_1),
        .I1(\DEFRAMED_DATA_V_reg[0]_0 [1]),
        .O(\DEFRAMED_DATA_V[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \DEFRAMED_DATA_V[1]_i_1 
       (.I0(in_frame_c_0),
        .I1(\DEFRAMED_DATA_V_reg[0]_0 [0]),
        .O(\DEFRAMED_DATA_V[1]_i_1_n_0 ));
  FDRE \DEFRAMED_DATA_V_reg[0] 
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(\DEFRAMED_DATA_V[0]_i_1_n_0 ),
        .Q(stage_1_data_v_r[0]),
        .R(SR));
  FDRE \DEFRAMED_DATA_V_reg[1] 
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(\DEFRAMED_DATA_V[1]_i_1_n_0 ),
        .Q(stage_1_data_v_r[1]),
        .R(SR));
  FDRE \IN_FRAME_reg[0] 
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(in_frame_r),
        .Q(stage_1_in_frame_r[0]),
        .R(SR));
  FDRE \IN_FRAME_reg[1] 
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(in_frame_c_1),
        .Q(stage_1_in_frame_r[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \MUX_SELECT[2]_i_1 
       (.I0(stage_1_data_v_r[1]),
        .I1(stage_1_data_v_r[0]),
        .O(mux_select_c));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 data_after_start_muxcy_0_CARRY4
       (.CI(1'b0),
        .CO({NLW_data_after_start_muxcy_0_CARRY4_CO_UNCONNECTED[3:2],data_after_start_muxcy_1_n_0,after_scp_c_1}),
        .CYINIT(1'b0),
        .DI({NLW_data_after_start_muxcy_0_CARRY4_DI_UNCONNECTED[3:2],1'b1,1'b1}),
        .O(NLW_data_after_start_muxcy_0_CARRY4_O_UNCONNECTED[3:0]),
        .S({NLW_data_after_start_muxcy_0_CARRY4_S_UNCONNECTED[3:2],after_scp_select_c_0,after_scp_select_c_1}));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 in_frame_muxcy_0_CARRY4
       (.CI(1'b0),
        .CO({NLW_in_frame_muxcy_0_CARRY4_CO_UNCONNECTED[3:2],in_frame_c_0,in_frame_c_1}),
        .CYINIT(in_frame_r),
        .DI({NLW_in_frame_muxcy_0_CARRY4_DI_UNCONNECTED[3:2],D[0],D[1]}),
        .O(NLW_in_frame_muxcy_0_CARRY4_O_UNCONNECTED[3:0]),
        .S({NLW_in_frame_muxcy_0_CARRY4_S_UNCONNECTED[3:2],in_frame_r_reg_0,\IN_FRAME_reg[1]_0 }));
  FDRE in_frame_r_reg
       (.C(\IN_FRAME_reg[0]_0 ),
        .CE(1'b1),
        .D(in_frame_c_0),
        .Q(in_frame_r),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    stage_2_end_after_start_r_i_1
       (.I0(stage_1_after_scp_r[1]),
        .I1(Q[0]),
        .I2(stage_1_after_scp_r[0]),
        .I3(Q[1]),
        .O(\AFTER_SCP_reg[1]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'h4F44)) 
    stage_2_end_before_start_r_i_1
       (.I0(stage_1_after_scp_r[1]),
        .I1(Q[0]),
        .I2(stage_1_after_scp_r[0]),
        .I3(Q[1]),
        .O(\AFTER_SCP_reg[1]_1 ));
  LUT6 #(
    .INIT(64'hFFFFF0AAFCEEFCEE)) 
    stage_2_frame_err_r_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(stage_2_frame_err_r_reg[1]),
        .I3(stage_1_in_frame_r[0]),
        .I4(stage_2_frame_err_r_reg[0]),
        .I5(stage_1_in_frame_r[1]),
        .O(\stage_1_ecp_r_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    stage_2_start_with_data_r_i_1
       (.I0(stage_1_after_scp_r[1]),
        .I1(stage_1_data_v_r[1]),
        .I2(stage_1_after_scp_r[0]),
        .I3(stage_1_data_v_r[0]),
        .O(\AFTER_SCP_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_RX_LL_PDU_DATAPATH" *) 
module top_aurora_0_0_aurora_8b10b_0_RX_LL_PDU_DATAPATH
   (rx_eof,
    frame_err,
    m_axi_rx_tlast,
    m_axi_rx_tvalid,
    Q,
    \MUXED_DATA_reg[0] ,
    STORAGE_SELECT,
    m_axi_rx_tdata,
    \stage_2_data_r_reg[0]_0 ,
    \STORAGE_DATA_reg[31] ,
    \stage_2_data_r_reg[8]_0 ,
    \stage_2_data_r_reg[16]_0 ,
    \stage_2_data_r_reg[24]_0 ,
    \IN_FRAME_reg[1] ,
    D,
    in_frame_r_reg,
    after_scp_select_c_1,
    after_scp_select_c_0,
    SR,
    stage_1_pad_r_reg_0,
    start_rx_i,
    \DEFRAMED_DATA_V_reg[0] ,
    \stage_1_ecp_r_reg[0]_0 ,
    \STORAGE_DATA_reg[0] );
  output rx_eof;
  output frame_err;
  output m_axi_rx_tlast;
  output m_axi_rx_tvalid;
  output [1:0]Q;
  output [31:0]\MUXED_DATA_reg[0] ;
  output [1:0]STORAGE_SELECT;
  output [0:31]m_axi_rx_tdata;
  input [7:0]\stage_2_data_r_reg[0]_0 ;
  input \STORAGE_DATA_reg[31] ;
  input [7:0]\stage_2_data_r_reg[8]_0 ;
  input [7:0]\stage_2_data_r_reg[16]_0 ;
  input [7:0]\stage_2_data_r_reg[24]_0 ;
  input \IN_FRAME_reg[1] ;
  input [1:0]D;
  input in_frame_r_reg;
  input after_scp_select_c_1;
  input after_scp_select_c_0;
  input [0:0]SR;
  input stage_1_pad_r_reg_0;
  input start_rx_i;
  input [1:0]\DEFRAMED_DATA_V_reg[0] ;
  input [1:0]\stage_1_ecp_r_reg[0]_0 ;
  input [31:0]\STORAGE_DATA_reg[0] ;

  wire [1:0]D;
  wire [1:0]\DEFRAMED_DATA_V_reg[0] ;
  wire EOF_N;
  wire FRAME_ERR_RESULT;
  wire FRAME_ERR_RESULT0;
  wire \IN_FRAME_reg[1] ;
  wire [31:0]\MUXED_DATA_reg[0] ;
  wire [2:2]MUX_SELECT;
  wire OUTPUT_SELECT;
  wire [1:0]Q;
  wire [0:0]SR;
  wire SRC_RDY_N;
  wire [0:31]STORAGE_DATA;
  wire [31:0]\STORAGE_DATA_reg[0] ;
  wire \STORAGE_DATA_reg[31] ;
  wire [1:0]STORAGE_SELECT;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire [0:1]ce_command_c;
  wire [0:1]count_c;
  wire end_storage_r0;
  wire excess_c;
  wire frame_err;
  wire in_frame_r_reg;
  wire [0:31]m_axi_rx_tdata;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire [2:2]mux_select_c;
  wire [9:9]output_select_c;
  wire p_0_in0;
  wire rx_eof;
  wire rx_src_rdy;
  wire sideband_output_i_n_1;
  wire sideband_output_i_n_6;
  wire sideband_output_i_n_7;
  wire \stage_1_data_r_reg[0]_srl3_n_0 ;
  wire \stage_1_data_r_reg[10]_srl3_n_0 ;
  wire \stage_1_data_r_reg[11]_srl3_n_0 ;
  wire \stage_1_data_r_reg[12]_srl3_n_0 ;
  wire \stage_1_data_r_reg[13]_srl3_n_0 ;
  wire \stage_1_data_r_reg[14]_srl3_n_0 ;
  wire \stage_1_data_r_reg[15]_srl3_n_0 ;
  wire \stage_1_data_r_reg[16]_srl3_n_0 ;
  wire \stage_1_data_r_reg[17]_srl3_n_0 ;
  wire \stage_1_data_r_reg[18]_srl3_n_0 ;
  wire \stage_1_data_r_reg[19]_srl3_n_0 ;
  wire \stage_1_data_r_reg[1]_srl3_n_0 ;
  wire \stage_1_data_r_reg[20]_srl3_n_0 ;
  wire \stage_1_data_r_reg[21]_srl3_n_0 ;
  wire \stage_1_data_r_reg[22]_srl3_n_0 ;
  wire \stage_1_data_r_reg[23]_srl3_n_0 ;
  wire \stage_1_data_r_reg[24]_srl3_n_0 ;
  wire \stage_1_data_r_reg[25]_srl3_n_0 ;
  wire \stage_1_data_r_reg[26]_srl3_n_0 ;
  wire \stage_1_data_r_reg[27]_srl3_n_0 ;
  wire \stage_1_data_r_reg[28]_srl3_n_0 ;
  wire \stage_1_data_r_reg[29]_srl3_n_0 ;
  wire \stage_1_data_r_reg[2]_srl3_n_0 ;
  wire \stage_1_data_r_reg[30]_srl3_n_0 ;
  wire \stage_1_data_r_reg[31]_srl3_n_0 ;
  wire \stage_1_data_r_reg[3]_srl3_n_0 ;
  wire \stage_1_data_r_reg[4]_srl3_n_0 ;
  wire \stage_1_data_r_reg[5]_srl3_n_0 ;
  wire \stage_1_data_r_reg[6]_srl3_n_0 ;
  wire \stage_1_data_r_reg[7]_srl3_n_0 ;
  wire \stage_1_data_r_reg[8]_srl3_n_0 ;
  wire \stage_1_data_r_reg[9]_srl3_n_0 ;
  wire [0:1]stage_1_ecp_r;
  wire [1:0]\stage_1_ecp_r_reg[0]_0 ;
  wire stage_1_pad_r;
  wire stage_1_pad_r_reg_0;
  wire stage_1_rx_ll_deframer_i_n_0;
  wire stage_1_rx_ll_deframer_i_n_2;
  wire stage_1_rx_ll_deframer_i_n_3;
  wire stage_1_rx_ll_deframer_i_n_4;
  wire [0:1]stage_1_scp_r;
  wire [0:31]stage_2_data_r;
  wire [7:0]\stage_2_data_r_reg[0]_0 ;
  wire [7:0]\stage_2_data_r_reg[16]_0 ;
  wire [7:0]\stage_2_data_r_reg[24]_0 ;
  wire [7:0]\stage_2_data_r_reg[8]_0 ;
  wire [0:1]stage_2_data_v_count_r;
  wire stage_2_end_after_start_r;
  wire stage_2_end_before_start_r;
  wire stage_2_frame_err_r;
  wire stage_2_pad_r;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire stage_3_storage_ce_control_i_n_1;
  wire stage_3_storage_count_control_i_n_3;
  wire [0:1]stage_3_storage_count_r;
  wire start_rx_i;
  wire [0:1]storage_count_c;
  wire storage_not_empty_c__0;

  FDRE FRAME_ERR_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(FRAME_ERR_RESULT),
        .Q(frame_err),
        .R(SR));
  FDRE RX_EOF_N_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(EOF_N),
        .Q(rx_eof),
        .R(1'b0));
  FDRE \RX_REM_reg[0] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(sideband_output_i_n_6),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \RX_REM_reg[1] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(sideband_output_i_n_7),
        .Q(Q[0]),
        .R(1'b0));
  FDSE RX_SRC_RDY_N_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(SRC_RDY_N),
        .Q(rx_src_rdy),
        .S(SR));
  LUT1 #(
    .INIT(2'h1)) 
    m_axi_rx_tlast_INST_0
       (.I0(rx_eof),
        .O(m_axi_rx_tlast));
  LUT1 #(
    .INIT(2'h1)) 
    m_axi_rx_tvalid_INST_0
       (.I0(rx_src_rdy),
        .O(m_axi_rx_tvalid));
  top_aurora_0_0_aurora_8b10b_0_OUTPUT_MUX output_mux_i
       (.\OUTPUT_DATA_reg[0]_0 (\STORAGE_DATA_reg[31] ),
        .\OUTPUT_DATA_reg[16]_0 (\MUXED_DATA_reg[0] [31:16]),
        .OUTPUT_SELECT(OUTPUT_SELECT),
        .Q({}),
        .m_axi_rx_tdata(m_axi_rx_tdata));
  top_aurora_0_0_aurora_8b10b_0_SIDEBAND_OUTPUT sideband_output_i
       (.D(storage_count_c[1]),
        .EOF_N(EOF_N),
        .EOF_N_reg_0(stage_3_storage_count_control_i_n_3),
        .FRAME_ERR_RESULT(FRAME_ERR_RESULT),
        .FRAME_ERR_RESULT0(FRAME_ERR_RESULT0),
        .Q(stage_2_data_v_count_r[1]),
        .\RX_REM_reg[0]_0 ({sideband_output_i_n_6,sideband_output_i_n_7}),
        .\RX_REM_reg[0]_1 (stage_3_storage_count_r[1]),
        .SR(sideband_output_i_n_1),
        .SRC_RDY_N(SRC_RDY_N),
        .SRC_RDY_N_reg_0(\STORAGE_DATA_reg[31] ),
        .end_storage_r0(end_storage_r0),
        .excess_c(excess_c),
        .stage_2_end_before_start_r(stage_2_end_before_start_r),
        .stage_2_frame_err_r(stage_2_frame_err_r),
        .stage_2_pad_r(stage_2_pad_r),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .start_rx_i(start_rx_i));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[0]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[0]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [7]),
        .Q(\stage_1_data_r_reg[0]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[10]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[10]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [5]),
        .Q(\stage_1_data_r_reg[10]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[11]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[11]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [4]),
        .Q(\stage_1_data_r_reg[11]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[12]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[12]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [3]),
        .Q(\stage_1_data_r_reg[12]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[13]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[13]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [2]),
        .Q(\stage_1_data_r_reg[13]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[14]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[14]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [1]),
        .Q(\stage_1_data_r_reg[14]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[15]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[15]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [0]),
        .Q(\stage_1_data_r_reg[15]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[16]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[16]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [7]),
        .Q(\stage_1_data_r_reg[16]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[17]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[17]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [6]),
        .Q(\stage_1_data_r_reg[17]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[18]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[18]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [5]),
        .Q(\stage_1_data_r_reg[18]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[19]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[19]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [4]),
        .Q(\stage_1_data_r_reg[19]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[1]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[1]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [6]),
        .Q(\stage_1_data_r_reg[1]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[20]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[20]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [3]),
        .Q(\stage_1_data_r_reg[20]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[21]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[21]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [2]),
        .Q(\stage_1_data_r_reg[21]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[22]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[22]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [1]),
        .Q(\stage_1_data_r_reg[22]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[23]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[23]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[16]_0 [0]),
        .Q(\stage_1_data_r_reg[23]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[24]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[24]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [7]),
        .Q(\stage_1_data_r_reg[24]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[25]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[25]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [6]),
        .Q(\stage_1_data_r_reg[25]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[26]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[26]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [5]),
        .Q(\stage_1_data_r_reg[26]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[27]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[27]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [4]),
        .Q(\stage_1_data_r_reg[27]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[28]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[28]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [3]),
        .Q(\stage_1_data_r_reg[28]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[29]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[29]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [2]),
        .Q(\stage_1_data_r_reg[29]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[2]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[2]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [5]),
        .Q(\stage_1_data_r_reg[2]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[30]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[30]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [1]),
        .Q(\stage_1_data_r_reg[30]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[31]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[31]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[24]_0 [0]),
        .Q(\stage_1_data_r_reg[31]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[3]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [4]),
        .Q(\stage_1_data_r_reg[3]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[4]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[4]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [3]),
        .Q(\stage_1_data_r_reg[4]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[5]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[5]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [2]),
        .Q(\stage_1_data_r_reg[5]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[6]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[6]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [1]),
        .Q(\stage_1_data_r_reg[6]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[7]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[7]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[0]_0 [0]),
        .Q(\stage_1_data_r_reg[7]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[8]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[8]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [7]),
        .Q(\stage_1_data_r_reg[8]_srl3_n_0 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/aurora_8b10b_0_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[9]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[9]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\STORAGE_DATA_reg[31] ),
        .D(\stage_2_data_r_reg[8]_0 [6]),
        .Q(\stage_1_data_r_reg[9]_srl3_n_0 ));
  FDRE \stage_1_ecp_r_reg[0] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_ecp_r_reg[0]_0 [1]),
        .Q(stage_1_ecp_r[0]),
        .R(1'b0));
  FDRE \stage_1_ecp_r_reg[1] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_ecp_r_reg[0]_0 [0]),
        .Q(stage_1_ecp_r[1]),
        .R(1'b0));
  FDRE stage_1_pad_r_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(stage_1_pad_r_reg_0),
        .Q(stage_1_pad_r),
        .R(1'b0));
  top_aurora_0_0_aurora_8b10b_0_RX_LL_DEFRAMER stage_1_rx_ll_deframer_i
       (.\AFTER_SCP_reg[1]_0 (stage_1_rx_ll_deframer_i_n_2),
        .\AFTER_SCP_reg[1]_1 (stage_1_rx_ll_deframer_i_n_3),
        .\AFTER_SCP_reg[1]_2 (stage_1_rx_ll_deframer_i_n_4),
        .D(D),
        .\DEFRAMED_DATA_V_reg[0]_0 (\DEFRAMED_DATA_V_reg[0] ),
        .\DEFRAMED_DATA_V_reg[1]_0 ({count_c[0],count_c[1]}),
        .\IN_FRAME_reg[0]_0 (\STORAGE_DATA_reg[31] ),
        .\IN_FRAME_reg[1]_0 (\IN_FRAME_reg[1] ),
        .Q({stage_1_ecp_r[0],stage_1_ecp_r[1]}),
        .SR(SR),
        .after_scp_select_c_0(after_scp_select_c_0),
        .after_scp_select_c_1(after_scp_select_c_1),
        .in_frame_r_reg_0(in_frame_r_reg),
        .mux_select_c(mux_select_c),
        .\stage_1_ecp_r_reg[0] (stage_1_rx_ll_deframer_i_n_0),
        .stage_2_frame_err_r_reg({stage_1_scp_r[0],stage_1_scp_r[1]}));
  FDRE \stage_1_scp_r_reg[0] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(D[1]),
        .Q(stage_1_scp_r[0]),
        .R(1'b0));
  FDRE \stage_1_scp_r_reg[1] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(D[0]),
        .Q(stage_1_scp_r[1]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[0] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[0]_srl3_n_0 ),
        .Q(stage_2_data_r[0]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[10] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[10]_srl3_n_0 ),
        .Q(stage_2_data_r[10]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[11] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[11]_srl3_n_0 ),
        .Q(stage_2_data_r[11]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[12] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[12]_srl3_n_0 ),
        .Q(stage_2_data_r[12]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[13] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[13]_srl3_n_0 ),
        .Q(stage_2_data_r[13]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[14] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[14]_srl3_n_0 ),
        .Q(stage_2_data_r[14]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[15] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[15]_srl3_n_0 ),
        .Q(stage_2_data_r[15]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[16] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[16]_srl3_n_0 ),
        .Q(stage_2_data_r[16]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[17] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[17]_srl3_n_0 ),
        .Q(stage_2_data_r[17]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[18] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[18]_srl3_n_0 ),
        .Q(stage_2_data_r[18]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[19] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[19]_srl3_n_0 ),
        .Q(stage_2_data_r[19]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[1] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[1]_srl3_n_0 ),
        .Q(stage_2_data_r[1]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[20] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[20]_srl3_n_0 ),
        .Q(stage_2_data_r[20]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[21] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[21]_srl3_n_0 ),
        .Q(stage_2_data_r[21]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[22] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[22]_srl3_n_0 ),
        .Q(stage_2_data_r[22]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[23] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[23]_srl3_n_0 ),
        .Q(stage_2_data_r[23]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[24] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[24]_srl3_n_0 ),
        .Q(stage_2_data_r[24]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[25] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[25]_srl3_n_0 ),
        .Q(stage_2_data_r[25]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[26] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[26]_srl3_n_0 ),
        .Q(stage_2_data_r[26]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[27] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[27]_srl3_n_0 ),
        .Q(stage_2_data_r[27]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[28] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[28]_srl3_n_0 ),
        .Q(stage_2_data_r[28]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[29] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[29]_srl3_n_0 ),
        .Q(stage_2_data_r[29]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[2] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[2]_srl3_n_0 ),
        .Q(stage_2_data_r[2]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[30] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[30]_srl3_n_0 ),
        .Q(stage_2_data_r[30]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[31] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[31]_srl3_n_0 ),
        .Q(stage_2_data_r[31]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[3] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[3]_srl3_n_0 ),
        .Q(stage_2_data_r[3]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[4] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[4]_srl3_n_0 ),
        .Q(stage_2_data_r[4]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[5] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[5]_srl3_n_0 ),
        .Q(stage_2_data_r[5]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[6] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[6]_srl3_n_0 ),
        .Q(stage_2_data_r[6]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[7] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[7]_srl3_n_0 ),
        .Q(stage_2_data_r[7]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[8] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[8]_srl3_n_0 ),
        .Q(stage_2_data_r[8]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[9] 
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[9]_srl3_n_0 ),
        .Q(stage_2_data_r[9]),
        .R(1'b0));
  FDRE stage_2_end_after_start_r_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_4),
        .Q(stage_2_end_after_start_r),
        .R(SR));
  FDRE stage_2_end_before_start_r_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_3),
        .Q(stage_2_end_before_start_r),
        .R(SR));
  FDRE stage_2_frame_err_r_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_0),
        .Q(stage_2_frame_err_r),
        .R(SR));
  top_aurora_0_0_aurora_8b10b_0_LEFT_ALIGN_CONTROL stage_2_left_align_control_i
       (.MUX_SELECT(MUX_SELECT),
        .\MUX_SELECT_reg[2]_0 (\STORAGE_DATA_reg[31] ),
        .mux_select_c(mux_select_c));
  FDRE stage_2_pad_r_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(stage_1_pad_r),
        .Q(stage_2_pad_r),
        .R(1'b0));
  FDRE stage_2_start_with_data_r_reg
       (.C(\STORAGE_DATA_reg[31] ),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_2),
        .Q(stage_2_start_with_data_r),
        .R(SR));
  top_aurora_0_0_aurora_8b10b_0_VALID_DATA_COUNTER stage_2_valid_data_counter_i
       (.\COUNT_reg[0]_0 ({count_c[0],count_c[1]}),
        .\COUNT_reg[0]_1 (\STORAGE_DATA_reg[31] ),
        .D({ce_command_c[0],ce_command_c[1]}),
        .FRAME_ERR_RESULT0(FRAME_ERR_RESULT0),
        .Q({stage_2_data_v_count_r[0],stage_2_data_v_count_r[1]}),
        .SR(SR),
        .\STORAGE_CE_reg[0] ({stage_3_storage_count_r[0],stage_3_storage_count_r[1]}),
        .end_storage_r0(end_storage_r0),
        .end_storage_r_reg(storage_count_c[0]),
        .excess_c(excess_c),
        .stage_2_end_after_start_r(stage_2_end_after_start_r),
        .stage_2_end_before_start_r(stage_2_end_before_start_r),
        .stage_2_frame_err_r(stage_2_frame_err_r),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .storage_not_empty_c__0(storage_not_empty_c__0));
  top_aurora_0_0_aurora_8b10b_0_LEFT_ALIGN_MUX stage_3_left_align_datapath_mux_i
       (.\MUXED_DATA_reg[0]_0 (\MUXED_DATA_reg[0] ),
        .\MUXED_DATA_reg[0]_1 (\STORAGE_DATA_reg[31] ),
        .MUX_SELECT(MUX_SELECT),
        .stage_2_data_r(stage_2_data_r));
  top_aurora_0_0_aurora_8b10b_0_OUTPUT_SWITCH_CONTROL stage_3_output_switch_control_i
       (.OUTPUT_SELECT(OUTPUT_SELECT),
        .\OUTPUT_SELECT_reg[9]_0 (\STORAGE_DATA_reg[31] ),
        .output_select_c(output_select_c));
  top_aurora_0_0_aurora_8b10b_0_STORAGE_CE_CONTROL stage_3_storage_ce_control_i
       (.D({ce_command_c[0],ce_command_c[1]}),
        .Q({p_0_in0,stage_3_storage_ce_control_i_n_1}),
        .SR(SR),
        .\STORAGE_CE_reg[1]_0 (\STORAGE_DATA_reg[31] ));
  top_aurora_0_0_aurora_8b10b_0_STORAGE_COUNT_CONTROL stage_3_storage_count_control_i
       (.D({storage_count_c[0],storage_count_c[1]}),
        .\OUTPUT_SELECT_reg[9] ({stage_2_data_v_count_r[0],stage_2_data_v_count_r[1]}),
        .Q({stage_3_storage_count_r[0],stage_3_storage_count_r[1]}),
        .SR(sideband_output_i_n_1),
        .end_storage_r_reg(stage_3_storage_count_control_i_n_3),
        .output_select_c(output_select_c),
        .stage_2_end_before_start_r(stage_2_end_before_start_r),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .\storage_count_r_reg[1]_0 (\STORAGE_DATA_reg[31] ),
        .storage_not_empty_c__0(storage_not_empty_c__0));
  top_aurora_0_0_aurora_8b10b_0_STORAGE_SWITCH_CONTROL stage_3_storage_switch_control_i
       (.Q({stage_3_storage_count_r[0],stage_3_storage_count_r[1]}),
        .STORAGE_SELECT(STORAGE_SELECT),
        .\STORAGE_SELECT_reg[4]_0 (\STORAGE_DATA_reg[31] ),
        .\STORAGE_SELECT_reg[9]_0 ({stage_2_data_v_count_r[0],stage_2_data_v_count_r[1]}),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r));
  top_aurora_0_0_aurora_8b10b_0_STORAGE_MUX stage_4_storage_mux_i
       (.E({p_0_in0,stage_3_storage_ce_control_i_n_1}),
        .Q({}),
        .\STORAGE_DATA_reg[0]_0 (\STORAGE_DATA_reg[0] ),
        .\STORAGE_DATA_reg[31]_0 (\STORAGE_DATA_reg[31] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_SIDEBAND_OUTPUT" *) 
module top_aurora_0_0_aurora_8b10b_0_SIDEBAND_OUTPUT
   (stage_3_end_storage_r,
    SR,
    SRC_RDY_N,
    EOF_N,
    FRAME_ERR_RESULT,
    D,
    \RX_REM_reg[0]_0 ,
    end_storage_r0,
    SRC_RDY_N_reg_0,
    EOF_N_reg_0,
    FRAME_ERR_RESULT0,
    stage_2_frame_err_r,
    start_rx_i,
    stage_2_start_with_data_r,
    stage_2_pad_r,
    excess_c,
    stage_2_end_before_start_r,
    Q,
    \RX_REM_reg[0]_1 );
  output stage_3_end_storage_r;
  output [0:0]SR;
  output SRC_RDY_N;
  output EOF_N;
  output FRAME_ERR_RESULT;
  output [0:0]D;
  output [1:0]\RX_REM_reg[0]_0 ;
  input end_storage_r0;
  input SRC_RDY_N_reg_0;
  input EOF_N_reg_0;
  input FRAME_ERR_RESULT0;
  input stage_2_frame_err_r;
  input start_rx_i;
  input stage_2_start_with_data_r;
  input stage_2_pad_r;
  input excess_c;
  input stage_2_end_before_start_r;
  input [0:0]Q;
  input [0:0]\RX_REM_reg[0]_1 ;

  wire [0:0]D;
  wire EOF_N;
  wire EOF_N_reg_0;
  wire FRAME_ERR_RESULT;
  wire FRAME_ERR_RESULT0;
  wire [0:0]Q;
  wire [1:0]\RX_REM_reg[0]_0 ;
  wire [0:0]\RX_REM_reg[0]_1 ;
  wire [0:0]SR;
  wire SRC_RDY_N;
  wire SRC_RDY_N_i_1_n_0;
  wire SRC_RDY_N_reg_0;
  wire end_storage_r0;
  wire excess_c;
  wire pad_storage_r;
  wire pad_storage_r_i_1_n_0;
  wire [1:0]rx_rem_c;
  wire stage_2_end_before_start_r;
  wire stage_2_frame_err_r;
  wire stage_2_pad_r;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire start_rx_i;

  FDRE EOF_N_reg
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(EOF_N_reg_0),
        .Q(EOF_N),
        .R(1'b0));
  FDRE FRAME_ERR_RESULT_reg
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(FRAME_ERR_RESULT0),
        .Q(FRAME_ERR_RESULT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'h10EF)) 
    \RX_REM[0]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(Q),
        .I3(\RX_REM_reg[0]_1 ),
        .O(rx_rem_c[1]));
  LUT4 #(
    .INIT(16'h0E0F)) 
    \RX_REM[1]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(pad_storage_r),
        .I3(stage_2_pad_r),
        .O(rx_rem_c[0]));
  FDRE \RX_REM_reg[0] 
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(rx_rem_c[1]),
        .Q(\RX_REM_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \RX_REM_reg[1] 
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(rx_rem_c[0]),
        .Q(\RX_REM_reg[0]_0 [0]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0145)) 
    SRC_RDY_N_i_1
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(excess_c),
        .I3(stage_2_end_before_start_r),
        .O(SRC_RDY_N_i_1_n_0));
  FDSE SRC_RDY_N_reg
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(SRC_RDY_N_i_1_n_0),
        .Q(SRC_RDY_N),
        .S(SR));
  FDRE end_storage_r_reg
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(end_storage_r0),
        .Q(stage_3_end_storage_r),
        .R(SR));
  LUT6 #(
    .INIT(64'hAAABBABBAAAAAAAA)) 
    pad_storage_r_i_1
       (.I0(stage_2_pad_r),
        .I1(stage_3_end_storage_r),
        .I2(stage_2_start_with_data_r),
        .I3(excess_c),
        .I4(stage_2_end_before_start_r),
        .I5(pad_storage_r),
        .O(pad_storage_r_i_1_n_0));
  FDRE pad_storage_r_reg
       (.C(SRC_RDY_N_reg_0),
        .CE(1'b1),
        .D(pad_storage_r_i_1_n_0),
        .Q(pad_storage_r),
        .R(SR));
  LUT2 #(
    .INIT(4'hB)) 
    \storage_count_r[0]_i_1 
       (.I0(stage_2_frame_err_r),
        .I1(start_rx_i),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'hE1F0)) 
    \storage_count_r[1]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(Q),
        .I3(\RX_REM_reg[0]_1 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_STANDARD_CC_MODULE" *) 
module top_aurora_0_0_aurora_8b10b_0_STANDARD_CC_MODULE
   (Q,
    SR,
    \prepare_count_r_reg[9]_0 );
  output Q;
  input [0:0]SR;
  input \prepare_count_r_reg[9]_0 ;

  wire DO_CC_i_1_n_0;
  wire Q;
  wire [0:0]SR;
  wire \cc_count_r_reg_n_0_[5] ;
  wire cc_idle_count_done_c;
  wire count_13d_flop_r_reg_r_n_0;
  wire \count_13d_srl_r_reg[10]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_9_n_0 ;
  wire \count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1_n_0 ;
  wire \count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_n_0 ;
  wire count_13d_srl_r_reg_gate_n_0;
  wire count_13d_srl_r_reg_r_0_n_0;
  wire count_13d_srl_r_reg_r_1_n_0;
  wire count_13d_srl_r_reg_r_2_n_0;
  wire count_13d_srl_r_reg_r_3_n_0;
  wire count_13d_srl_r_reg_r_4_n_0;
  wire count_13d_srl_r_reg_r_5_n_0;
  wire count_13d_srl_r_reg_r_6_n_0;
  wire count_13d_srl_r_reg_r_7_n_0;
  wire count_13d_srl_r_reg_r_8_n_0;
  wire count_13d_srl_r_reg_r_9_n_0;
  wire count_13d_srl_r_reg_r_n_0;
  wire count_16d_flop_r;
  wire count_16d_flop_r_i_1_n_0;
  wire count_16d_srl_r0;
  wire \count_16d_srl_r_reg_n_0_[0] ;
  wire \count_16d_srl_r_reg_n_0_[10] ;
  wire \count_16d_srl_r_reg_n_0_[11] ;
  wire \count_16d_srl_r_reg_n_0_[12] ;
  wire \count_16d_srl_r_reg_n_0_[13] ;
  wire \count_16d_srl_r_reg_n_0_[14] ;
  wire \count_16d_srl_r_reg_n_0_[1] ;
  wire \count_16d_srl_r_reg_n_0_[2] ;
  wire \count_16d_srl_r_reg_n_0_[3] ;
  wire \count_16d_srl_r_reg_n_0_[4] ;
  wire \count_16d_srl_r_reg_n_0_[5] ;
  wire \count_16d_srl_r_reg_n_0_[6] ;
  wire \count_16d_srl_r_reg_n_0_[7] ;
  wire \count_16d_srl_r_reg_n_0_[8] ;
  wire \count_16d_srl_r_reg_n_0_[9] ;
  wire count_24d_flop_r;
  wire count_24d_flop_r_i_1_n_0;
  wire count_24d_srl_r0;
  wire \count_24d_srl_r_reg_n_0_[0] ;
  wire \count_24d_srl_r_reg_n_0_[10] ;
  wire \count_24d_srl_r_reg_n_0_[1] ;
  wire \count_24d_srl_r_reg_n_0_[2] ;
  wire \count_24d_srl_r_reg_n_0_[3] ;
  wire \count_24d_srl_r_reg_n_0_[4] ;
  wire \count_24d_srl_r_reg_n_0_[5] ;
  wire \count_24d_srl_r_reg_n_0_[6] ;
  wire \count_24d_srl_r_reg_n_0_[7] ;
  wire \count_24d_srl_r_reg_n_0_[8] ;
  wire \count_24d_srl_r_reg_n_0_[9] ;
  wire [1:0]p_2_in;
  wire [2:2]p_3_out;
  wire \prepare_count_r_reg[7]_srl4___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_1_n_0 ;
  wire \prepare_count_r_reg[8]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_2_n_0 ;
  wire \prepare_count_r_reg[9]_0 ;
  wire prepare_count_r_reg_gate_n_0;
  wire reset_r;

  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    DO_CC_i_1
       (.I0(p_2_in[1]),
        .I1(\cc_count_r_reg_n_0_[5] ),
        .I2(p_2_in[0]),
        .I3(reset_r),
        .I4(p_3_out),
        .O(DO_CC_i_1_n_0));
  FDRE DO_CC_reg
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(DO_CC_i_1_n_0),
        .Q(Q),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cc_count_r_reg[3] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(p_3_out),
        .Q(p_2_in[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cc_count_r_reg[4] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(p_2_in[1]),
        .Q(p_2_in[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \cc_count_r_reg[5] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(p_2_in[0]),
        .Q(\cc_count_r_reg_n_0_[5] ),
        .R(SR));
  FDRE count_13d_flop_r_reg_r
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(1'b1),
        .Q(count_13d_flop_r_reg_r_n_0),
        .R(SR));
  FDRE \count_13d_srl_r_reg[10]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_9 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(\count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_n_0 ),
        .Q(\count_13d_srl_r_reg[10]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_9_n_0 ),
        .R(1'b0));
  FDRE \count_13d_srl_r_reg[11] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_gate_n_0),
        .Q(count_16d_srl_r0),
        .R(SR));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/standard_cc_module_i/count_13d_srl_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/standard_cc_module_i/count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8 " *) 
  SRL16E \count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(\prepare_count_r_reg[9]_0 ),
        .D(\count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1_n_0 ),
        .Q(\count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1 
       (.I0(count_16d_srl_r0),
        .I1(reset_r),
        .O(\count_13d_srl_r_reg[9]_srl11___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    count_13d_srl_r_reg_gate
       (.I0(\count_13d_srl_r_reg[10]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_9_n_0 ),
        .I1(count_13d_srl_r_reg_r_9_n_0),
        .O(count_13d_srl_r_reg_gate_n_0));
  FDRE count_13d_srl_r_reg_r
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_flop_r_reg_r_n_0),
        .Q(count_13d_srl_r_reg_r_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_0
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_n_0),
        .Q(count_13d_srl_r_reg_r_0_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_1
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_0_n_0),
        .Q(count_13d_srl_r_reg_r_1_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_2
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_1_n_0),
        .Q(count_13d_srl_r_reg_r_2_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_3
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_2_n_0),
        .Q(count_13d_srl_r_reg_r_3_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_4
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_3_n_0),
        .Q(count_13d_srl_r_reg_r_4_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_5
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_4_n_0),
        .Q(count_13d_srl_r_reg_r_5_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_6
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_5_n_0),
        .Q(count_13d_srl_r_reg_r_6_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_7
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_6_n_0),
        .Q(count_13d_srl_r_reg_r_7_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_8
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_7_n_0),
        .Q(count_13d_srl_r_reg_r_8_n_0),
        .R(SR));
  FDRE count_13d_srl_r_reg_r_9
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_8_n_0),
        .Q(count_13d_srl_r_reg_r_9_n_0),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'hFBF8)) 
    count_16d_flop_r_i_1
       (.I0(\count_16d_srl_r_reg_n_0_[14] ),
        .I1(count_16d_srl_r0),
        .I2(reset_r),
        .I3(count_16d_flop_r),
        .O(count_16d_flop_r_i_1_n_0));
  FDRE count_16d_flop_r_reg
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_16d_flop_r_i_1_n_0),
        .Q(count_16d_flop_r),
        .R(SR));
  FDRE \count_16d_srl_r_reg[0] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(count_16d_flop_r),
        .Q(\count_16d_srl_r_reg_n_0_[0] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[10] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[9] ),
        .Q(\count_16d_srl_r_reg_n_0_[10] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[11] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[10] ),
        .Q(\count_16d_srl_r_reg_n_0_[11] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[12] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[11] ),
        .Q(\count_16d_srl_r_reg_n_0_[12] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[13] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[12] ),
        .Q(\count_16d_srl_r_reg_n_0_[13] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[14] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[13] ),
        .Q(\count_16d_srl_r_reg_n_0_[14] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[1] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[0] ),
        .Q(\count_16d_srl_r_reg_n_0_[1] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[2] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[1] ),
        .Q(\count_16d_srl_r_reg_n_0_[2] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[3] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[2] ),
        .Q(\count_16d_srl_r_reg_n_0_[3] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[4] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[3] ),
        .Q(\count_16d_srl_r_reg_n_0_[4] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[5] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[4] ),
        .Q(\count_16d_srl_r_reg_n_0_[5] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[6] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[5] ),
        .Q(\count_16d_srl_r_reg_n_0_[6] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[7] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[6] ),
        .Q(\count_16d_srl_r_reg_n_0_[7] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[8] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[7] ),
        .Q(\count_16d_srl_r_reg_n_0_[8] ),
        .R(SR));
  FDRE \count_16d_srl_r_reg[9] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_16d_srl_r0),
        .D(\count_16d_srl_r_reg_n_0_[8] ),
        .Q(\count_16d_srl_r_reg_n_0_[9] ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    count_24d_flop_r_i_1
       (.I0(\count_24d_srl_r_reg_n_0_[10] ),
        .I1(\count_16d_srl_r_reg_n_0_[14] ),
        .I2(count_16d_srl_r0),
        .I3(reset_r),
        .I4(count_24d_flop_r),
        .O(count_24d_flop_r_i_1_n_0));
  FDRE count_24d_flop_r_reg
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(count_24d_flop_r_i_1_n_0),
        .Q(count_24d_flop_r),
        .R(SR));
  LUT2 #(
    .INIT(4'h8)) 
    \count_24d_srl_r[0]_i_1 
       (.I0(\count_16d_srl_r_reg_n_0_[14] ),
        .I1(count_16d_srl_r0),
        .O(count_24d_srl_r0));
  FDRE \count_24d_srl_r_reg[0] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(count_24d_flop_r),
        .Q(\count_24d_srl_r_reg_n_0_[0] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[10] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[9] ),
        .Q(\count_24d_srl_r_reg_n_0_[10] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[1] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[0] ),
        .Q(\count_24d_srl_r_reg_n_0_[1] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[2] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[1] ),
        .Q(\count_24d_srl_r_reg_n_0_[2] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[3] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[2] ),
        .Q(\count_24d_srl_r_reg_n_0_[3] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[4] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[3] ),
        .Q(\count_24d_srl_r_reg_n_0_[4] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[5] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[4] ),
        .Q(\count_24d_srl_r_reg_n_0_[5] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[6] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[5] ),
        .Q(\count_24d_srl_r_reg_n_0_[6] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[7] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[6] ),
        .Q(\count_24d_srl_r_reg_n_0_[7] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[8] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[7] ),
        .Q(\count_24d_srl_r_reg_n_0_[8] ),
        .R(SR));
  FDRE \count_24d_srl_r_reg[9] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(count_24d_srl_r0),
        .D(\count_24d_srl_r_reg_n_0_[8] ),
        .Q(\count_24d_srl_r_reg_n_0_[9] ),
        .R(SR));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/standard_cc_module_i/prepare_count_r_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/standard_cc_module_i/prepare_count_r_reg[7]_srl4___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_1 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \prepare_count_r_reg[7]_srl4___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(\prepare_count_r_reg[9]_0 ),
        .D(cc_idle_count_done_c),
        .Q(\prepare_count_r_reg[7]_srl4___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \prepare_count_r_reg[7]_srl4___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_1_i_1 
       (.I0(\count_24d_srl_r_reg_n_0_[10] ),
        .I1(\count_16d_srl_r_reg_n_0_[14] ),
        .I2(count_16d_srl_r0),
        .O(cc_idle_count_done_c));
  FDRE \prepare_count_r_reg[8]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_2 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(\prepare_count_r_reg[7]_srl4___aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_1_n_0 ),
        .Q(\prepare_count_r_reg[8]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_2_n_0 ),
        .R(1'b0));
  FDRE \prepare_count_r_reg[9] 
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(prepare_count_r_reg_gate_n_0),
        .Q(p_3_out),
        .R(SR));
  LUT2 #(
    .INIT(4'h8)) 
    prepare_count_r_reg_gate
       (.I0(\prepare_count_r_reg[8]_aurora_8b10b_0_core_i_standard_cc_module_i_count_13d_srl_r_reg_r_2_n_0 ),
        .I1(count_13d_srl_r_reg_r_2_n_0),
        .O(prepare_count_r_reg_gate_n_0));
  FDRE reset_r_reg
       (.C(\prepare_count_r_reg[9]_0 ),
        .CE(1'b1),
        .D(SR),
        .Q(reset_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_STORAGE_CE_CONTROL" *) 
module top_aurora_0_0_aurora_8b10b_0_STORAGE_CE_CONTROL
   (Q,
    SR,
    D,
    \STORAGE_CE_reg[1]_0 );
  output [1:0]Q;
  input [0:0]SR;
  input [1:0]D;
  input \STORAGE_CE_reg[1]_0 ;

  wire [1:0]D;
  wire [1:0]Q;
  wire [0:0]SR;
  wire \STORAGE_CE_reg[1]_0 ;

  FDRE \STORAGE_CE_reg[0] 
       (.C(\STORAGE_CE_reg[1]_0 ),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \STORAGE_CE_reg[1] 
       (.C(\STORAGE_CE_reg[1]_0 ),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_STORAGE_COUNT_CONTROL" *) 
module top_aurora_0_0_aurora_8b10b_0_STORAGE_COUNT_CONTROL
   (output_select_c,
    Q,
    end_storage_r_reg,
    storage_not_empty_c__0,
    stage_3_end_storage_r,
    stage_2_start_with_data_r,
    \OUTPUT_SELECT_reg[9] ,
    stage_2_end_before_start_r,
    SR,
    D,
    \storage_count_r_reg[1]_0 );
  output [0:0]output_select_c;
  output [1:0]Q;
  output end_storage_r_reg;
  output storage_not_empty_c__0;
  input stage_3_end_storage_r;
  input stage_2_start_with_data_r;
  input [1:0]\OUTPUT_SELECT_reg[9] ;
  input stage_2_end_before_start_r;
  input [0:0]SR;
  input [1:0]D;
  input \storage_count_r_reg[1]_0 ;

  wire [1:0]D;
  wire [1:0]\OUTPUT_SELECT_reg[9] ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire end_storage_r_reg;
  wire [0:0]output_select_c;
  wire stage_2_end_before_start_r;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire \storage_count_r_reg[1]_0 ;
  wire storage_not_empty_c__0;

  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h01555555)) 
    EOF_N_i_1
       (.I0(stage_3_end_storage_r),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(stage_2_end_before_start_r),
        .I4(stage_2_start_with_data_r),
        .O(end_storage_r_reg));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'hE)) 
    FRAME_ERR_RESULT_i_2
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(storage_not_empty_c__0));
  LUT6 #(
    .INIT(64'h0000010001000100)) 
    \OUTPUT_SELECT[9]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\OUTPUT_SELECT_reg[9] [0]),
        .I5(\OUTPUT_SELECT_reg[9] [1]),
        .O(output_select_c));
  FDRE \storage_count_r_reg[0] 
       (.C(\storage_count_r_reg[1]_0 ),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \storage_count_r_reg[1] 
       (.C(\storage_count_r_reg[1]_0 ),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_STORAGE_MUX" *) 
module top_aurora_0_0_aurora_8b10b_0_STORAGE_MUX
   (Q,
    E,
    \STORAGE_DATA_reg[0]_0 ,
    \STORAGE_DATA_reg[31]_0 );
  output [31:0]Q;
  input [1:0]E;
  input [31:0]\STORAGE_DATA_reg[0]_0 ;
  input \STORAGE_DATA_reg[31]_0 ;

  wire [1:0]E;
  wire [31:0]Q;
  wire [31:0]\STORAGE_DATA_reg[0]_0 ;
  wire \STORAGE_DATA_reg[31]_0 ;

  FDRE \STORAGE_DATA_reg[0] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [31]),
        .Q(Q[31]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[10] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [21]),
        .Q(Q[21]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[11] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [20]),
        .Q(Q[20]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[12] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [19]),
        .Q(Q[19]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[13] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [18]),
        .Q(Q[18]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[14] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [17]),
        .Q(Q[17]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[15] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [16]),
        .Q(Q[16]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[16] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [15]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[17] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [14]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[18] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [13]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[19] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [12]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[1] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [30]),
        .Q(Q[30]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[20] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [11]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[21] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [10]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[22] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [9]),
        .Q(Q[9]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[23] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [8]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[24] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [7]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[25] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [6]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[26] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [5]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[27] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [4]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[28] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [3]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[29] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[2] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [29]),
        .Q(Q[29]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[30] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[31] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[0]),
        .D(\STORAGE_DATA_reg[0]_0 [0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[3] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [28]),
        .Q(Q[28]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[4] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [27]),
        .Q(Q[27]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[5] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [26]),
        .Q(Q[26]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[6] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [25]),
        .Q(Q[25]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[7] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [24]),
        .Q(Q[24]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[8] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [23]),
        .Q(Q[23]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[9] 
       (.C(\STORAGE_DATA_reg[31]_0 ),
        .CE(E[1]),
        .D(\STORAGE_DATA_reg[0]_0 [22]),
        .Q(Q[22]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_STORAGE_SWITCH_CONTROL" *) 
module top_aurora_0_0_aurora_8b10b_0_STORAGE_SWITCH_CONTROL
   (STORAGE_SELECT,
    Q,
    \STORAGE_SELECT_reg[9]_0 ,
    stage_2_start_with_data_r,
    stage_3_end_storage_r,
    \STORAGE_SELECT_reg[4]_0 );
  output [1:0]STORAGE_SELECT;
  input [1:0]Q;
  input [1:0]\STORAGE_SELECT_reg[9]_0 ;
  input stage_2_start_with_data_r;
  input stage_3_end_storage_r;
  input \STORAGE_SELECT_reg[4]_0 ;

  wire [1:0]Q;
  wire [1:0]STORAGE_SELECT;
  wire \STORAGE_SELECT[4]_i_1_n_0 ;
  wire \STORAGE_SELECT[9]_i_1_n_0 ;
  wire \STORAGE_SELECT_reg[4]_0 ;
  wire [1:0]\STORAGE_SELECT_reg[9]_0 ;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;

  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \STORAGE_SELECT[4]_i_1 
       (.I0(Q[0]),
        .I1(\STORAGE_SELECT_reg[9]_0 [1]),
        .I2(Q[1]),
        .I3(\STORAGE_SELECT_reg[9]_0 [0]),
        .I4(stage_2_start_with_data_r),
        .I5(stage_3_end_storage_r),
        .O(\STORAGE_SELECT[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF14)) 
    \STORAGE_SELECT[9]_i_1 
       (.I0(Q[0]),
        .I1(\STORAGE_SELECT_reg[9]_0 [0]),
        .I2(\STORAGE_SELECT_reg[9]_0 [1]),
        .I3(stage_2_start_with_data_r),
        .I4(stage_3_end_storage_r),
        .O(\STORAGE_SELECT[9]_i_1_n_0 ));
  FDRE \STORAGE_SELECT_reg[4] 
       (.C(\STORAGE_SELECT_reg[4]_0 ),
        .CE(1'b1),
        .D(\STORAGE_SELECT[4]_i_1_n_0 ),
        .Q(STORAGE_SELECT[1]),
        .R(1'b0));
  FDRE \STORAGE_SELECT_reg[9] 
       (.C(\STORAGE_SELECT_reg[4]_0 ),
        .CE(1'b1),
        .D(\STORAGE_SELECT[9]_i_1_n_0 ),
        .Q(STORAGE_SELECT[0]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_SUPPORT_RESET_LOGIC" *) 
module top_aurora_0_0_aurora_8b10b_0_SUPPORT_RESET_LOGIC
   (gt_reset_out,
    in0,
    init_clk_in,
    s_level_out_d6_reg,
    D,
    \debounce_gt_rst_r_reg[0]_0 );
  output gt_reset_out;
  output in0;
  input init_clk_in;
  input s_level_out_d6_reg;
  input [0:0]D;
  input [0:0]\debounce_gt_rst_r_reg[0]_0 ;

  wire [0:0]D;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [0:3]debounce_gt_rst_r;
  wire [0:0]\debounce_gt_rst_r_reg[0]_0 ;
  wire gt_reset_out;
  wire gt_rst_r0_n_0;
  wire gt_rst_sync;
  wire in0;
  wire init_clk_in;
  wire [0:3]reset_debounce_r;
  wire reset_debounce_r20_n_0;
  wire s_level_out_d6_reg;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\debounce_gt_rst_r_reg[0]_0 ),
        .Q(debounce_gt_rst_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[1] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(debounce_gt_rst_r[0]),
        .Q(debounce_gt_rst_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[2] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(debounce_gt_rst_r[1]),
        .Q(debounce_gt_rst_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[3] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(debounce_gt_rst_r[2]),
        .Q(debounce_gt_rst_r[3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8000)) 
    gt_rst_r0
       (.I0(debounce_gt_rst_r[2]),
        .I1(debounce_gt_rst_r[3]),
        .I2(debounce_gt_rst_r[0]),
        .I3(debounce_gt_rst_r[1]),
        .O(gt_rst_r0_n_0));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0 gt_rst_r_cdc_sync
       (.AS(gt_rst_sync),
        .gt_reset_out(gt_reset_out),
        .init_clk_in(init_clk_in),
        .s_level_out_d6_reg_0(s_level_out_d6_reg));
  FDRE gt_rst_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gt_rst_r0_n_0),
        .Q(gt_reset_out),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8000)) 
    reset_debounce_r20
       (.I0(reset_debounce_r[2]),
        .I1(reset_debounce_r[3]),
        .I2(reset_debounce_r[0]),
        .I3(reset_debounce_r[1]),
        .O(reset_debounce_r20_n_0));
  FDRE #(
    .INIT(1'b1)) 
    reset_debounce_r2_reg
       (.C(s_level_out_d6_reg),
        .CE(1'b1),
        .D(reset_debounce_r20_n_0),
        .Q(in0),
        .R(1'b0));
  FDPE #(
    .INIT(1'b0)) 
    \reset_debounce_r_reg[0] 
       (.C(s_level_out_d6_reg),
        .CE(1'b1),
        .D(D),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[0]));
  FDPE #(
    .INIT(1'b0)) 
    \reset_debounce_r_reg[1] 
       (.C(s_level_out_d6_reg),
        .CE(1'b1),
        .D(reset_debounce_r[0]),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[1]));
  FDPE #(
    .INIT(1'b0)) 
    \reset_debounce_r_reg[2] 
       (.C(s_level_out_d6_reg),
        .CE(1'b1),
        .D(reset_debounce_r[1]),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[2]));
  FDPE #(
    .INIT(1'b0)) 
    \reset_debounce_r_reg[3] 
       (.C(s_level_out_d6_reg),
        .CE(1'b1),
        .D(reset_debounce_r[2]),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[3]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_SYM_DEC_4BYTE" *) 
module top_aurora_0_0_aurora_8b10b_0_SYM_DEC_4BYTE
   (RX_NEG,
    \left_align_select_r_reg[0]_0 ,
    \left_align_select_r_reg[1]_0 ,
    got_v_i,
    D,
    first_v_received_r,
    \RX_ECP_reg[1]_0 ,
    Q,
    \RX_SCP_reg[0]_0 ,
    \RX_ECP_reg[0]_0 ,
    \RX_PAD_reg[1]_0 ,
    counter4_r0,
    counter3_r0,
    \previous_cycle_data_r_reg[7]_0 ,
    \previous_cycle_control_r_reg[0]_0 ,
    \word_aligned_data_r_reg[24]_0 ,
    \word_aligned_data_r_reg[16]_0 ,
    \word_aligned_data_r_reg[8]_0 ,
    \word_aligned_data_r_reg[0]_0 ,
    \RX_PE_DATA_V_reg[0]_0 ,
    after_scp_select_c_0,
    after_scp_select_c_1,
    \rx_cc_r_reg[1]_0 ,
    \left_align_select_r_reg[0]_1 ,
    \left_align_select_r_reg[1]_1 ,
    \word_aligned_control_bits_r_reg[3]_0 ,
    \word_aligned_control_bits_r_reg[2]_0 ,
    lane_up,
    ready_r,
    gen_spa_i,
    RXDATA,
    RXCHARISK,
    \word_aligned_data_r_reg[24]_1 ,
    \word_aligned_data_r_reg[16]_1 );
  output RX_NEG;
  output \left_align_select_r_reg[0]_0 ;
  output \left_align_select_r_reg[1]_0 ;
  output got_v_i;
  output [0:0]D;
  output first_v_received_r;
  output \RX_ECP_reg[1]_0 ;
  output [1:0]Q;
  output [1:0]\RX_SCP_reg[0]_0 ;
  output \RX_ECP_reg[0]_0 ;
  output \RX_PAD_reg[1]_0 ;
  output counter4_r0;
  output counter3_r0;
  output [5:0]\previous_cycle_data_r_reg[7]_0 ;
  output [0:0]\previous_cycle_control_r_reg[0]_0 ;
  output [7:0]\word_aligned_data_r_reg[24]_0 ;
  output [7:0]\word_aligned_data_r_reg[16]_0 ;
  output [7:0]\word_aligned_data_r_reg[8]_0 ;
  output [7:0]\word_aligned_data_r_reg[0]_0 ;
  output [1:0]\RX_PE_DATA_V_reg[0]_0 ;
  output after_scp_select_c_0;
  output after_scp_select_c_1;
  input \rx_cc_r_reg[1]_0 ;
  input \left_align_select_r_reg[0]_1 ;
  input \left_align_select_r_reg[1]_1 ;
  input \word_aligned_control_bits_r_reg[3]_0 ;
  input \word_aligned_control_bits_r_reg[2]_0 ;
  input lane_up;
  input ready_r;
  input gen_spa_i;
  input [31:0]RXDATA;
  input [3:0]RXCHARISK;
  input [7:0]\word_aligned_data_r_reg[24]_1 ;
  input [5:0]\word_aligned_data_r_reg[16]_1 ;

  wire [0:0]D;
  wire GOT_V_i_2_n_0;
  wire [1:0]Q;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA;
  wire RX_CC0;
  wire RX_CC_i_2_n_0;
  wire RX_CC_i_3_n_0;
  wire RX_ECP0;
  wire \RX_ECP[1]_i_1_n_0 ;
  wire \RX_ECP_reg[0]_0 ;
  wire \RX_ECP_reg[1]_0 ;
  wire RX_NEG;
  wire RX_NEG0;
  wire \RX_PAD_reg[1]_0 ;
  wire [1:0]\RX_PE_DATA_V_reg[0]_0 ;
  wire RX_SCP0;
  wire \RX_SCP[1]_i_1_n_0 ;
  wire [1:0]\RX_SCP_reg[0]_0 ;
  wire RX_SP0;
  wire RX_SPA0;
  wire RX_SPA_i_2_n_0;
  wire RX_SP_i_2_n_0;
  wire RX_SP_i_3_n_0;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire counter3_r0;
  wire counter4_r0;
  wire first_v_received_r;
  wire first_v_received_r_i_1_n_0;
  wire gen_spa_i;
  wire got_v_c;
  wire got_v_i;
  wire lane_up;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[0]_1 ;
  wire \left_align_select_r_reg[1]_0 ;
  wire \left_align_select_r_reg[1]_1 ;
  wire [1:0]p_1_out;
  wire [7:0]p_2_in;
  wire [1:0]p_3_out;
  wire [5:0]p_8_out;
  wire [2:1]previous_cycle_control_r;
  wire [0:0]\previous_cycle_control_r_reg[0]_0 ;
  wire [5:0]\previous_cycle_data_r_reg[7]_0 ;
  wire \previous_cycle_data_r_reg_n_0_[16] ;
  wire \previous_cycle_data_r_reg_n_0_[17] ;
  wire \previous_cycle_data_r_reg_n_0_[18] ;
  wire \previous_cycle_data_r_reg_n_0_[19] ;
  wire \previous_cycle_data_r_reg_n_0_[20] ;
  wire \previous_cycle_data_r_reg_n_0_[21] ;
  wire \previous_cycle_data_r_reg_n_0_[22] ;
  wire \previous_cycle_data_r_reg_n_0_[23] ;
  wire \previous_cycle_data_r_reg_n_0_[4] ;
  wire \previous_cycle_data_r_reg_n_0_[5] ;
  wire ready_r;
  wire [1:7]rx_cc_r;
  wire rx_cc_r0__0;
  wire \rx_cc_r0_inferred__0/i__n_0 ;
  wire \rx_cc_r0_inferred__1/i__n_0 ;
  wire rx_cc_r0_n_0;
  wire \rx_cc_r_reg[1]_0 ;
  wire [0:7]rx_ecp_d_r;
  wire rx_ecp_d_r0__0;
  wire \rx_ecp_d_r0_inferred__0/i__n_0 ;
  wire \rx_ecp_d_r0_inferred__1/i__n_0 ;
  wire \rx_ecp_d_r0_inferred__2/i__n_0 ;
  wire \rx_ecp_d_r0_inferred__3/i__n_0 ;
  wire rx_ecp_d_r0_n_0;
  wire [0:2]rx_pad_d_r;
  wire rx_pad_d_r0__0;
  wire \rx_pad_d_r0_inferred__0/i__n_0 ;
  wire \rx_pad_d_r0_inferred__1/i__n_0 ;
  wire rx_pad_d_r0_n_0;
  wire [0:1]rx_pad_striped_i;
  wire [0:3]rx_pe_control_r;
  wire [0:7]rx_scp_d_r;
  wire rx_scp_d_r0__0;
  wire \rx_scp_d_r0_inferred__0/i__n_0 ;
  wire \rx_scp_d_r0_inferred__1/i__n_0 ;
  wire \rx_scp_d_r0_inferred__2/i__n_0 ;
  wire \rx_scp_d_r0_inferred__3/i__n_0 ;
  wire \rx_scp_d_r0_inferred__4/i__n_0 ;
  wire \rx_scp_d_r0_inferred__5/i__n_0 ;
  wire rx_scp_d_r0_n_0;
  wire rx_sp_i;
  wire [0:1]rx_sp_neg_d_r;
  wire [0:7]rx_sp_r;
  wire rx_sp_r0_n_0;
  wire rx_sp_r111_in;
  wire rx_sp_r114_in;
  wire rx_spa_i;
  wire [0:1]rx_spa_neg_d_r;
  wire rx_spa_neg_d_r0__0;
  wire rx_spa_neg_d_r0_n_0;
  wire [2:7]rx_spa_r;
  wire rx_spa_r0__0;
  wire \rx_spa_r0_inferred__0/i__n_0 ;
  wire rx_spa_r0_n_0;
  wire [2:7]rx_v_d_r;
  wire rx_v_d_r0__0;
  wire \rx_v_d_r0_inferred__0/i__n_0 ;
  wire \rx_v_d_r0_inferred__1/i__n_0 ;
  wire \rx_v_d_r0_inferred__2/i__n_0 ;
  wire \rx_v_d_r0_inferred__3/i__n_0 ;
  wire rx_v_d_r0_n_0;
  wire [0:3]word_aligned_control_bits_r;
  wire \word_aligned_control_bits_r[0]_i_1_n_0 ;
  wire \word_aligned_control_bits_r[1]_i_1_n_0 ;
  wire \word_aligned_control_bits_r_reg[2]_0 ;
  wire \word_aligned_control_bits_r_reg[3]_0 ;
  wire \word_aligned_data_r[0]_i_1_n_0 ;
  wire \word_aligned_data_r[10]_i_1_n_0 ;
  wire \word_aligned_data_r[11]_i_1_n_0 ;
  wire \word_aligned_data_r[12]_i_1_n_0 ;
  wire \word_aligned_data_r[13]_i_1_n_0 ;
  wire \word_aligned_data_r[14]_i_1_n_0 ;
  wire \word_aligned_data_r[15]_i_1_n_0 ;
  wire \word_aligned_data_r[18]_i_1_n_0 ;
  wire \word_aligned_data_r[19]_i_1_n_0 ;
  wire \word_aligned_data_r[1]_i_1_n_0 ;
  wire \word_aligned_data_r[2]_i_1_n_0 ;
  wire \word_aligned_data_r[3]_i_1_n_0 ;
  wire \word_aligned_data_r[4]_i_1_n_0 ;
  wire \word_aligned_data_r[5]_i_1_n_0 ;
  wire \word_aligned_data_r[6]_i_1_n_0 ;
  wire \word_aligned_data_r[7]_i_1_n_0 ;
  wire \word_aligned_data_r[8]_i_1_n_0 ;
  wire \word_aligned_data_r[9]_i_1_n_0 ;
  wire [7:0]\word_aligned_data_r_reg[0]_0 ;
  wire [7:0]\word_aligned_data_r_reg[16]_0 ;
  wire [5:0]\word_aligned_data_r_reg[16]_1 ;
  wire [7:0]\word_aligned_data_r_reg[24]_0 ;
  wire [7:0]\word_aligned_data_r_reg[24]_1 ;
  wire [7:0]\word_aligned_data_r_reg[8]_0 ;

  LUT6 #(
    .INIT(64'h2000000000000000)) 
    GOT_V_i_1
       (.I0(RX_SP_i_2_n_0),
        .I1(GOT_V_i_2_n_0),
        .I2(rx_sp_r[0]),
        .I3(rx_sp_r[1]),
        .I4(rx_v_d_r[3]),
        .I5(rx_v_d_r[2]),
        .O(got_v_c));
  LUT4 #(
    .INIT(16'h7FFF)) 
    GOT_V_i_2
       (.I0(rx_v_d_r[5]),
        .I1(rx_v_d_r[4]),
        .I2(rx_v_d_r[7]),
        .I3(rx_v_d_r[6]),
        .O(GOT_V_i_2_n_0));
  FDRE GOT_V_reg
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(got_v_c),
        .Q(got_v_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    RX_CC_i_1
       (.I0(rx_pe_control_r[2]),
        .I1(rx_pe_control_r[3]),
        .I2(rx_pe_control_r[1]),
        .I3(rx_pe_control_r[0]),
        .I4(RX_CC_i_2_n_0),
        .I5(RX_CC_i_3_n_0),
        .O(RX_CC0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_CC_i_2
       (.I0(rx_cc_r[5]),
        .I1(rx_ecp_d_r[4]),
        .I2(rx_cc_r[7]),
        .I3(rx_ecp_d_r[6]),
        .O(RX_CC_i_2_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_CC_i_3
       (.I0(rx_ecp_d_r[0]),
        .I1(rx_cc_r[1]),
        .I2(rx_cc_r[3]),
        .I3(rx_ecp_d_r[2]),
        .O(RX_CC_i_3_n_0));
  FDRE RX_CC_reg
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RX_CC0),
        .Q(D),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_ECP[0]_i_1 
       (.I0(rx_ecp_d_r[2]),
        .I1(rx_ecp_d_r[3]),
        .I2(rx_pe_control_r[1]),
        .I3(rx_pe_control_r[0]),
        .I4(rx_ecp_d_r[1]),
        .I5(rx_ecp_d_r[0]),
        .O(RX_ECP0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_ECP[1]_i_1 
       (.I0(rx_ecp_d_r[6]),
        .I1(rx_ecp_d_r[7]),
        .I2(rx_pe_control_r[3]),
        .I3(rx_pe_control_r[2]),
        .I4(rx_ecp_d_r[5]),
        .I5(rx_ecp_d_r[4]),
        .O(\RX_ECP[1]_i_1_n_0 ));
  FDRE \RX_ECP_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RX_ECP0),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \RX_ECP_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\RX_ECP[1]_i_1_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0000F888)) 
    RX_NEG_i_1
       (.I0(rx_spa_neg_d_r[1]),
        .I1(rx_spa_neg_d_r[0]),
        .I2(rx_sp_neg_d_r[1]),
        .I3(rx_sp_neg_d_r[0]),
        .I4(rx_pe_control_r[1]),
        .O(RX_NEG0));
  FDRE RX_NEG_reg
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RX_NEG0),
        .Q(RX_NEG),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \RX_PAD[0]_i_1 
       (.I0(rx_pad_d_r[0]),
        .I1(rx_spa_r[3]),
        .I2(rx_pe_control_r[0]),
        .I3(rx_pe_control_r[1]),
        .O(p_3_out[1]));
  LUT4 #(
    .INIT(16'h0800)) 
    \RX_PAD[1]_i_1 
       (.I0(rx_pad_d_r[2]),
        .I1(rx_spa_r[7]),
        .I2(rx_pe_control_r[2]),
        .I3(rx_pe_control_r[3]),
        .O(p_3_out[0]));
  FDRE \RX_PAD_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_3_out[1]),
        .Q(rx_pad_striped_i[0]),
        .R(1'b0));
  FDRE \RX_PAD_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_3_out[0]),
        .Q(rx_pad_striped_i[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RX_PE_DATA_V[0]_i_1 
       (.I0(rx_pe_control_r[0]),
        .O(p_1_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RX_PE_DATA_V[1]_i_1 
       (.I0(rx_pe_control_r[2]),
        .O(p_1_out[0]));
  FDRE \RX_PE_DATA_V_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_1_out[1]),
        .Q(\RX_PE_DATA_V_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \RX_PE_DATA_V_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_1_out[0]),
        .Q(\RX_PE_DATA_V_reg[0]_0 [0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_SCP[0]_i_1 
       (.I0(rx_ecp_d_r[2]),
        .I1(rx_scp_d_r[3]),
        .I2(rx_pe_control_r[1]),
        .I3(rx_pe_control_r[0]),
        .I4(rx_sp_r[1]),
        .I5(rx_scp_d_r[0]),
        .O(RX_SCP0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_SCP[1]_i_1 
       (.I0(rx_ecp_d_r[6]),
        .I1(rx_scp_d_r[7]),
        .I2(rx_pe_control_r[3]),
        .I3(rx_pe_control_r[2]),
        .I4(rx_spa_r[5]),
        .I5(rx_scp_d_r[4]),
        .O(\RX_SCP[1]_i_1_n_0 ));
  FDRE \RX_SCP_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RX_SCP0),
        .Q(\RX_SCP_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \RX_SCP_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\RX_SCP[1]_i_1_n_0 ),
        .Q(\RX_SCP_reg[0]_0 [0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    RX_SPA_i_1
       (.I0(RX_SP_i_2_n_0),
        .I1(RX_SPA_i_2_n_0),
        .I2(rx_sp_r[0]),
        .I3(rx_sp_r[1]),
        .I4(rx_spa_r[3]),
        .I5(rx_spa_r[2]),
        .O(RX_SPA0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_SPA_i_2
       (.I0(rx_spa_r[5]),
        .I1(rx_spa_r[4]),
        .I2(rx_spa_r[7]),
        .I3(rx_spa_r[6]),
        .O(RX_SPA_i_2_n_0));
  FDRE RX_SPA_reg
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RX_SPA0),
        .Q(rx_spa_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    RX_SP_i_1
       (.I0(RX_SP_i_2_n_0),
        .I1(RX_SP_i_3_n_0),
        .I2(rx_sp_r[0]),
        .I3(rx_sp_r[1]),
        .I4(rx_sp_r[3]),
        .I5(rx_sp_r[2]),
        .O(RX_SP0));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    RX_SP_i_2
       (.I0(rx_pe_control_r[3]),
        .I1(rx_pe_control_r[1]),
        .I2(rx_pe_control_r[0]),
        .I3(rx_pe_control_r[2]),
        .O(RX_SP_i_2_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_SP_i_3
       (.I0(rx_sp_r[5]),
        .I1(rx_sp_r[4]),
        .I2(rx_sp_r[7]),
        .I3(rx_sp_r[6]),
        .O(RX_SP_i_3_n_0));
  FDRE RX_SP_reg
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RX_SP0),
        .Q(rx_sp_i),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \counter3_r_reg[2]_srl3_i_1 
       (.I0(rx_spa_i),
        .I1(gen_spa_i),
        .O(counter3_r0));
  LUT2 #(
    .INIT(4'hB)) 
    \counter4_r_reg[14]_srl15_i_1 
       (.I0(rx_sp_i),
        .I1(ready_r),
        .O(counter4_r0));
  LUT1 #(
    .INIT(2'h1)) 
    data_after_start_muxcy_0_i_1
       (.I0(\RX_SCP_reg[0]_0 [1]),
        .O(after_scp_select_c_1));
  LUT1 #(
    .INIT(2'h1)) 
    data_after_start_muxcy_1_i_1
       (.I0(\RX_SCP_reg[0]_0 [0]),
        .O(after_scp_select_c_0));
  LUT3 #(
    .INIT(8'hA8)) 
    first_v_received_r_i_1
       (.I0(lane_up),
        .I1(first_v_received_r),
        .I2(got_v_c),
        .O(first_v_received_r_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    first_v_received_r_reg
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(first_v_received_r_i_1_n_0),
        .Q(first_v_received_r),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h1)) 
    in_frame_muxcy_0_i_1
       (.I0(Q[1]),
        .I1(\RX_SCP_reg[0]_0 [1]),
        .O(\RX_ECP_reg[0]_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    in_frame_muxcy_1_i_1
       (.I0(Q[0]),
        .I1(\RX_SCP_reg[0]_0 [0]),
        .O(\RX_ECP_reg[1]_0 ));
  FDRE \left_align_select_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\left_align_select_r_reg[0]_1 ),
        .Q(\left_align_select_r_reg[0]_0 ),
        .R(1'b0));
  FDRE \left_align_select_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_1 ),
        .Q(\left_align_select_r_reg[1]_0 ),
        .R(1'b0));
  FDRE \previous_cycle_control_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXCHARISK[3]),
        .Q(\previous_cycle_control_r_reg[0]_0 ),
        .R(1'b0));
  FDRE \previous_cycle_control_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXCHARISK[2]),
        .Q(previous_cycle_control_r[1]),
        .R(1'b0));
  FDRE \previous_cycle_control_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXCHARISK[1]),
        .Q(previous_cycle_control_r[2]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[24]),
        .Q(\previous_cycle_data_r_reg[7]_0 [0]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[10] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[18]),
        .Q(p_2_in[2]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[11] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[19]),
        .Q(p_2_in[3]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[12] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[20]),
        .Q(p_2_in[4]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[13] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[21]),
        .Q(p_2_in[5]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[14] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[22]),
        .Q(p_2_in[6]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[15] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[23]),
        .Q(p_2_in[7]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[16] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[8]),
        .Q(\previous_cycle_data_r_reg_n_0_[16] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[17] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[9]),
        .Q(\previous_cycle_data_r_reg_n_0_[17] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[18] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[10]),
        .Q(\previous_cycle_data_r_reg_n_0_[18] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[19] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[11]),
        .Q(\previous_cycle_data_r_reg_n_0_[19] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[25]),
        .Q(\previous_cycle_data_r_reg[7]_0 [1]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[20] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[12]),
        .Q(\previous_cycle_data_r_reg_n_0_[20] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[21] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[13]),
        .Q(\previous_cycle_data_r_reg_n_0_[21] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[22] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[14]),
        .Q(\previous_cycle_data_r_reg_n_0_[22] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[23] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[15]),
        .Q(\previous_cycle_data_r_reg_n_0_[23] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[26]),
        .Q(\previous_cycle_data_r_reg[7]_0 [2]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[27]),
        .Q(\previous_cycle_data_r_reg[7]_0 [3]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[28]),
        .Q(\previous_cycle_data_r_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[29]),
        .Q(\previous_cycle_data_r_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[6] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[30]),
        .Q(\previous_cycle_data_r_reg[7]_0 [4]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[31]),
        .Q(\previous_cycle_data_r_reg[7]_0 [5]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[8] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[16]),
        .Q(p_2_in[0]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[9] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(RXDATA[17]),
        .Q(p_2_in[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_cc_r0
       (.I0(\word_aligned_data_r_reg[24]_0 [3]),
        .I1(\word_aligned_data_r_reg[24]_0 [2]),
        .I2(\word_aligned_data_r_reg[24]_0 [1]),
        .I3(\word_aligned_data_r_reg[24]_0 [0]),
        .O(rx_cc_r0_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_cc_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [3]),
        .I1(\word_aligned_data_r_reg[16]_0 [2]),
        .I2(\word_aligned_data_r_reg[16]_0 [1]),
        .I3(\word_aligned_data_r_reg[16]_0 [0]),
        .O(\rx_cc_r0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_cc_r0_inferred__1/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [3]),
        .I1(\word_aligned_data_r_reg[8]_0 [2]),
        .I2(\word_aligned_data_r_reg[8]_0 [1]),
        .I3(\word_aligned_data_r_reg[8]_0 [0]),
        .O(\rx_cc_r0_inferred__1/i__n_0 ));
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_cc_r0_inferred__2/i_ 
       (.I0(\word_aligned_data_r_reg[0]_0 [3]),
        .I1(\word_aligned_data_r_reg[0]_0 [2]),
        .I2(\word_aligned_data_r_reg[0]_0 [1]),
        .I3(\word_aligned_data_r_reg[0]_0 [0]),
        .O(rx_cc_r0__0));
  FDRE \rx_cc_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_cc_r0__0),
        .Q(rx_cc_r[1]),
        .R(1'b0));
  FDRE \rx_cc_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_cc_r0_inferred__1/i__n_0 ),
        .Q(rx_cc_r[3]),
        .R(1'b0));
  FDRE \rx_cc_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_cc_r0_inferred__0/i__n_0 ),
        .Q(rx_cc_r[5]),
        .R(1'b0));
  FDRE \rx_cc_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_cc_r0_n_0),
        .Q(rx_cc_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_ecp_d_r0
       (.I0(\word_aligned_data_r_reg[24]_0 [0]),
        .I1(\word_aligned_data_r_reg[24]_0 [2]),
        .I2(\word_aligned_data_r_reg[24]_0 [3]),
        .I3(\word_aligned_data_r_reg[24]_0 [1]),
        .O(rx_ecp_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_ecp_d_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [1]),
        .I1(\word_aligned_data_r_reg[16]_0 [2]),
        .I2(\word_aligned_data_r_reg[16]_0 [3]),
        .I3(\word_aligned_data_r_reg[16]_0 [0]),
        .O(\rx_ecp_d_r0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \rx_ecp_d_r0_inferred__1/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [5]),
        .I1(\word_aligned_data_r_reg[16]_0 [4]),
        .I2(\word_aligned_data_r_reg[16]_0 [6]),
        .I3(\word_aligned_data_r_reg[16]_0 [7]),
        .O(\rx_ecp_d_r0_inferred__1/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_ecp_d_r0_inferred__2/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [0]),
        .I1(\word_aligned_data_r_reg[8]_0 [2]),
        .I2(\word_aligned_data_r_reg[8]_0 [3]),
        .I3(\word_aligned_data_r_reg[8]_0 [1]),
        .O(\rx_ecp_d_r0_inferred__2/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_ecp_d_r0_inferred__3/i_ 
       (.I0(\word_aligned_data_r_reg[0]_0 [1]),
        .I1(\word_aligned_data_r_reg[0]_0 [2]),
        .I2(\word_aligned_data_r_reg[0]_0 [3]),
        .I3(\word_aligned_data_r_reg[0]_0 [0]),
        .O(\rx_ecp_d_r0_inferred__3/i__n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \rx_ecp_d_r0_inferred__4/i_ 
       (.I0(\word_aligned_data_r_reg[0]_0 [5]),
        .I1(\word_aligned_data_r_reg[0]_0 [4]),
        .I2(\word_aligned_data_r_reg[0]_0 [6]),
        .I3(\word_aligned_data_r_reg[0]_0 [7]),
        .O(rx_ecp_d_r0__0));
  FDRE \rx_ecp_d_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_ecp_d_r0__0),
        .Q(rx_ecp_d_r[0]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_ecp_d_r0_inferred__3/i__n_0 ),
        .Q(rx_ecp_d_r[1]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_scp_d_r0_inferred__5/i__n_0 ),
        .Q(rx_ecp_d_r[2]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_ecp_d_r0_inferred__2/i__n_0 ),
        .Q(rx_ecp_d_r[3]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_ecp_d_r0_inferred__1/i__n_0 ),
        .Q(rx_ecp_d_r[4]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_ecp_d_r0_inferred__0/i__n_0 ),
        .Q(rx_ecp_d_r[5]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[6] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_scp_d_r0_inferred__1/i__n_0 ),
        .Q(rx_ecp_d_r[6]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_ecp_d_r0_n_0),
        .Q(rx_ecp_d_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_pad_d_r0
       (.I0(\word_aligned_data_r_reg[24]_0 [1]),
        .I1(\word_aligned_data_r_reg[24]_0 [0]),
        .I2(\word_aligned_data_r_reg[24]_0 [2]),
        .I3(\word_aligned_data_r_reg[24]_0 [3]),
        .O(rx_pad_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \rx_pad_d_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[24]_0 [6]),
        .I1(\word_aligned_data_r_reg[24]_0 [5]),
        .I2(\word_aligned_data_r_reg[24]_0 [7]),
        .I3(\word_aligned_data_r_reg[24]_0 [4]),
        .O(\rx_pad_d_r0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \rx_pad_d_r0_inferred__1/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [1]),
        .I1(\word_aligned_data_r_reg[8]_0 [0]),
        .I2(\word_aligned_data_r_reg[8]_0 [2]),
        .I3(\word_aligned_data_r_reg[8]_0 [3]),
        .O(\rx_pad_d_r0_inferred__1/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \rx_pad_d_r0_inferred__2/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [6]),
        .I1(\word_aligned_data_r_reg[8]_0 [5]),
        .I2(\word_aligned_data_r_reg[8]_0 [7]),
        .I3(\word_aligned_data_r_reg[8]_0 [4]),
        .O(rx_pad_d_r0__0));
  FDRE \rx_pad_d_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_pad_d_r0__0),
        .Q(rx_pad_d_r[0]),
        .R(1'b0));
  FDRE \rx_pad_d_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_pad_d_r0_inferred__0/i__n_0 ),
        .Q(rx_pad_d_r[2]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[0]),
        .Q(rx_pe_control_r[0]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[1]),
        .Q(rx_pe_control_r[1]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[2]),
        .Q(rx_pe_control_r[2]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[3]),
        .Q(rx_pe_control_r[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_scp_d_r0
       (.I0(\word_aligned_data_r_reg[0]_0 [1]),
        .I1(\word_aligned_data_r_reg[0]_0 [0]),
        .I2(\word_aligned_data_r_reg[0]_0 [2]),
        .I3(\word_aligned_data_r_reg[0]_0 [3]),
        .O(rx_scp_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_scp_d_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[24]_0 [2]),
        .I1(\word_aligned_data_r_reg[24]_0 [3]),
        .I2(\word_aligned_data_r_reg[24]_0 [1]),
        .I3(\word_aligned_data_r_reg[24]_0 [0]),
        .O(\rx_scp_d_r0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \rx_scp_d_r0_inferred__1/i_ 
       (.I0(\word_aligned_data_r_reg[24]_0 [5]),
        .I1(\word_aligned_data_r_reg[24]_0 [4]),
        .I2(\word_aligned_data_r_reg[24]_0 [6]),
        .I3(\word_aligned_data_r_reg[24]_0 [7]),
        .O(\rx_scp_d_r0_inferred__1/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \rx_scp_d_r0_inferred__2/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [1]),
        .I1(\word_aligned_data_r_reg[16]_0 [0]),
        .I2(\word_aligned_data_r_reg[16]_0 [2]),
        .I3(\word_aligned_data_r_reg[16]_0 [3]),
        .O(\rx_scp_d_r0_inferred__2/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \rx_scp_d_r0_inferred__3/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [7]),
        .I1(\word_aligned_data_r_reg[16]_0 [5]),
        .I2(\word_aligned_data_r_reg[16]_0 [6]),
        .I3(\word_aligned_data_r_reg[16]_0 [4]),
        .O(\rx_scp_d_r0_inferred__3/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_scp_d_r0_inferred__4/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [2]),
        .I1(\word_aligned_data_r_reg[8]_0 [3]),
        .I2(\word_aligned_data_r_reg[8]_0 [1]),
        .I3(\word_aligned_data_r_reg[8]_0 [0]),
        .O(\rx_scp_d_r0_inferred__4/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \rx_scp_d_r0_inferred__5/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [5]),
        .I1(\word_aligned_data_r_reg[8]_0 [4]),
        .I2(\word_aligned_data_r_reg[8]_0 [6]),
        .I3(\word_aligned_data_r_reg[8]_0 [7]),
        .O(\rx_scp_d_r0_inferred__5/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \rx_scp_d_r0_inferred__6/i_ 
       (.I0(\word_aligned_data_r_reg[0]_0 [7]),
        .I1(\word_aligned_data_r_reg[0]_0 [5]),
        .I2(\word_aligned_data_r_reg[0]_0 [6]),
        .I3(\word_aligned_data_r_reg[0]_0 [4]),
        .O(rx_scp_d_r0__0));
  FDRE \rx_scp_d_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_scp_d_r0__0),
        .Q(rx_scp_d_r[0]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_scp_d_r0_inferred__4/i__n_0 ),
        .Q(rx_scp_d_r[3]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_scp_d_r0_inferred__3/i__n_0 ),
        .Q(rx_scp_d_r[4]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_scp_d_r0_inferred__0/i__n_0 ),
        .Q(rx_scp_d_r[7]),
        .R(1'b0));
  FDRE \rx_sp_neg_d_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_sp_r114_in),
        .Q(rx_sp_neg_d_r[0]),
        .R(1'b0));
  FDRE \rx_sp_neg_d_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_sp_r111_in),
        .Q(rx_sp_neg_d_r[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_sp_r0
       (.I0(\word_aligned_data_r_reg[0]_0 [6]),
        .I1(\word_aligned_data_r_reg[0]_0 [7]),
        .I2(\word_aligned_data_r_reg[0]_0 [5]),
        .I3(\word_aligned_data_r_reg[0]_0 [4]),
        .O(rx_sp_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_sp_r1
       (.I0(\word_aligned_data_r_reg[8]_0 [3]),
        .I1(\word_aligned_data_r_reg[8]_0 [1]),
        .I2(\word_aligned_data_r_reg[8]_0 [2]),
        .I3(\word_aligned_data_r_reg[8]_0 [0]),
        .O(rx_sp_r111_in));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_sp_r1_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [6]),
        .I1(\word_aligned_data_r_reg[8]_0 [7]),
        .I2(\word_aligned_data_r_reg[8]_0 [5]),
        .I3(\word_aligned_data_r_reg[8]_0 [4]),
        .O(rx_sp_r114_in));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h0180)) 
    \rx_sp_r[2]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [4]),
        .I1(\word_aligned_data_r_reg[8]_0 [5]),
        .I2(\word_aligned_data_r_reg[8]_0 [7]),
        .I3(\word_aligned_data_r_reg[8]_0 [6]),
        .O(p_8_out[5]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h1008)) 
    \rx_sp_r[3]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [0]),
        .I1(\word_aligned_data_r_reg[8]_0 [2]),
        .I2(\word_aligned_data_r_reg[8]_0 [1]),
        .I3(\word_aligned_data_r_reg[8]_0 [3]),
        .O(p_8_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h0810)) 
    \rx_sp_r[4]_i_1 
       (.I0(\word_aligned_data_r_reg[16]_0 [5]),
        .I1(\word_aligned_data_r_reg[16]_0 [4]),
        .I2(\word_aligned_data_r_reg[16]_0 [6]),
        .I3(\word_aligned_data_r_reg[16]_0 [7]),
        .O(p_8_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h1008)) 
    \rx_sp_r[5]_i_1 
       (.I0(\word_aligned_data_r_reg[16]_0 [2]),
        .I1(\word_aligned_data_r_reg[16]_0 [0]),
        .I2(\word_aligned_data_r_reg[16]_0 [1]),
        .I3(\word_aligned_data_r_reg[16]_0 [3]),
        .O(p_8_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h0810)) 
    \rx_sp_r[6]_i_1 
       (.I0(\word_aligned_data_r_reg[24]_0 [5]),
        .I1(\word_aligned_data_r_reg[24]_0 [4]),
        .I2(\word_aligned_data_r_reg[24]_0 [6]),
        .I3(\word_aligned_data_r_reg[24]_0 [7]),
        .O(p_8_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h1008)) 
    \rx_sp_r[7]_i_1 
       (.I0(\word_aligned_data_r_reg[24]_0 [2]),
        .I1(\word_aligned_data_r_reg[24]_0 [0]),
        .I2(\word_aligned_data_r_reg[24]_0 [1]),
        .I3(\word_aligned_data_r_reg[24]_0 [3]),
        .O(p_8_out[0]));
  FDRE \rx_sp_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_sp_r0_n_0),
        .Q(rx_sp_r[0]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_scp_d_r0_n_0),
        .Q(rx_sp_r[1]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_8_out[5]),
        .Q(rx_sp_r[2]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_8_out[4]),
        .Q(rx_sp_r[3]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_8_out[3]),
        .Q(rx_sp_r[4]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_8_out[2]),
        .Q(rx_sp_r[5]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[6] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_8_out[1]),
        .Q(rx_sp_r[6]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(p_8_out[0]),
        .Q(rx_sp_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_spa_neg_d_r0
       (.I0(\word_aligned_data_r_reg[8]_0 [2]),
        .I1(\word_aligned_data_r_reg[8]_0 [3]),
        .I2(\word_aligned_data_r_reg[8]_0 [1]),
        .I3(\word_aligned_data_r_reg[8]_0 [0]),
        .O(rx_spa_neg_d_r0_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_spa_neg_d_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [5]),
        .I1(\word_aligned_data_r_reg[8]_0 [6]),
        .I2(\word_aligned_data_r_reg[8]_0 [7]),
        .I3(\word_aligned_data_r_reg[8]_0 [4]),
        .O(rx_spa_neg_d_r0__0));
  FDRE \rx_spa_neg_d_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_spa_neg_d_r0__0),
        .Q(rx_spa_neg_d_r[0]),
        .R(1'b0));
  FDRE \rx_spa_neg_d_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_spa_neg_d_r0_n_0),
        .Q(rx_spa_neg_d_r[1]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0010)) 
    rx_spa_r0
       (.I0(\word_aligned_data_r_reg[24]_0 [6]),
        .I1(\word_aligned_data_r_reg[24]_0 [7]),
        .I2(\word_aligned_data_r_reg[24]_0 [5]),
        .I3(\word_aligned_data_r_reg[24]_0 [4]),
        .O(rx_spa_r0_n_0));
  LUT4 #(
    .INIT(16'h0010)) 
    \rx_spa_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [6]),
        .I1(\word_aligned_data_r_reg[16]_0 [7]),
        .I2(\word_aligned_data_r_reg[16]_0 [5]),
        .I3(\word_aligned_data_r_reg[16]_0 [4]),
        .O(\rx_spa_r0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \rx_spa_r0_inferred__1/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [6]),
        .I1(\word_aligned_data_r_reg[8]_0 [7]),
        .I2(\word_aligned_data_r_reg[8]_0 [5]),
        .I3(\word_aligned_data_r_reg[8]_0 [4]),
        .O(rx_spa_r0__0));
  FDRE \rx_spa_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_spa_r0__0),
        .Q(rx_spa_r[2]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_pad_d_r0_inferred__1/i__n_0 ),
        .Q(rx_spa_r[3]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_spa_r0_inferred__0/i__n_0 ),
        .Q(rx_spa_r[4]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_scp_d_r0_inferred__2/i__n_0 ),
        .Q(rx_spa_r[5]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[6] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_spa_r0_n_0),
        .Q(rx_spa_r[6]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_pad_d_r0_n_0),
        .Q(rx_spa_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    rx_v_d_r0
       (.I0(\word_aligned_data_r_reg[24]_0 [2]),
        .I1(\word_aligned_data_r_reg[24]_0 [1]),
        .I2(\word_aligned_data_r_reg[24]_0 [3]),
        .I3(\word_aligned_data_r_reg[24]_0 [0]),
        .O(rx_v_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_v_d_r0_inferred__0/i_ 
       (.I0(\word_aligned_data_r_reg[24]_0 [4]),
        .I1(\word_aligned_data_r_reg[24]_0 [6]),
        .I2(\word_aligned_data_r_reg[24]_0 [7]),
        .I3(\word_aligned_data_r_reg[24]_0 [5]),
        .O(\rx_v_d_r0_inferred__0/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \rx_v_d_r0_inferred__1/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [2]),
        .I1(\word_aligned_data_r_reg[16]_0 [1]),
        .I2(\word_aligned_data_r_reg[16]_0 [3]),
        .I3(\word_aligned_data_r_reg[16]_0 [0]),
        .O(\rx_v_d_r0_inferred__1/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_v_d_r0_inferred__2/i_ 
       (.I0(\word_aligned_data_r_reg[16]_0 [4]),
        .I1(\word_aligned_data_r_reg[16]_0 [6]),
        .I2(\word_aligned_data_r_reg[16]_0 [7]),
        .I3(\word_aligned_data_r_reg[16]_0 [5]),
        .O(\rx_v_d_r0_inferred__2/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \rx_v_d_r0_inferred__3/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [2]),
        .I1(\word_aligned_data_r_reg[8]_0 [1]),
        .I2(\word_aligned_data_r_reg[8]_0 [3]),
        .I3(\word_aligned_data_r_reg[8]_0 [0]),
        .O(\rx_v_d_r0_inferred__3/i__n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \rx_v_d_r0_inferred__4/i_ 
       (.I0(\word_aligned_data_r_reg[8]_0 [4]),
        .I1(\word_aligned_data_r_reg[8]_0 [6]),
        .I2(\word_aligned_data_r_reg[8]_0 [7]),
        .I3(\word_aligned_data_r_reg[8]_0 [5]),
        .O(rx_v_d_r0__0));
  FDRE \rx_v_d_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_v_d_r0__0),
        .Q(rx_v_d_r[2]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_v_d_r0_inferred__3/i__n_0 ),
        .Q(rx_v_d_r[3]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_v_d_r0_inferred__2/i__n_0 ),
        .Q(rx_v_d_r[4]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_v_d_r0_inferred__1/i__n_0 ),
        .Q(rx_v_d_r[5]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[6] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\rx_v_d_r0_inferred__0/i__n_0 ),
        .Q(rx_v_d_r[6]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(rx_v_d_r0_n_0),
        .Q(rx_v_d_r[7]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    stage_1_pad_r_i_1
       (.I0(rx_pad_striped_i[1]),
        .I1(rx_pad_striped_i[0]),
        .O(\RX_PAD_reg[1]_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \word_aligned_control_bits_r[0]_i_1 
       (.I0(previous_cycle_control_r[2]),
        .I1(previous_cycle_control_r[1]),
        .I2(RXCHARISK[0]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_control_r_reg[0]_0 ),
        .O(\word_aligned_control_bits_r[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_control_bits_r[1]_i_1 
       (.I0(RXCHARISK[1]),
        .I1(previous_cycle_control_r[1]),
        .I2(RXCHARISK[0]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_control_r_reg[0]_0 ),
        .O(\word_aligned_control_bits_r[1]_i_1_n_0 ));
  FDRE \word_aligned_control_bits_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r[0]_i_1_n_0 ),
        .Q(word_aligned_control_bits_r[0]),
        .R(1'b0));
  FDRE \word_aligned_control_bits_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r[1]_i_1_n_0 ),
        .Q(word_aligned_control_bits_r[1]),
        .R(1'b0));
  FDRE \word_aligned_control_bits_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r_reg[2]_0 ),
        .Q(word_aligned_control_bits_r[2]),
        .R(1'b0));
  FDRE \word_aligned_control_bits_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r_reg[3]_0 ),
        .Q(word_aligned_control_bits_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[0]_i_1 
       (.I0(RXDATA[7]),
        .I1(\previous_cycle_data_r_reg_n_0_[23] ),
        .I2(\previous_cycle_data_r_reg[7]_0 [5]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(p_2_in[7]),
        .O(\word_aligned_data_r[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[10]_i_1 
       (.I0(RXDATA[13]),
        .I1(p_2_in[5]),
        .I2(\previous_cycle_data_r_reg_n_0_[5] ),
        .I3(\left_align_select_r_reg[0]_0 ),
        .I4(\left_align_select_r_reg[1]_0 ),
        .I5(RXDATA[5]),
        .O(\word_aligned_data_r[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \word_aligned_data_r[11]_i_1 
       (.I0(p_2_in[4]),
        .I1(RXDATA[4]),
        .I2(RXDATA[12]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg_n_0_[4] ),
        .O(\word_aligned_data_r[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[12]_i_1 
       (.I0(RXDATA[11]),
        .I1(p_2_in[3]),
        .I2(RXDATA[3]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [3]),
        .O(\word_aligned_data_r[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[13]_i_1 
       (.I0(RXDATA[10]),
        .I1(p_2_in[2]),
        .I2(RXDATA[2]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [2]),
        .O(\word_aligned_data_r[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[14]_i_1 
       (.I0(RXDATA[9]),
        .I1(p_2_in[1]),
        .I2(RXDATA[1]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [1]),
        .O(\word_aligned_data_r[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[15]_i_1 
       (.I0(RXDATA[8]),
        .I1(p_2_in[0]),
        .I2(\previous_cycle_data_r_reg[7]_0 [0]),
        .I3(\left_align_select_r_reg[0]_0 ),
        .I4(\left_align_select_r_reg[1]_0 ),
        .I5(RXDATA[0]),
        .O(\word_aligned_data_r[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \word_aligned_data_r[18]_i_1 
       (.I0(\previous_cycle_data_r_reg_n_0_[5] ),
        .I1(RXDATA[5]),
        .I2(RXDATA[21]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(RXDATA[13]),
        .O(\word_aligned_data_r[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \word_aligned_data_r[19]_i_1 
       (.I0(\previous_cycle_data_r_reg_n_0_[4] ),
        .I1(RXDATA[12]),
        .I2(RXDATA[20]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(RXDATA[4]),
        .O(\word_aligned_data_r[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[1]_i_1 
       (.I0(RXDATA[6]),
        .I1(\previous_cycle_data_r_reg_n_0_[22] ),
        .I2(\previous_cycle_data_r_reg[7]_0 [4]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(p_2_in[6]),
        .O(\word_aligned_data_r[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[2]_i_1 
       (.I0(RXDATA[5]),
        .I1(\previous_cycle_data_r_reg_n_0_[21] ),
        .I2(\previous_cycle_data_r_reg_n_0_[5] ),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(p_2_in[5]),
        .O(\word_aligned_data_r[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[3]_i_1 
       (.I0(RXDATA[4]),
        .I1(\previous_cycle_data_r_reg_n_0_[20] ),
        .I2(p_2_in[4]),
        .I3(\left_align_select_r_reg[0]_0 ),
        .I4(\left_align_select_r_reg[1]_0 ),
        .I5(\previous_cycle_data_r_reg_n_0_[4] ),
        .O(\word_aligned_data_r[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[4]_i_1 
       (.I0(RXDATA[3]),
        .I1(\previous_cycle_data_r_reg_n_0_[19] ),
        .I2(p_2_in[3]),
        .I3(\left_align_select_r_reg[0]_0 ),
        .I4(\left_align_select_r_reg[1]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [3]),
        .O(\word_aligned_data_r[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[5]_i_1 
       (.I0(RXDATA[2]),
        .I1(\previous_cycle_data_r_reg_n_0_[18] ),
        .I2(\previous_cycle_data_r_reg[7]_0 [2]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(p_2_in[2]),
        .O(\word_aligned_data_r[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \word_aligned_data_r[6]_i_1 
       (.I0(\previous_cycle_data_r_reg_n_0_[17] ),
        .I1(p_2_in[1]),
        .I2(RXDATA[1]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [1]),
        .O(\word_aligned_data_r[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[7]_i_1 
       (.I0(RXDATA[0]),
        .I1(\previous_cycle_data_r_reg_n_0_[16] ),
        .I2(p_2_in[0]),
        .I3(\left_align_select_r_reg[0]_0 ),
        .I4(\left_align_select_r_reg[1]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [0]),
        .O(\word_aligned_data_r[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[8]_i_1 
       (.I0(RXDATA[15]),
        .I1(p_2_in[7]),
        .I2(RXDATA[7]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [5]),
        .O(\word_aligned_data_r[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[9]_i_1 
       (.I0(RXDATA[14]),
        .I1(p_2_in[6]),
        .I2(RXDATA[6]),
        .I3(\left_align_select_r_reg[1]_0 ),
        .I4(\left_align_select_r_reg[0]_0 ),
        .I5(\previous_cycle_data_r_reg[7]_0 [4]),
        .O(\word_aligned_data_r[9]_i_1_n_0 ));
  FDRE \word_aligned_data_r_reg[0] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[0]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[10] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[10]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[11] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[11]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[12] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[12]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[13] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[13]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[14] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[14]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[15] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[15]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[16] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[16]_1 [5]),
        .Q(\word_aligned_data_r_reg[16]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[17] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[16]_1 [4]),
        .Q(\word_aligned_data_r_reg[16]_0 [6]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[18] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[18]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[16]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[19] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[19]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[16]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[1] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[1]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [6]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[20] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[16]_1 [3]),
        .Q(\word_aligned_data_r_reg[16]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[21] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[16]_1 [2]),
        .Q(\word_aligned_data_r_reg[16]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[22] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[16]_1 [1]),
        .Q(\word_aligned_data_r_reg[16]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[23] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[16]_1 [0]),
        .Q(\word_aligned_data_r_reg[16]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[24] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [7]),
        .Q(\word_aligned_data_r_reg[24]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[25] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [6]),
        .Q(\word_aligned_data_r_reg[24]_0 [6]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[26] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [5]),
        .Q(\word_aligned_data_r_reg[24]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[27] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [4]),
        .Q(\word_aligned_data_r_reg[24]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[28] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [3]),
        .Q(\word_aligned_data_r_reg[24]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[29] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [2]),
        .Q(\word_aligned_data_r_reg[24]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[2] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[2]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[30] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [1]),
        .Q(\word_aligned_data_r_reg[24]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[31] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r_reg[24]_1 [0]),
        .Q(\word_aligned_data_r_reg[24]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[3] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[3]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[4] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[4]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[5] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[5]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[6] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[6]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[7] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[7]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[0]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[8] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[8]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[9] 
       (.C(\rx_cc_r_reg[1]_0 ),
        .CE(1'b1),
        .D(\word_aligned_data_r[9]_i_1_n_0 ),
        .Q(\word_aligned_data_r_reg[8]_0 [6]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_SYM_GEN_4BYTE" *) 
module top_aurora_0_0_aurora_8b10b_0_SYM_GEN_4BYTE
   (gen_spa_r,
    TXCHARISK,
    TXDATA,
    gen_spa_i,
    \TX_DATA_reg[0]_0 ,
    GEN_SP,
    gen_cc_i,
    gen_ecp_i,
    gen_scp_striped_i,
    gen_a_i,
    \tx_pe_data_v_r_reg[0]_0 ,
    \gen_pad_r_reg[0]_0 ,
    \gen_v_r_reg[1]_0 ,
    \gen_r_r_reg[0]_0 ,
    \gen_k_r_reg[0]_0 ,
    \tx_pe_data_r_reg[0]_0 );
  output gen_spa_r;
  output [3:0]TXCHARISK;
  output [31:0]TXDATA;
  input gen_spa_i;
  input \TX_DATA_reg[0]_0 ;
  input GEN_SP;
  input gen_cc_i;
  input gen_ecp_i;
  input [0:0]gen_scp_striped_i;
  input gen_a_i;
  input [1:0]\tx_pe_data_v_r_reg[0]_0 ;
  input [1:0]\gen_pad_r_reg[0]_0 ;
  input [2:0]\gen_v_r_reg[1]_0 ;
  input [3:0]\gen_r_r_reg[0]_0 ;
  input [3:0]\gen_k_r_reg[0]_0 ;
  input [31:0]\tx_pe_data_r_reg[0]_0 ;

  wire GEN_SP;
  wire [3:0]TXCHARISK;
  wire [31:0]TXDATA;
  wire \TX_CHAR_IS_K[3]_i_1_n_0 ;
  wire TX_CHAR_IS_K_reg0;
  wire TX_CHAR_IS_K_reg03_out;
  wire TX_CHAR_IS_K_reg08_out;
  wire \TX_DATA[0]_i_1_n_0 ;
  wire \TX_DATA[0]_i_2_n_0 ;
  wire \TX_DATA[10]_i_1_n_0 ;
  wire \TX_DATA[10]_i_2_n_0 ;
  wire \TX_DATA[10]_i_3_n_0 ;
  wire \TX_DATA[11]_i_1_n_0 ;
  wire \TX_DATA[12]_i_1_n_0 ;
  wire \TX_DATA[12]_i_2_n_0 ;
  wire \TX_DATA[13]_i_1_n_0 ;
  wire \TX_DATA[13]_i_2_n_0 ;
  wire \TX_DATA[14]_i_1_n_0 ;
  wire \TX_DATA[14]_i_2_n_0 ;
  wire \TX_DATA[14]_i_3_n_0 ;
  wire \TX_DATA[14]_i_4_n_0 ;
  wire \TX_DATA[15]_i_1_n_0 ;
  wire \TX_DATA[15]_i_2_n_0 ;
  wire \TX_DATA[15]_i_3_n_0 ;
  wire \TX_DATA[16]_i_1_n_0 ;
  wire \TX_DATA[17]_i_1_n_0 ;
  wire \TX_DATA[18]_i_1_n_0 ;
  wire \TX_DATA[18]_i_2_n_0 ;
  wire \TX_DATA[18]_i_3_n_0 ;
  wire \TX_DATA[19]_i_1_n_0 ;
  wire \TX_DATA[1]_i_1_n_0 ;
  wire \TX_DATA[20]_i_1_n_0 ;
  wire \TX_DATA[20]_i_2_n_0 ;
  wire \TX_DATA[21]_i_1_n_0 ;
  wire \TX_DATA[21]_i_2_n_0 ;
  wire \TX_DATA[22]_i_1_n_0 ;
  wire \TX_DATA[22]_i_2_n_0 ;
  wire \TX_DATA[23]_i_1_n_0 ;
  wire \TX_DATA[23]_i_2_n_0 ;
  wire \TX_DATA[23]_i_3_n_0 ;
  wire \TX_DATA[24]_i_1_n_0 ;
  wire \TX_DATA[25]_i_1_n_0 ;
  wire \TX_DATA[26]_i_1_n_0 ;
  wire \TX_DATA[27]_i_1_n_0 ;
  wire \TX_DATA[28]_i_1_n_0 ;
  wire \TX_DATA[29]_i_1_n_0 ;
  wire \TX_DATA[2]_i_1_n_0 ;
  wire \TX_DATA[2]_i_2_n_0 ;
  wire \TX_DATA[30]_i_1_n_0 ;
  wire \TX_DATA[30]_i_2_n_0 ;
  wire \TX_DATA[30]_i_3_n_0 ;
  wire \TX_DATA[31]_i_1_n_0 ;
  wire \TX_DATA[31]_i_2_n_0 ;
  wire \TX_DATA[31]_i_3_n_0 ;
  wire \TX_DATA[3]_i_1_n_0 ;
  wire \TX_DATA[4]_i_1_n_0 ;
  wire \TX_DATA[4]_i_2_n_0 ;
  wire \TX_DATA[5]_i_1_n_0 ;
  wire \TX_DATA[5]_i_2_n_0 ;
  wire \TX_DATA[6]_i_1_n_0 ;
  wire \TX_DATA[6]_i_2_n_0 ;
  wire \TX_DATA[7]_i_2_n_0 ;
  wire \TX_DATA[7]_i_3_n_0 ;
  wire \TX_DATA[8]_i_1_n_0 ;
  wire \TX_DATA[9]_i_1_n_0 ;
  wire \TX_DATA[9]_i_2_n_0 ;
  wire TX_DATA_reg0;
  wire \TX_DATA_reg[0]_0 ;
  wire [7:0]data0;
  wire gen_a_i;
  wire gen_a_r;
  wire gen_cc_i;
  wire gen_cc_r;
  wire gen_ecp_i;
  wire \gen_ecp_r_reg_n_0_[1] ;
  wire [3:0]\gen_k_r_reg[0]_0 ;
  wire \gen_k_r_reg_n_0_[3] ;
  wire [1:0]\gen_pad_r_reg[0]_0 ;
  wire \gen_pad_r_reg_n_0_[1] ;
  wire [3:0]\gen_r_r_reg[0]_0 ;
  wire \gen_r_r_reg_n_0_[3] ;
  wire [0:0]gen_scp_striped_i;
  wire gen_sp_r;
  wire gen_spa_i;
  wire gen_spa_r;
  wire [2:0]\gen_v_r_reg[1]_0 ;
  wire \gen_v_r_reg_n_0_[3] ;
  wire p_0_in;
  wire p_0_in12_in;
  wire p_0_in14_in;
  wire p_0_in16_in;
  wire p_0_in4_in;
  wire p_0_in6_in;
  wire p_0_in8_in;
  wire p_1_in;
  wire p_1_in11_in;
  wire p_1_in16_in;
  wire p_1_in5_in;
  wire [31:0]\tx_pe_data_r_reg[0]_0 ;
  wire \tx_pe_data_r_reg_n_0_[0] ;
  wire \tx_pe_data_r_reg_n_0_[10] ;
  wire \tx_pe_data_r_reg_n_0_[11] ;
  wire \tx_pe_data_r_reg_n_0_[12] ;
  wire \tx_pe_data_r_reg_n_0_[13] ;
  wire \tx_pe_data_r_reg_n_0_[14] ;
  wire \tx_pe_data_r_reg_n_0_[15] ;
  wire \tx_pe_data_r_reg_n_0_[1] ;
  wire \tx_pe_data_r_reg_n_0_[24] ;
  wire \tx_pe_data_r_reg_n_0_[25] ;
  wire \tx_pe_data_r_reg_n_0_[26] ;
  wire \tx_pe_data_r_reg_n_0_[27] ;
  wire \tx_pe_data_r_reg_n_0_[28] ;
  wire \tx_pe_data_r_reg_n_0_[29] ;
  wire \tx_pe_data_r_reg_n_0_[2] ;
  wire \tx_pe_data_r_reg_n_0_[30] ;
  wire \tx_pe_data_r_reg_n_0_[31] ;
  wire \tx_pe_data_r_reg_n_0_[3] ;
  wire \tx_pe_data_r_reg_n_0_[4] ;
  wire \tx_pe_data_r_reg_n_0_[5] ;
  wire \tx_pe_data_r_reg_n_0_[6] ;
  wire \tx_pe_data_r_reg_n_0_[7] ;
  wire \tx_pe_data_r_reg_n_0_[8] ;
  wire \tx_pe_data_r_reg_n_0_[9] ;
  wire [1:0]\tx_pe_data_v_r_reg[0]_0 ;
  wire \tx_pe_data_v_r_reg_n_0_[1] ;

  LUT6 #(
    .INIT(64'hFFFFFFFF0000000B)) 
    \TX_CHAR_IS_K[0]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\gen_v_r_reg_n_0_[3] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(TX_CHAR_IS_K_reg0));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \TX_CHAR_IS_K[1]_i_1 
       (.I0(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I1(p_1_in),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(gen_cc_r),
        .O(TX_CHAR_IS_K_reg03_out));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000000B)) 
    \TX_CHAR_IS_K[2]_i_1 
       (.I0(p_0_in12_in),
        .I1(p_1_in11_in),
        .I2(p_1_in5_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(TX_CHAR_IS_K_reg08_out));
  LUT2 #(
    .INIT(4'hB)) 
    \TX_CHAR_IS_K[3]_i_1 
       (.I0(gen_cc_r),
        .I1(p_1_in11_in),
        .O(\TX_CHAR_IS_K[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(TX_CHAR_IS_K_reg0),
        .Q(TXCHARISK[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(TX_CHAR_IS_K_reg03_out),
        .Q(TXCHARISK[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[2] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(TX_CHAR_IS_K_reg08_out),
        .Q(TXCHARISK[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[3] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\TX_CHAR_IS_K[3]_i_1_n_0 ),
        .Q(TXCHARISK[0]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[0]_i_1 
       (.I0(\TX_DATA[0]_i_2_n_0 ),
        .I1(TX_DATA_reg0),
        .I2(TXDATA[24]),
        .O(\TX_DATA[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000044E4)) 
    \TX_DATA[0]_i_2 
       (.I0(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I1(gen_cc_r),
        .I2(\tx_pe_data_r_reg_n_0_[31] ),
        .I3(\gen_pad_r_reg_n_0_[1] ),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \TX_DATA[10]_i_1 
       (.I0(data0[2]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(p_0_in4_in),
        .I3(\TX_DATA[10]_i_2_n_0 ),
        .I4(p_0_in),
        .I5(\TX_DATA[10]_i_3_n_0 ),
        .O(\TX_DATA[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'hF0FB)) 
    \TX_DATA[10]_i_2 
       (.I0(gen_spa_r),
        .I1(p_1_in),
        .I2(gen_cc_r),
        .I3(gen_sp_r),
        .O(\TX_DATA[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    \TX_DATA[10]_i_3 
       (.I0(gen_sp_r),
        .I1(gen_spa_r),
        .I2(gen_cc_r),
        .O(\TX_DATA[10]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'hEAEF)) 
    \TX_DATA[11]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(data0[3]),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(gen_cc_r),
        .O(\TX_DATA[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \TX_DATA[12]_i_1 
       (.I0(data0[4]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(p_0_in4_in),
        .I3(\TX_DATA[12]_i_2_n_0 ),
        .I4(p_0_in),
        .I5(gen_cc_r),
        .O(\TX_DATA[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'hFF01)) 
    \TX_DATA[12]_i_2 
       (.I0(p_1_in),
        .I1(gen_spa_r),
        .I2(gen_sp_r),
        .I3(gen_cc_r),
        .O(\TX_DATA[12]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hEFEA)) 
    \TX_DATA[13]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(data0[5]),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[13]_i_2_n_0 ),
        .O(\TX_DATA[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFFFEFF)) 
    \TX_DATA[13]_i_2 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(gen_spa_r),
        .I3(p_0_in),
        .I4(gen_cc_r),
        .I5(gen_sp_r),
        .O(\TX_DATA[13]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \TX_DATA[14]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\TX_DATA[15]_i_1_n_0 ),
        .O(\TX_DATA[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \TX_DATA[14]_i_2 
       (.I0(data0[6]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(p_0_in4_in),
        .I3(\TX_DATA[14]_i_3_n_0 ),
        .I4(p_0_in),
        .I5(\TX_DATA[14]_i_4_n_0 ),
        .O(\TX_DATA[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'hFFF4)) 
    \TX_DATA[14]_i_3 
       (.I0(gen_spa_r),
        .I1(p_1_in),
        .I2(gen_sp_r),
        .I3(gen_cc_r),
        .O(\TX_DATA[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \TX_DATA[14]_i_4 
       (.I0(gen_spa_r),
        .I1(gen_sp_r),
        .I2(gen_cc_r),
        .O(\TX_DATA[14]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[15]_i_1 
       (.I0(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I1(p_0_in),
        .I2(\TX_DATA[31]_i_3_n_0 ),
        .I3(p_1_in),
        .I4(p_0_in4_in),
        .I5(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hEFEA)) 
    \TX_DATA[15]_i_2 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(data0[7]),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[15]_i_3_n_0 ),
        .O(\TX_DATA[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \TX_DATA[15]_i_3 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(p_0_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hBABAFFAA)) 
    \TX_DATA[16]_i_1 
       (.I0(p_1_in16_in),
        .I1(p_0_in12_in),
        .I2(\tx_pe_data_r_reg_n_0_[15] ),
        .I3(gen_cc_r),
        .I4(p_1_in11_in),
        .O(\TX_DATA[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAEFFAEFFAEFFAEAA)) 
    \TX_DATA[17]_i_1 
       (.I0(p_1_in16_in),
        .I1(\tx_pe_data_r_reg_n_0_[14] ),
        .I2(p_0_in12_in),
        .I3(p_1_in11_in),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[17]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[18]_i_1 
       (.I0(\TX_DATA[18]_i_2_n_0 ),
        .I1(\TX_DATA[23]_i_1_n_0 ),
        .I2(TXDATA[10]),
        .O(\TX_DATA[18]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EEE2)) 
    \TX_DATA[18]_i_2 
       (.I0(\TX_DATA[18]_i_3_n_0 ),
        .I1(p_1_in11_in),
        .I2(p_0_in12_in),
        .I3(\tx_pe_data_r_reg_n_0_[13] ),
        .I4(p_1_in16_in),
        .O(\TX_DATA[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00FF0032)) 
    \TX_DATA[18]_i_3 
       (.I0(p_0_in8_in),
        .I1(p_1_in5_in),
        .I2(p_0_in6_in),
        .I3(gen_sp_r),
        .I4(gen_spa_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[18]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFEAAFEFF)) 
    \TX_DATA[19]_i_1 
       (.I0(p_1_in16_in),
        .I1(\tx_pe_data_r_reg_n_0_[12] ),
        .I2(p_0_in12_in),
        .I3(p_1_in11_in),
        .I4(gen_cc_r),
        .O(\TX_DATA[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAEFFAEFFAEFFAEAA)) 
    \TX_DATA[1]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[30] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFEAA)) 
    \TX_DATA[20]_i_1 
       (.I0(p_1_in16_in),
        .I1(\tx_pe_data_r_reg_n_0_[11] ),
        .I2(p_0_in12_in),
        .I3(p_1_in11_in),
        .I4(\TX_DATA[20]_i_2_n_0 ),
        .O(\TX_DATA[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00030002)) 
    \TX_DATA[20]_i_2 
       (.I0(p_0_in8_in),
        .I1(p_1_in5_in),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(p_0_in6_in),
        .I5(gen_cc_r),
        .O(\TX_DATA[20]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAEFFAEAA)) 
    \TX_DATA[21]_i_1 
       (.I0(p_1_in16_in),
        .I1(\tx_pe_data_r_reg_n_0_[10] ),
        .I2(p_0_in12_in),
        .I3(p_1_in11_in),
        .I4(\TX_DATA[21]_i_2_n_0 ),
        .O(\TX_DATA[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFFFEFF)) 
    \TX_DATA[21]_i_2 
       (.I0(p_0_in8_in),
        .I1(p_1_in5_in),
        .I2(gen_spa_r),
        .I3(p_0_in6_in),
        .I4(gen_cc_r),
        .I5(gen_sp_r),
        .O(\TX_DATA[21]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAEFFAEAA)) 
    \TX_DATA[22]_i_1 
       (.I0(p_1_in16_in),
        .I1(\tx_pe_data_r_reg_n_0_[9] ),
        .I2(p_0_in12_in),
        .I3(p_1_in11_in),
        .I4(\TX_DATA[22]_i_2_n_0 ),
        .O(\TX_DATA[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00CD)) 
    \TX_DATA[22]_i_2 
       (.I0(p_0_in8_in),
        .I1(p_1_in5_in),
        .I2(p_0_in6_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[23]_i_1 
       (.I0(p_1_in11_in),
        .I1(p_0_in6_in),
        .I2(\TX_DATA[31]_i_3_n_0 ),
        .I3(p_1_in5_in),
        .I4(p_0_in8_in),
        .I5(p_1_in16_in),
        .O(\TX_DATA[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFEAA)) 
    \TX_DATA[23]_i_2 
       (.I0(p_1_in16_in),
        .I1(\tx_pe_data_r_reg_n_0_[8] ),
        .I2(p_0_in12_in),
        .I3(p_1_in11_in),
        .I4(\TX_DATA[23]_i_3_n_0 ),
        .O(\TX_DATA[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \TX_DATA[23]_i_3 
       (.I0(p_0_in8_in),
        .I1(p_1_in5_in),
        .I2(p_0_in6_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[24]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[7] ),
        .I1(p_1_in11_in),
        .I2(gen_cc_r),
        .O(\TX_DATA[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[25]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[6] ),
        .I1(p_1_in11_in),
        .I2(gen_cc_r),
        .O(\TX_DATA[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBBBBBB8)) 
    \TX_DATA[26]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[5] ),
        .I1(p_1_in11_in),
        .I2(p_0_in16_in),
        .I3(\TX_DATA[31]_i_3_n_0 ),
        .I4(gen_a_r),
        .I5(p_0_in14_in),
        .O(\TX_DATA[26]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h8B)) 
    \TX_DATA[27]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[4] ),
        .I1(p_1_in11_in),
        .I2(gen_cc_r),
        .O(\TX_DATA[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBBBBBB8)) 
    \TX_DATA[28]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[3] ),
        .I1(p_1_in11_in),
        .I2(p_0_in16_in),
        .I3(\TX_DATA[31]_i_3_n_0 ),
        .I4(gen_a_r),
        .I5(p_0_in14_in),
        .O(\TX_DATA[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBB8BBBBBBBB)) 
    \TX_DATA[29]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[2] ),
        .I1(p_1_in11_in),
        .I2(p_0_in16_in),
        .I3(\TX_DATA[31]_i_3_n_0 ),
        .I4(gen_a_r),
        .I5(p_0_in14_in),
        .O(\TX_DATA[29]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFEAA)) 
    \TX_DATA[2]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[29] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(\TX_DATA[2]_i_2_n_0 ),
        .O(\TX_DATA[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00FF0032)) 
    \TX_DATA[2]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(\gen_r_r_reg_n_0_[3] ),
        .I3(gen_sp_r),
        .I4(gen_spa_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \TX_DATA[30]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[1] ),
        .I1(p_1_in11_in),
        .I2(p_0_in14_in),
        .I3(\TX_DATA[30]_i_2_n_0 ),
        .I4(p_0_in16_in),
        .I5(\TX_DATA[30]_i_3_n_0 ),
        .O(\TX_DATA[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'hFF10)) 
    \TX_DATA[30]_i_2 
       (.I0(gen_spa_r),
        .I1(gen_sp_r),
        .I2(gen_a_r),
        .I3(gen_cc_r),
        .O(\TX_DATA[30]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hF1)) 
    \TX_DATA[30]_i_3 
       (.I0(gen_spa_r),
        .I1(gen_sp_r),
        .I2(gen_cc_r),
        .O(\TX_DATA[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[31]_i_1 
       (.I0(p_1_in11_in),
        .I1(p_0_in16_in),
        .I2(\TX_DATA[31]_i_3_n_0 ),
        .I3(gen_a_r),
        .I4(p_0_in14_in),
        .I5(p_1_in16_in),
        .O(\TX_DATA[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBB8888BBBBB8BB)) 
    \TX_DATA[31]_i_2 
       (.I0(\tx_pe_data_r_reg_n_0_[0] ),
        .I1(p_1_in11_in),
        .I2(p_0_in16_in),
        .I3(p_0_in14_in),
        .I4(\TX_DATA[31]_i_3_n_0 ),
        .I5(gen_a_r),
        .O(\TX_DATA[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \TX_DATA[31]_i_3 
       (.I0(gen_sp_r),
        .I1(gen_spa_r),
        .I2(gen_cc_r),
        .O(\TX_DATA[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFEAAFEFF)) 
    \TX_DATA[3]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[28] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(gen_cc_r),
        .O(\TX_DATA[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFEAA)) 
    \TX_DATA[4]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[27] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(\TX_DATA[4]_i_2_n_0 ),
        .O(\TX_DATA[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00030002)) 
    \TX_DATA[4]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(\gen_r_r_reg_n_0_[3] ),
        .I5(gen_cc_r),
        .O(\TX_DATA[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAEFFAEAA)) 
    \TX_DATA[5]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[26] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(\TX_DATA[5]_i_2_n_0 ),
        .O(\TX_DATA[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFFFEFF)) 
    \TX_DATA[5]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(gen_spa_r),
        .I3(\gen_r_r_reg_n_0_[3] ),
        .I4(gen_cc_r),
        .I5(gen_sp_r),
        .O(\TX_DATA[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAEFFAEAA)) 
    \TX_DATA[6]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[25] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(\TX_DATA[6]_i_2_n_0 ),
        .O(\TX_DATA[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00CD)) 
    \TX_DATA[6]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(\gen_r_r_reg_n_0_[3] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[7]_i_1 
       (.I0(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I1(\gen_r_r_reg_n_0_[3] ),
        .I2(\TX_DATA[31]_i_3_n_0 ),
        .I3(\gen_v_r_reg_n_0_[3] ),
        .I4(\gen_k_r_reg_n_0_[3] ),
        .I5(\gen_ecp_r_reg_n_0_[1] ),
        .O(TX_DATA_reg0));
  LUT5 #(
    .INIT(32'hFEFFFEAA)) 
    \TX_DATA[7]_i_2 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[24] ),
        .I2(\gen_pad_r_reg_n_0_[1] ),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I4(\TX_DATA[7]_i_3_n_0 ),
        .O(\TX_DATA[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \TX_DATA[7]_i_3 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(\gen_r_r_reg_n_0_[3] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'hEFEA)) 
    \TX_DATA[8]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(data0[0]),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(gen_cc_r),
        .O(\TX_DATA[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    \TX_DATA[9]_i_1 
       (.I0(\TX_DATA[9]_i_2_n_0 ),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(data0[1]),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .I4(\TX_DATA[15]_i_1_n_0 ),
        .I5(TXDATA[17]),
        .O(\TX_DATA[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \TX_DATA[9]_i_2 
       (.I0(gen_sp_r),
        .I1(gen_cc_r),
        .O(\TX_DATA[9]_i_2_n_0 ));
  FDRE \TX_DATA_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\TX_DATA[0]_i_1_n_0 ),
        .Q(TXDATA[24]),
        .R(1'b0));
  FDSE \TX_DATA_reg[10] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[10]_i_1_n_0 ),
        .Q(TXDATA[18]),
        .S(\TX_DATA[14]_i_1_n_0 ));
  FDSE \TX_DATA_reg[11] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[11]_i_1_n_0 ),
        .Q(TXDATA[19]),
        .S(1'b0));
  FDSE \TX_DATA_reg[12] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[12]_i_1_n_0 ),
        .Q(TXDATA[20]),
        .S(\TX_DATA[14]_i_1_n_0 ));
  FDSE \TX_DATA_reg[13] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[13]_i_1_n_0 ),
        .Q(TXDATA[21]),
        .S(1'b0));
  FDSE \TX_DATA_reg[14] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[14]_i_2_n_0 ),
        .Q(TXDATA[22]),
        .S(\TX_DATA[14]_i_1_n_0 ));
  FDSE \TX_DATA_reg[15] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[15]_i_2_n_0 ),
        .Q(TXDATA[23]),
        .S(1'b0));
  FDSE \TX_DATA_reg[16] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[16]_i_1_n_0 ),
        .Q(TXDATA[8]),
        .S(1'b0));
  FDSE \TX_DATA_reg[17] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[17]_i_1_n_0 ),
        .Q(TXDATA[9]),
        .S(1'b0));
  FDRE \TX_DATA_reg[18] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\TX_DATA[18]_i_1_n_0 ),
        .Q(TXDATA[10]),
        .R(1'b0));
  FDSE \TX_DATA_reg[19] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[19]_i_1_n_0 ),
        .Q(TXDATA[11]),
        .S(1'b0));
  FDSE \TX_DATA_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[1]_i_1_n_0 ),
        .Q(TXDATA[25]),
        .S(1'b0));
  FDSE \TX_DATA_reg[20] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[20]_i_1_n_0 ),
        .Q(TXDATA[12]),
        .S(1'b0));
  FDSE \TX_DATA_reg[21] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[21]_i_1_n_0 ),
        .Q(TXDATA[13]),
        .S(1'b0));
  FDSE \TX_DATA_reg[22] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[22]_i_1_n_0 ),
        .Q(TXDATA[14]),
        .S(1'b0));
  FDSE \TX_DATA_reg[23] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[23]_i_1_n_0 ),
        .D(\TX_DATA[23]_i_2_n_0 ),
        .Q(TXDATA[15]),
        .S(1'b0));
  FDRE \TX_DATA_reg[24] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[24]_i_1_n_0 ),
        .Q(TXDATA[0]),
        .R(p_1_in16_in));
  FDRE \TX_DATA_reg[25] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[25]_i_1_n_0 ),
        .Q(TXDATA[1]),
        .R(p_1_in16_in));
  FDSE \TX_DATA_reg[26] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[26]_i_1_n_0 ),
        .Q(TXDATA[2]),
        .S(p_1_in16_in));
  FDSE \TX_DATA_reg[27] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[27]_i_1_n_0 ),
        .Q(TXDATA[3]),
        .S(p_1_in16_in));
  FDSE \TX_DATA_reg[28] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[28]_i_1_n_0 ),
        .Q(TXDATA[4]),
        .S(p_1_in16_in));
  FDRE \TX_DATA_reg[29] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[29]_i_1_n_0 ),
        .Q(TXDATA[5]),
        .R(p_1_in16_in));
  FDSE \TX_DATA_reg[2] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[2]_i_1_n_0 ),
        .Q(TXDATA[26]),
        .S(1'b0));
  FDSE \TX_DATA_reg[30] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[30]_i_1_n_0 ),
        .Q(TXDATA[6]),
        .S(p_1_in16_in));
  FDRE \TX_DATA_reg[31] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[31]_i_1_n_0 ),
        .D(\TX_DATA[31]_i_2_n_0 ),
        .Q(TXDATA[7]),
        .R(p_1_in16_in));
  FDSE \TX_DATA_reg[3] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[3]_i_1_n_0 ),
        .Q(TXDATA[27]),
        .S(1'b0));
  FDSE \TX_DATA_reg[4] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[4]_i_1_n_0 ),
        .Q(TXDATA[28]),
        .S(1'b0));
  FDSE \TX_DATA_reg[5] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[5]_i_1_n_0 ),
        .Q(TXDATA[29]),
        .S(1'b0));
  FDSE \TX_DATA_reg[6] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[6]_i_1_n_0 ),
        .Q(TXDATA[30]),
        .S(1'b0));
  FDSE \TX_DATA_reg[7] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[7]_i_2_n_0 ),
        .Q(TXDATA[31]),
        .S(1'b0));
  FDSE \TX_DATA_reg[8] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[8]_i_1_n_0 ),
        .Q(TXDATA[16]),
        .S(1'b0));
  FDRE \TX_DATA_reg[9] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\TX_DATA[9]_i_1_n_0 ),
        .Q(TXDATA[17]),
        .R(1'b0));
  FDRE gen_a_r_reg
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_a_i),
        .Q(gen_a_r),
        .R(1'b0));
  FDRE gen_cc_r_reg
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_cc_i),
        .Q(gen_cc_r),
        .R(1'b0));
  FDRE \gen_ecp_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_ecp_i),
        .Q(\gen_ecp_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \gen_k_r_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_k_r_reg[0]_0 [3]),
        .Q(p_0_in16_in),
        .R(1'b0));
  FDRE \gen_k_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_k_r_reg[0]_0 [2]),
        .Q(p_0_in8_in),
        .R(1'b0));
  FDRE \gen_k_r_reg[2] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_k_r_reg[0]_0 [1]),
        .Q(p_0_in4_in),
        .R(1'b0));
  FDRE \gen_k_r_reg[3] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_k_r_reg[0]_0 [0]),
        .Q(\gen_k_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \gen_pad_r_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_pad_r_reg[0]_0 [1]),
        .Q(p_0_in12_in),
        .R(1'b0));
  FDRE \gen_pad_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_pad_r_reg[0]_0 [0]),
        .Q(\gen_pad_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \gen_r_r_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_r_r_reg[0]_0 [3]),
        .Q(p_0_in14_in),
        .R(1'b0));
  FDRE \gen_r_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_r_r_reg[0]_0 [2]),
        .Q(p_0_in6_in),
        .R(1'b0));
  FDRE \gen_r_r_reg[2] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_r_r_reg[0]_0 [1]),
        .Q(p_0_in),
        .R(1'b0));
  FDRE \gen_r_r_reg[3] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_r_r_reg[0]_0 [0]),
        .Q(\gen_r_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \gen_scp_r_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_scp_striped_i),
        .Q(p_1_in16_in),
        .R(1'b0));
  FDRE gen_sp_r_reg
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(GEN_SP),
        .Q(gen_sp_r),
        .R(1'b0));
  FDRE gen_spa_r_reg
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(gen_spa_i),
        .Q(gen_spa_r),
        .R(1'b0));
  FDRE \gen_v_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_v_r_reg[1]_0 [2]),
        .Q(p_1_in5_in),
        .R(1'b0));
  FDRE \gen_v_r_reg[2] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_v_r_reg[1]_0 [1]),
        .Q(p_1_in),
        .R(1'b0));
  FDRE \gen_v_r_reg[3] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_v_r_reg[1]_0 [0]),
        .Q(\gen_v_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [31]),
        .Q(\tx_pe_data_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[10] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [21]),
        .Q(\tx_pe_data_r_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[11] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [20]),
        .Q(\tx_pe_data_r_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[12] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [19]),
        .Q(\tx_pe_data_r_reg_n_0_[12] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[13] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [18]),
        .Q(\tx_pe_data_r_reg_n_0_[13] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[14] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [17]),
        .Q(\tx_pe_data_r_reg_n_0_[14] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[15] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [16]),
        .Q(\tx_pe_data_r_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[16] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [15]),
        .Q(data0[7]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[17] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [14]),
        .Q(data0[6]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[18] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [13]),
        .Q(data0[5]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[19] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [12]),
        .Q(data0[4]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [30]),
        .Q(\tx_pe_data_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[20] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [11]),
        .Q(data0[3]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[21] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [10]),
        .Q(data0[2]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[22] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [9]),
        .Q(data0[1]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[23] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [8]),
        .Q(data0[0]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[24] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [7]),
        .Q(\tx_pe_data_r_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[25] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [6]),
        .Q(\tx_pe_data_r_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[26] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [5]),
        .Q(\tx_pe_data_r_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[27] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [4]),
        .Q(\tx_pe_data_r_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[28] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [3]),
        .Q(\tx_pe_data_r_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[29] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [2]),
        .Q(\tx_pe_data_r_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[2] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [29]),
        .Q(\tx_pe_data_r_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[30] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [1]),
        .Q(\tx_pe_data_r_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[31] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [0]),
        .Q(\tx_pe_data_r_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[3] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [28]),
        .Q(\tx_pe_data_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[4] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [27]),
        .Q(\tx_pe_data_r_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[5] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [26]),
        .Q(\tx_pe_data_r_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[6] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [25]),
        .Q(\tx_pe_data_r_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[7] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [24]),
        .Q(\tx_pe_data_r_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[8] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [23]),
        .Q(\tx_pe_data_r_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[9] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_r_reg[0]_0 [22]),
        .Q(\tx_pe_data_r_reg_n_0_[9] ),
        .R(1'b0));
  FDRE \tx_pe_data_v_r_reg[0] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_v_r_reg[0]_0 [1]),
        .Q(p_1_in11_in),
        .R(1'b0));
  FDRE \tx_pe_data_v_r_reg[1] 
       (.C(\TX_DATA_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_v_r_reg[0]_0 [0]),
        .Q(\tx_pe_data_v_r_reg_n_0_[1] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_TX_LL" *) 
module top_aurora_0_0_aurora_8b10b_0_TX_LL
   (gen_cc_i,
    tx_dst_rdy,
    gen_scp_striped_i,
    gen_ecp_i,
    s_axi_tx_tready,
    \TX_PE_DATA_V_reg[0] ,
    \GEN_PAD_reg[0] ,
    \TX_PE_DATA_reg[0] ,
    \tx_pe_data_r_reg[0] ,
    Q,
    p_0_in,
    s_axi_tx_tlast,
    \tx_pe_data_v_r_reg[1] ,
    s_axi_tx_tvalid,
    s_axi_tx_tkeep,
    s_axi_tx_tdata);
  output gen_cc_i;
  output tx_dst_rdy;
  output [0:0]gen_scp_striped_i;
  output gen_ecp_i;
  output s_axi_tx_tready;
  output [1:0]\TX_PE_DATA_V_reg[0] ;
  output [1:0]\GEN_PAD_reg[0] ;
  output [31:0]\TX_PE_DATA_reg[0] ;
  input \tx_pe_data_r_reg[0] ;
  input Q;
  input p_0_in;
  input s_axi_tx_tlast;
  input \tx_pe_data_v_r_reg[1] ;
  input s_axi_tx_tvalid;
  input [0:3]s_axi_tx_tkeep;
  input [0:31]s_axi_tx_tdata;

  wire [1:0]\GEN_PAD_reg[0] ;
  wire Q;
  wire [1:0]\TX_PE_DATA_V_reg[0] ;
  wire [31:0]\TX_PE_DATA_reg[0] ;
  wire do_cc_r;
  wire gen_cc_i;
  wire gen_ecp_i;
  wire [0:0]gen_scp_striped_i;
  wire p_0_in;
  wire pdu_ok_c;
  wire [0:31]s_axi_tx_tdata;
  wire [0:3]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire storage_pad_r0;
  wire storage_v_r0;
  wire tx_dst_rdy;
  wire tx_ll_control_i_n_10;
  wire tx_ll_control_i_n_7;
  wire tx_ll_datapath_i_n_0;
  wire \tx_pe_data_r_reg[0] ;
  wire \tx_pe_data_v_r_reg[1] ;

  top_aurora_0_0_aurora_8b10b_0_TX_LL_CONTROL tx_ll_control_i
       (.D(tx_ll_control_i_n_7),
        .E(pdu_ok_c),
        .GEN_ECP_reg_0(\tx_pe_data_r_reg[0] ),
        .Q(Q),
        .TX_DST_RDY_N_reg_0(tx_dst_rdy),
        .TX_DST_RDY_N_reg_1(tx_ll_control_i_n_10),
        .do_cc_r(do_cc_r),
        .gen_cc_i(gen_cc_i),
        .gen_ecp_i(gen_ecp_i),
        .gen_scp_striped_i(gen_scp_striped_i),
        .idle_r_reg_0(\tx_pe_data_v_r_reg[1] ),
        .in_frame_r_reg(tx_ll_datapath_i_n_0),
        .p_0_in(p_0_in),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .storage_pad_r0(storage_pad_r0),
        .storage_v_r0(storage_v_r0));
  top_aurora_0_0_aurora_8b10b_0_TX_LL_DATAPATH tx_ll_datapath_i
       (.D(tx_ll_control_i_n_7),
        .E(pdu_ok_c),
        .\GEN_PAD_reg[0]_0 (\GEN_PAD_reg[0] ),
        .\TX_PE_DATA_V_reg[0]_0 (\TX_PE_DATA_V_reg[0] ),
        .\TX_PE_DATA_reg[0]_0 (\TX_PE_DATA_reg[0] ),
        .do_cc_r(do_cc_r),
        .in_frame_r_reg_0(tx_ll_datapath_i_n_0),
        .in_frame_r_reg_1(tx_ll_control_i_n_10),
        .p_0_in(p_0_in),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .storage_pad_r0(storage_pad_r0),
        .storage_v_r0(storage_v_r0),
        .tx_dst_rdy(tx_dst_rdy),
        .\tx_pe_data_r_reg[0]_0 (\tx_pe_data_r_reg[0] ),
        .\tx_pe_data_v_r_reg[1]_0 (\tx_pe_data_v_r_reg[1] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_TX_LL_CONTROL" *) 
module top_aurora_0_0_aurora_8b10b_0_TX_LL_CONTROL
   (gen_cc_i,
    do_cc_r,
    E,
    TX_DST_RDY_N_reg_0,
    gen_scp_striped_i,
    gen_ecp_i,
    s_axi_tx_tready,
    D,
    storage_pad_r0,
    storage_v_r0,
    TX_DST_RDY_N_reg_1,
    GEN_ECP_reg_0,
    Q,
    p_0_in,
    s_axi_tx_tlast,
    idle_r_reg_0,
    s_axi_tx_tvalid,
    s_axi_tx_tkeep,
    in_frame_r_reg);
  output gen_cc_i;
  output do_cc_r;
  output [0:0]E;
  output TX_DST_RDY_N_reg_0;
  output [0:0]gen_scp_striped_i;
  output gen_ecp_i;
  output s_axi_tx_tready;
  output [0:0]D;
  output storage_pad_r0;
  output storage_v_r0;
  output TX_DST_RDY_N_reg_1;
  input GEN_ECP_reg_0;
  input Q;
  input p_0_in;
  input s_axi_tx_tlast;
  input idle_r_reg_0;
  input s_axi_tx_tvalid;
  input [0:3]s_axi_tx_tkeep;
  input in_frame_r_reg;

  wire [0:0]D;
  wire [0:0]E;
  wire GEN_ECP0;
  wire GEN_ECP_reg_0;
  wire GEN_SCP_i_1_n_0;
  wire Q;
  wire TX_DST_RDY_N_reg_0;
  wire TX_DST_RDY_N_reg_1;
  wire data_r;
  wire data_to_eof_1_r;
  wire data_to_eof_2_r;
  wire do_cc_r;
  wire gen_cc_i;
  wire gen_ecp_i;
  wire [0:0]gen_scp_striped_i;
  wire idle_r;
  wire idle_r_reg_0;
  wire in_frame_r_reg;
  wire next_data_c;
  wire next_data_to_eof_1_c;
  wire next_idle_c;
  wire next_sof_to_eof_1_c;
  wire p_0_in;
  wire [0:3]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire sof_to_data_r;
  wire sof_to_data_r_i_1_n_0;
  wire sof_to_eof_1_r;
  wire sof_to_eof_1_r_i_3_n_0;
  wire sof_to_eof_2_r;
  wire storage_pad_r0;
  wire storage_v_r0;
  wire storage_v_r_i_3_n_0;
  wire tx_dst_rdy_n_c;

  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    GEN_ECP_i_1
       (.I0(data_to_eof_2_r),
        .I1(sof_to_eof_2_r),
        .I2(do_cc_r),
        .O(GEN_ECP0));
  FDRE GEN_ECP_reg
       (.C(GEN_ECP_reg_0),
        .CE(1'b1),
        .D(GEN_ECP0),
        .Q(gen_ecp_i),
        .R(p_0_in));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'h54)) 
    GEN_SCP_i_1
       (.I0(do_cc_r),
        .I1(sof_to_eof_1_r),
        .I2(sof_to_data_r),
        .O(GEN_SCP_i_1_n_0));
  FDRE GEN_SCP_reg
       (.C(GEN_ECP_reg_0),
        .CE(1'b1),
        .D(GEN_SCP_i_1_n_0),
        .Q(gen_scp_striped_i),
        .R(p_0_in));
  LUT6 #(
    .INIT(64'hFFEFFFEFFFEFFAEA)) 
    TX_DST_RDY_N_i_1
       (.I0(Q),
        .I1(data_to_eof_1_r),
        .I2(do_cc_r),
        .I3(sof_to_eof_1_r),
        .I4(next_sof_to_eof_1_c),
        .I5(next_data_to_eof_1_c),
        .O(tx_dst_rdy_n_c));
  FDSE TX_DST_RDY_N_reg
       (.C(GEN_ECP_reg_0),
        .CE(1'b1),
        .D(tx_dst_rdy_n_c),
        .Q(TX_DST_RDY_N_reg_0),
        .S(p_0_in));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'hDFDFDF00)) 
    data_r_i_1
       (.I0(s_axi_tx_tlast),
        .I1(TX_DST_RDY_N_reg_0),
        .I2(s_axi_tx_tvalid),
        .I3(sof_to_data_r),
        .I4(data_r),
        .O(next_data_c));
  FDRE data_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(next_data_c),
        .Q(data_r),
        .R(p_0_in));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h20202000)) 
    data_to_eof_1_r_i_1
       (.I0(s_axi_tx_tlast),
        .I1(TX_DST_RDY_N_reg_0),
        .I2(s_axi_tx_tvalid),
        .I3(sof_to_data_r),
        .I4(data_r),
        .O(next_data_to_eof_1_c));
  FDRE data_to_eof_1_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(next_data_to_eof_1_c),
        .Q(data_to_eof_1_r),
        .R(p_0_in));
  FDRE data_to_eof_2_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(data_to_eof_1_r),
        .Q(data_to_eof_2_r),
        .R(p_0_in));
  FDRE do_cc_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(1'b1),
        .D(Q),
        .Q(do_cc_r),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_cc_flop_0_i
       (.C(GEN_ECP_reg_0),
        .CE(1'b1),
        .D(do_cc_r),
        .Q(gen_cc_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000001160000)) 
    \gen_pad_r[1]_i_1 
       (.I0(s_axi_tx_tkeep[3]),
        .I1(s_axi_tx_tkeep[0]),
        .I2(s_axi_tx_tkeep[1]),
        .I3(s_axi_tx_tkeep[2]),
        .I4(s_axi_tx_tlast),
        .I5(storage_v_r_i_3_n_0),
        .O(D));
  LUT6 #(
    .INIT(64'hFBFBFBFBFBFBFB00)) 
    idle_r_i_1
       (.I0(TX_DST_RDY_N_reg_0),
        .I1(s_axi_tx_tvalid),
        .I2(idle_r_reg_0),
        .I3(sof_to_eof_2_r),
        .I4(data_to_eof_2_r),
        .I5(idle_r),
        .O(next_idle_c));
  FDSE idle_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(next_idle_c),
        .Q(idle_r),
        .S(p_0_in));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'hDFDF0010)) 
    in_frame_r_i_1
       (.I0(s_axi_tx_tlast),
        .I1(TX_DST_RDY_N_reg_0),
        .I2(s_axi_tx_tvalid),
        .I3(idle_r_reg_0),
        .I4(in_frame_r_reg),
        .O(TX_DST_RDY_N_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT1 #(
    .INIT(2'h1)) 
    s_axi_tx_tready_INST_0
       (.I0(TX_DST_RDY_N_reg_0),
        .O(s_axi_tx_tready));
  LUT6 #(
    .INIT(64'h0000000000005554)) 
    sof_to_data_r_i_1
       (.I0(s_axi_tx_tlast),
        .I1(idle_r),
        .I2(data_to_eof_2_r),
        .I3(sof_to_eof_2_r),
        .I4(idle_r_reg_0),
        .I5(sof_to_eof_1_r_i_3_n_0),
        .O(sof_to_data_r_i_1_n_0));
  FDRE sof_to_data_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(sof_to_data_r_i_1_n_0),
        .Q(sof_to_data_r),
        .R(p_0_in));
  LUT6 #(
    .INIT(64'h000000000000AAA8)) 
    sof_to_eof_1_r_i_2
       (.I0(s_axi_tx_tlast),
        .I1(idle_r),
        .I2(data_to_eof_2_r),
        .I3(sof_to_eof_2_r),
        .I4(idle_r_reg_0),
        .I5(sof_to_eof_1_r_i_3_n_0),
        .O(next_sof_to_eof_1_c));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'hB)) 
    sof_to_eof_1_r_i_3
       (.I0(TX_DST_RDY_N_reg_0),
        .I1(s_axi_tx_tvalid),
        .O(sof_to_eof_1_r_i_3_n_0));
  FDRE sof_to_eof_1_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(next_sof_to_eof_1_c),
        .Q(sof_to_eof_1_r),
        .R(p_0_in));
  FDRE sof_to_eof_2_r_reg
       (.C(GEN_ECP_reg_0),
        .CE(E),
        .D(sof_to_eof_1_r),
        .Q(sof_to_eof_2_r),
        .R(p_0_in));
  LUT6 #(
    .INIT(64'h0000000068800000)) 
    storage_pad_r_i_1
       (.I0(s_axi_tx_tkeep[3]),
        .I1(s_axi_tx_tkeep[0]),
        .I2(s_axi_tx_tkeep[1]),
        .I3(s_axi_tx_tkeep[2]),
        .I4(s_axi_tx_tlast),
        .I5(storage_v_r_i_3_n_0),
        .O(storage_pad_r0));
  LUT1 #(
    .INIT(2'h1)) 
    storage_v_r_i_1
       (.I0(do_cc_r),
        .O(E));
  LUT6 #(
    .INIT(64'h00000000FDD5D557)) 
    storage_v_r_i_2
       (.I0(s_axi_tx_tlast),
        .I1(s_axi_tx_tkeep[3]),
        .I2(s_axi_tx_tkeep[0]),
        .I3(s_axi_tx_tkeep[1]),
        .I4(s_axi_tx_tkeep[2]),
        .I5(storage_v_r_i_3_n_0),
        .O(storage_v_r0));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'hDFDD)) 
    storage_v_r_i_3
       (.I0(s_axi_tx_tvalid),
        .I1(TX_DST_RDY_N_reg_0),
        .I2(in_frame_r_reg),
        .I3(idle_r_reg_0),
        .O(storage_v_r_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_TX_LL_DATAPATH" *) 
module top_aurora_0_0_aurora_8b10b_0_TX_LL_DATAPATH
   (in_frame_r_reg_0,
    \TX_PE_DATA_V_reg[0]_0 ,
    \GEN_PAD_reg[0]_0 ,
    \TX_PE_DATA_reg[0]_0 ,
    E,
    storage_v_r0,
    \tx_pe_data_r_reg[0]_0 ,
    storage_pad_r0,
    p_0_in,
    in_frame_r_reg_1,
    \tx_pe_data_v_r_reg[1]_0 ,
    tx_dst_rdy,
    s_axi_tx_tvalid,
    do_cc_r,
    D,
    s_axi_tx_tdata);
  output in_frame_r_reg_0;
  output [1:0]\TX_PE_DATA_V_reg[0]_0 ;
  output [1:0]\GEN_PAD_reg[0]_0 ;
  output [31:0]\TX_PE_DATA_reg[0]_0 ;
  input [0:0]E;
  input storage_v_r0;
  input \tx_pe_data_r_reg[0]_0 ;
  input storage_pad_r0;
  input p_0_in;
  input in_frame_r_reg_1;
  input \tx_pe_data_v_r_reg[1]_0 ;
  input tx_dst_rdy;
  input s_axi_tx_tvalid;
  input do_cc_r;
  input [0:0]D;
  input [0:31]s_axi_tx_tdata;

  wire [0:0]D;
  wire [0:0]E;
  wire [1:0]\GEN_PAD_reg[0]_0 ;
  wire [1:0]\TX_PE_DATA_V_reg[0]_0 ;
  wire [31:0]\TX_PE_DATA_reg[0]_0 ;
  wire do_cc_r;
  wire \gen_pad_r_reg_n_0_[0] ;
  wire \gen_pad_r_reg_n_0_[1] ;
  wire in_frame_r_reg_0;
  wire in_frame_r_reg_1;
  wire p_0_in;
  wire p_12_in;
  wire [31:16]p_1_in;
  wire [0:31]s_axi_tx_tdata;
  wire s_axi_tx_tvalid;
  wire storage_pad_r;
  wire storage_pad_r0;
  wire storage_v_r;
  wire storage_v_r0;
  wire tx_dst_rdy;
  wire [0:31]tx_pe_data_r;
  wire \tx_pe_data_r_reg[0]_0 ;
  wire \tx_pe_data_v_r_reg[1]_0 ;
  wire \tx_pe_data_v_r_reg_n_0_[0] ;
  wire \tx_pe_data_v_r_reg_n_0_[1] ;

  FDRE \GEN_PAD_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_pad_r_reg_n_0_[0] ),
        .Q(\GEN_PAD_reg[0]_0 [1]),
        .R(do_cc_r));
  FDRE \GEN_PAD_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\gen_pad_r_reg_n_0_[1] ),
        .Q(\GEN_PAD_reg[0]_0 [0]),
        .R(do_cc_r));
  FDRE \TX_PE_DATA_V_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_v_r_reg_n_0_[0] ),
        .Q(\TX_PE_DATA_V_reg[0]_0 [1]),
        .R(do_cc_r));
  FDRE \TX_PE_DATA_V_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(\tx_pe_data_v_r_reg_n_0_[1] ),
        .Q(\TX_PE_DATA_V_reg[0]_0 [0]),
        .R(do_cc_r));
  FDRE \TX_PE_DATA_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[0]),
        .Q(\TX_PE_DATA_reg[0]_0 [31]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[10] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[10]),
        .Q(\TX_PE_DATA_reg[0]_0 [21]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[11] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[11]),
        .Q(\TX_PE_DATA_reg[0]_0 [20]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[12] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[12]),
        .Q(\TX_PE_DATA_reg[0]_0 [19]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[13] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[13]),
        .Q(\TX_PE_DATA_reg[0]_0 [18]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[14] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[14]),
        .Q(\TX_PE_DATA_reg[0]_0 [17]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[15] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[15]),
        .Q(\TX_PE_DATA_reg[0]_0 [16]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[16] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[16]),
        .Q(\TX_PE_DATA_reg[0]_0 [15]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[17] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[17]),
        .Q(\TX_PE_DATA_reg[0]_0 [14]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[18] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[18]),
        .Q(\TX_PE_DATA_reg[0]_0 [13]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[19] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[19]),
        .Q(\TX_PE_DATA_reg[0]_0 [12]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[1]),
        .Q(\TX_PE_DATA_reg[0]_0 [30]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[20] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[20]),
        .Q(\TX_PE_DATA_reg[0]_0 [11]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[21] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[21]),
        .Q(\TX_PE_DATA_reg[0]_0 [10]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[22] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[22]),
        .Q(\TX_PE_DATA_reg[0]_0 [9]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[23] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[23]),
        .Q(\TX_PE_DATA_reg[0]_0 [8]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[24] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[24]),
        .Q(\TX_PE_DATA_reg[0]_0 [7]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[25] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[25]),
        .Q(\TX_PE_DATA_reg[0]_0 [6]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[26] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[26]),
        .Q(\TX_PE_DATA_reg[0]_0 [5]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[27] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[27]),
        .Q(\TX_PE_DATA_reg[0]_0 [4]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[28] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[28]),
        .Q(\TX_PE_DATA_reg[0]_0 [3]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[29] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[29]),
        .Q(\TX_PE_DATA_reg[0]_0 [2]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[2] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[2]),
        .Q(\TX_PE_DATA_reg[0]_0 [29]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[30] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[30]),
        .Q(\TX_PE_DATA_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[31] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[31]),
        .Q(\TX_PE_DATA_reg[0]_0 [0]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[3] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[3]),
        .Q(\TX_PE_DATA_reg[0]_0 [28]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[4] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[4]),
        .Q(\TX_PE_DATA_reg[0]_0 [27]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[5] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[5]),
        .Q(\TX_PE_DATA_reg[0]_0 [26]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[6] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[6]),
        .Q(\TX_PE_DATA_reg[0]_0 [25]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[7] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[7]),
        .Q(\TX_PE_DATA_reg[0]_0 [24]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[8] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[8]),
        .Q(\TX_PE_DATA_reg[0]_0 [23]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[9] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(tx_pe_data_r[9]),
        .Q(\TX_PE_DATA_reg[0]_0 [22]),
        .R(1'b0));
  FDRE \gen_pad_r_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(storage_pad_r),
        .Q(\gen_pad_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \gen_pad_r_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(D),
        .Q(\gen_pad_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE in_frame_r_reg
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(1'b1),
        .D(in_frame_r_reg_1),
        .Q(in_frame_r_reg_0),
        .R(p_0_in));
  FDRE storage_pad_r_reg
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(storage_pad_r0),
        .Q(storage_pad_r),
        .R(1'b0));
  FDRE \storage_r_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[16]),
        .Q(p_1_in[31]),
        .R(1'b0));
  FDRE \storage_r_reg[10] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[26]),
        .Q(p_1_in[21]),
        .R(1'b0));
  FDRE \storage_r_reg[11] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[27]),
        .Q(p_1_in[20]),
        .R(1'b0));
  FDRE \storage_r_reg[12] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[28]),
        .Q(p_1_in[19]),
        .R(1'b0));
  FDRE \storage_r_reg[13] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[29]),
        .Q(p_1_in[18]),
        .R(1'b0));
  FDRE \storage_r_reg[14] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[30]),
        .Q(p_1_in[17]),
        .R(1'b0));
  FDRE \storage_r_reg[15] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[31]),
        .Q(p_1_in[16]),
        .R(1'b0));
  FDRE \storage_r_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[17]),
        .Q(p_1_in[30]),
        .R(1'b0));
  FDRE \storage_r_reg[2] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[18]),
        .Q(p_1_in[29]),
        .R(1'b0));
  FDRE \storage_r_reg[3] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[19]),
        .Q(p_1_in[28]),
        .R(1'b0));
  FDRE \storage_r_reg[4] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[20]),
        .Q(p_1_in[27]),
        .R(1'b0));
  FDRE \storage_r_reg[5] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[21]),
        .Q(p_1_in[26]),
        .R(1'b0));
  FDRE \storage_r_reg[6] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[22]),
        .Q(p_1_in[25]),
        .R(1'b0));
  FDRE \storage_r_reg[7] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[23]),
        .Q(p_1_in[24]),
        .R(1'b0));
  FDRE \storage_r_reg[8] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[24]),
        .Q(p_1_in[23]),
        .R(1'b0));
  FDRE \storage_r_reg[9] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[25]),
        .Q(p_1_in[22]),
        .R(1'b0));
  FDRE storage_v_r_reg
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(storage_v_r0),
        .Q(storage_v_r),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[31]),
        .Q(tx_pe_data_r[0]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[10] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[21]),
        .Q(tx_pe_data_r[10]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[11] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[20]),
        .Q(tx_pe_data_r[11]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[12] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[19]),
        .Q(tx_pe_data_r[12]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[13] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[18]),
        .Q(tx_pe_data_r[13]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[14] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[17]),
        .Q(tx_pe_data_r[14]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[15] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[16]),
        .Q(tx_pe_data_r[15]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[16] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[0]),
        .Q(tx_pe_data_r[16]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[17] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[1]),
        .Q(tx_pe_data_r[17]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[18] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[2]),
        .Q(tx_pe_data_r[18]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[19] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[3]),
        .Q(tx_pe_data_r[19]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[30]),
        .Q(tx_pe_data_r[1]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[20] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[4]),
        .Q(tx_pe_data_r[20]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[21] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[5]),
        .Q(tx_pe_data_r[21]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[22] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[6]),
        .Q(tx_pe_data_r[22]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[23] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[7]),
        .Q(tx_pe_data_r[23]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[24] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[8]),
        .Q(tx_pe_data_r[24]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[25] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[9]),
        .Q(tx_pe_data_r[25]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[26] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[10]),
        .Q(tx_pe_data_r[26]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[27] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[11]),
        .Q(tx_pe_data_r[27]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[28] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[12]),
        .Q(tx_pe_data_r[28]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[29] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[13]),
        .Q(tx_pe_data_r[29]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[2] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[29]),
        .Q(tx_pe_data_r[2]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[30] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[14]),
        .Q(tx_pe_data_r[30]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[31] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(s_axi_tx_tdata[15]),
        .Q(tx_pe_data_r[31]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[3] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[28]),
        .Q(tx_pe_data_r[3]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[4] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[27]),
        .Q(tx_pe_data_r[4]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[5] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[26]),
        .Q(tx_pe_data_r[5]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[6] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[25]),
        .Q(tx_pe_data_r[6]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[7] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[24]),
        .Q(tx_pe_data_r[7]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[8] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[23]),
        .Q(tx_pe_data_r[8]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[9] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_1_in[22]),
        .Q(tx_pe_data_r[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0D00)) 
    \tx_pe_data_v_r[1]_i_1 
       (.I0(\tx_pe_data_v_r_reg[1]_0 ),
        .I1(in_frame_r_reg_0),
        .I2(tx_dst_rdy),
        .I3(s_axi_tx_tvalid),
        .O(p_12_in));
  FDRE \tx_pe_data_v_r_reg[0] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(storage_v_r),
        .Q(\tx_pe_data_v_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \tx_pe_data_v_r_reg[1] 
       (.C(\tx_pe_data_r_reg[0]_0 ),
        .CE(E),
        .D(p_12_in),
        .Q(\tx_pe_data_v_r_reg_n_0_[1] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_VALID_DATA_COUNTER" *) 
module top_aurora_0_0_aurora_8b10b_0_VALID_DATA_COUNTER
   (D,
    Q,
    end_storage_r_reg,
    FRAME_ERR_RESULT0,
    excess_c,
    end_storage_r0,
    \STORAGE_CE_reg[0] ,
    stage_3_end_storage_r,
    stage_2_start_with_data_r,
    stage_2_frame_err_r,
    stage_2_end_after_start_r,
    stage_2_end_before_start_r,
    storage_not_empty_c__0,
    SR,
    \COUNT_reg[0]_0 ,
    \COUNT_reg[0]_1 );
  output [1:0]D;
  output [1:0]Q;
  output [0:0]end_storage_r_reg;
  output FRAME_ERR_RESULT0;
  output excess_c;
  output end_storage_r0;
  input [1:0]\STORAGE_CE_reg[0] ;
  input stage_3_end_storage_r;
  input stage_2_start_with_data_r;
  input stage_2_frame_err_r;
  input stage_2_end_after_start_r;
  input stage_2_end_before_start_r;
  input storage_not_empty_c__0;
  input [0:0]SR;
  input [1:0]\COUNT_reg[0]_0 ;
  input \COUNT_reg[0]_1 ;

  wire [1:0]\COUNT_reg[0]_0 ;
  wire \COUNT_reg[0]_1 ;
  wire [1:0]D;
  wire FRAME_ERR_RESULT0;
  wire FRAME_ERR_RESULT2;
  wire [1:0]Q;
  wire [0:0]SR;
  wire [1:0]\STORAGE_CE_reg[0] ;
  wire end_storage_r0;
  wire [0:0]end_storage_r_reg;
  wire excess_c;
  wire stage_2_end_after_start_r;
  wire stage_2_end_before_start_r;
  wire stage_2_frame_err_r;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire storage_not_empty_c__0;

  FDRE \COUNT_reg[0] 
       (.C(\COUNT_reg[0]_1 ),
        .CE(1'b1),
        .D(\COUNT_reg[0]_0 [1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \COUNT_reg[1] 
       (.C(\COUNT_reg[0]_1 ),
        .CE(1'b1),
        .D(\COUNT_reg[0]_0 [0]),
        .Q(Q[0]),
        .R(SR));
  LUT6 #(
    .INIT(64'hCCFECCFCFFFECCFC)) 
    FRAME_ERR_RESULT_i_1
       (.I0(FRAME_ERR_RESULT2),
        .I1(stage_2_frame_err_r),
        .I2(stage_2_end_after_start_r),
        .I3(stage_2_start_with_data_r),
        .I4(stage_2_end_before_start_r),
        .I5(storage_not_empty_c__0),
        .O(FRAME_ERR_RESULT0));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'hFEE0)) 
    SRC_RDY_N_i_2
       (.I0(Q[0]),
        .I1(\STORAGE_CE_reg[0] [0]),
        .I2(\STORAGE_CE_reg[0] [1]),
        .I3(Q[1]),
        .O(excess_c));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFAEF)) 
    \STORAGE_CE[0]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\STORAGE_CE_reg[0] [1]),
        .I3(\STORAGE_CE_reg[0] [0]),
        .I4(stage_3_end_storage_r),
        .I5(stage_2_start_with_data_r),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \STORAGE_CE[1]_i_1 
       (.I0(Q[1]),
        .I1(\STORAGE_CE_reg[0] [0]),
        .I2(Q[0]),
        .I3(\STORAGE_CE_reg[0] [1]),
        .I4(stage_3_end_storage_r),
        .I5(stage_2_start_with_data_r),
        .O(D[0]));
  LUT4 #(
    .INIT(16'hF404)) 
    end_storage_r_i_1
       (.I0(FRAME_ERR_RESULT2),
        .I1(stage_2_end_before_start_r),
        .I2(stage_2_start_with_data_r),
        .I3(stage_2_end_after_start_r),
        .O(end_storage_r0));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    end_storage_r_i_2
       (.I0(Q[0]),
        .I1(\STORAGE_CE_reg[0] [0]),
        .I2(\STORAGE_CE_reg[0] [1]),
        .I3(Q[1]),
        .O(FRAME_ERR_RESULT2));
  LUT6 #(
    .INIT(64'hEFFFFEEF10011000)) 
    \storage_count_r[0]_i_2 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(Q[0]),
        .I3(\STORAGE_CE_reg[0] [0]),
        .I4(\STORAGE_CE_reg[0] [1]),
        .I5(Q[1]),
        .O(end_storage_r_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync
   (D,
    gt_reset,
    init_clk_in);
  output [0:0]D;
  input gt_reset;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign D[0] = s_level_out_d3;
  assign p_level_in_int = gt_reset;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_10
   (init_clk_in);
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_15
   (E,
    \FSM_sequential_rx_state_reg[3] ,
    \FSM_sequential_rx_state_reg[3]_0 ,
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0,
    init_clk_in,
    \FSM_sequential_rx_state_reg[0] ,
    \FSM_sequential_rx_state_reg[0]_0 ,
    \FSM_sequential_rx_state_reg[0]_1 ,
    Q,
    \FSM_sequential_rx_state_reg[0]_2 ,
    \FSM_sequential_rx_state_reg[0]_3 ,
    reset_time_out_reg,
    reset_time_out_reg_0,
    reset_time_out_reg_1,
    reset_time_out_reg_2,
    reset_time_out_reg_3,
    recclk_mon_count_reset);
  output [0:0]E;
  output \FSM_sequential_rx_state_reg[3] ;
  output \FSM_sequential_rx_state_reg[3]_0 ;
  input s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0;
  input init_clk_in;
  input \FSM_sequential_rx_state_reg[0] ;
  input \FSM_sequential_rx_state_reg[0]_0 ;
  input \FSM_sequential_rx_state_reg[0]_1 ;
  input [3:0]Q;
  input \FSM_sequential_rx_state_reg[0]_2 ;
  input \FSM_sequential_rx_state_reg[0]_3 ;
  input reset_time_out_reg;
  input reset_time_out_reg_0;
  input reset_time_out_reg_1;
  input reset_time_out_reg_2;
  input reset_time_out_reg_3;
  input recclk_mon_count_reset;

  wire [0:0]E;
  wire \FSM_sequential_rx_state[3]_i_6_n_0 ;
  wire \FSM_sequential_rx_state_reg[0] ;
  wire \FSM_sequential_rx_state_reg[0]_0 ;
  wire \FSM_sequential_rx_state_reg[0]_1 ;
  wire \FSM_sequential_rx_state_reg[0]_2 ;
  wire \FSM_sequential_rx_state_reg[0]_3 ;
  wire \FSM_sequential_rx_state_reg[3] ;
  wire \FSM_sequential_rx_state_reg[3]_0 ;
  wire [3:0]Q;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  wire recclk_mon_count_reset;
  wire reset_time_out_i_3__0_n_0;
  wire reset_time_out_reg;
  wire reset_time_out_reg_0;
  wire reset_time_out_reg_1;
  wire reset_time_out_reg_2;
  wire reset_time_out_reg_3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign p_level_in_int = s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0;
  LUT6 #(
    .INIT(64'hAAABBBBBAAABAAAB)) 
    \FSM_sequential_rx_state[3]_i_1 
       (.I0(\FSM_sequential_rx_state_reg[0] ),
        .I1(\FSM_sequential_rx_state_reg[0]_0 ),
        .I2(\FSM_sequential_rx_state_reg[0]_1 ),
        .I3(Q[0]),
        .I4(\FSM_sequential_rx_state_reg[0]_2 ),
        .I5(\FSM_sequential_rx_state[3]_i_6_n_0 ),
        .O(E));
  LUT5 #(
    .INIT(32'hFFFFFEFF)) 
    \FSM_sequential_rx_state[3]_i_6 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(\FSM_sequential_rx_state_reg[0]_3 ),
        .I3(Q[1]),
        .I4(s_level_out_d3),
        .O(\FSM_sequential_rx_state[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00000404)) 
    adapt_count_reset_i_1
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(s_level_out_d3),
        .I4(Q[2]),
        .I5(recclk_mon_count_reset),
        .O(\FSM_sequential_rx_state_reg[3]_0 ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  LUT6 #(
    .INIT(64'h00DFFFFF00DF0000)) 
    reset_time_out_i_1__0
       (.I0(Q[3]),
        .I1(reset_time_out_reg),
        .I2(reset_time_out_reg_1),
        .I3(reset_time_out_i_3__0_n_0),
        .I4(reset_time_out_reg_2),
        .I5(reset_time_out_reg_3),
        .O(\FSM_sequential_rx_state_reg[3] ));
  LUT6 #(
    .INIT(64'h888888880000FF0C)) 
    reset_time_out_i_3__0
       (.I0(reset_time_out_reg),
        .I1(Q[1]),
        .I2(s_level_out_d3),
        .I3(Q[2]),
        .I4(reset_time_out_reg_0),
        .I5(Q[3]),
        .O(reset_time_out_i_3__0_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_16
   (SR,
    mmcm_lock_reclocked_reg,
    init_clk_in,
    mmcm_lock_reclocked,
    mmcm_lock_reclocked_reg_0);
  output [0:0]SR;
  output mmcm_lock_reclocked_reg;
  input init_clk_in;
  input mmcm_lock_reclocked;
  input mmcm_lock_reclocked_reg_0;

  wire [0:0]SR;
  wire init_clk_in;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_reg;
  wire mmcm_lock_reclocked_reg_0;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[9]_i_1__0 
       (.I0(s_level_out_d3),
        .O(SR));
  LUT3 #(
    .INIT(8'hE0)) 
    mmcm_lock_reclocked_i_1__0
       (.I0(mmcm_lock_reclocked),
        .I1(mmcm_lock_reclocked_reg_0),
        .I2(s_level_out_d3),
        .O(mmcm_lock_reclocked_reg));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_17
   (init_clk_in);
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_4
   (D,
    reset,
    s_level_out_d5_reg_0);
  output [0:0]D;
  input reset;
  input s_level_out_d5_reg_0;

  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  wire s_level_out_d5_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign D[0] = s_level_out_d3;
  assign p_level_in_int = reset;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_5
   (in0,
    init_clk_in);
  input in0;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign p_level_in_int = in0;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_8
   (E,
    \FSM_sequential_tx_state_reg[3] ,
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0,
    init_clk_in,
    reset_time_out_reg,
    Q,
    \FSM_sequential_tx_state_reg[0] ,
    \FSM_sequential_tx_state_reg[0]_0 ,
    \FSM_sequential_tx_state_reg[0]_1 ,
    txresetdone_s3,
    reset_time_out,
    \FSM_sequential_tx_state_reg[3]_i_3_0 ,
    \FSM_sequential_tx_state_reg[3]_i_3_1 ,
    \FSM_sequential_tx_state_reg[3]_i_3_2 ,
    mmcm_lock_reclocked,
    \FSM_sequential_tx_state_reg[3]_i_3_3 );
  output [0:0]E;
  output \FSM_sequential_tx_state_reg[3] ;
  input s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0;
  input init_clk_in;
  input reset_time_out_reg;
  input [3:0]Q;
  input \FSM_sequential_tx_state_reg[0] ;
  input \FSM_sequential_tx_state_reg[0]_0 ;
  input \FSM_sequential_tx_state_reg[0]_1 ;
  input txresetdone_s3;
  input reset_time_out;
  input \FSM_sequential_tx_state_reg[3]_i_3_0 ;
  input \FSM_sequential_tx_state_reg[3]_i_3_1 ;
  input \FSM_sequential_tx_state_reg[3]_i_3_2 ;
  input mmcm_lock_reclocked;
  input \FSM_sequential_tx_state_reg[3]_i_3_3 ;

  wire [0:0]E;
  wire \FSM_sequential_tx_state[3]_i_7_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_8_n_0 ;
  wire \FSM_sequential_tx_state_reg[0] ;
  wire \FSM_sequential_tx_state_reg[0]_0 ;
  wire \FSM_sequential_tx_state_reg[0]_1 ;
  wire \FSM_sequential_tx_state_reg[3] ;
  wire \FSM_sequential_tx_state_reg[3]_i_3_0 ;
  wire \FSM_sequential_tx_state_reg[3]_i_3_1 ;
  wire \FSM_sequential_tx_state_reg[3]_i_3_2 ;
  wire \FSM_sequential_tx_state_reg[3]_i_3_3 ;
  wire \FSM_sequential_tx_state_reg[3]_i_3_n_0 ;
  wire [3:0]Q;
  wire init_clk_in;
  wire mmcm_lock_reclocked;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  wire reset_time_out;
  wire reset_time_out_0;
  wire reset_time_out_reg;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;
  wire txresetdone_s3;

  assign p_level_in_int = s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0;
  LUT6 #(
    .INIT(64'h3300330074777444)) 
    \FSM_sequential_tx_state[3]_i_1 
       (.I0(\FSM_sequential_tx_state_reg[3]_i_3_n_0 ),
        .I1(Q[0]),
        .I2(\FSM_sequential_tx_state_reg[0] ),
        .I3(\FSM_sequential_tx_state_reg[0]_0 ),
        .I4(\FSM_sequential_tx_state_reg[0]_1 ),
        .I5(Q[3]),
        .O(E));
  LUT6 #(
    .INIT(64'h0DFF0D000DFF0DFF)) 
    \FSM_sequential_tx_state[3]_i_7 
       (.I0(\FSM_sequential_tx_state_reg[3]_i_3_2 ),
        .I1(reset_time_out),
        .I2(mmcm_lock_reclocked),
        .I3(Q[2]),
        .I4(s_level_out_d3),
        .I5(\FSM_sequential_tx_state_reg[3]_i_3_3 ),
        .O(\FSM_sequential_tx_state[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h45004500450045FF)) 
    \FSM_sequential_tx_state[3]_i_8 
       (.I0(txresetdone_s3),
        .I1(reset_time_out),
        .I2(\FSM_sequential_tx_state_reg[3]_i_3_0 ),
        .I3(Q[2]),
        .I4(s_level_out_d3),
        .I5(\FSM_sequential_tx_state_reg[3]_i_3_1 ),
        .O(\FSM_sequential_tx_state[3]_i_8_n_0 ));
  MUXF7 \FSM_sequential_tx_state_reg[3]_i_3 
       (.I0(\FSM_sequential_tx_state[3]_i_7_n_0 ),
        .I1(\FSM_sequential_tx_state[3]_i_8_n_0 ),
        .O(\FSM_sequential_tx_state_reg[3]_i_3_n_0 ),
        .S(Q[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  LUT6 #(
    .INIT(64'hEFEFEFAA202020AA)) 
    reset_time_out_i_1
       (.I0(reset_time_out_0),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(reset_time_out),
        .O(\FSM_sequential_tx_state_reg[3] ));
  LUT5 #(
    .INIT(32'h0B8F0B8B)) 
    reset_time_out_i_2
       (.I0(reset_time_out_reg),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(s_level_out_d3),
        .O(reset_time_out_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync_9
   (SR,
    mmcm_lock_reclocked_reg,
    init_clk_in,
    mmcm_lock_reclocked,
    p_0_in);
  output [0:0]SR;
  output mmcm_lock_reclocked_reg;
  input init_clk_in;
  input mmcm_lock_reclocked;
  input p_0_in;

  wire [0:0]SR;
  wire init_clk_in;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_reg;
  wire p_0_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(p_level_in_d1_cdc_from));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[9]_i_1 
       (.I0(s_level_out_d3),
        .O(SR));
  LUT3 #(
    .INIT(8'hE0)) 
    mmcm_lock_reclocked_i_1
       (.I0(mmcm_lock_reclocked),
        .I1(p_0_in),
        .I2(s_level_out_d3),
        .O(mmcm_lock_reclocked_reg));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0
   (AS,
    gt_reset_out,
    init_clk_in,
    s_level_out_d6_reg_0);
  output [0:0]AS;
  input gt_reset_out;
  input init_clk_in;
  input s_level_out_d6_reg_0;

  wire gt_reset_out;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire s_level_out_d6_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign AS[0] = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gt_reset_out),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_11
   (out,
    run_phase_alignment_int,
    init_clk_in,
    s_level_out_d5_reg_0);
  output out;
  input run_phase_alignment_int;
  input init_clk_in;
  input s_level_out_d5_reg_0;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  wire run_phase_alignment_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  wire s_level_out_d5_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_12
   (out,
    time_out_wait_bypass,
    p_level_in_d1_cdc_from_reg_0,
    init_clk_in);
  output out;
  input time_out_wait_bypass;
  input p_level_in_d1_cdc_from_reg_0;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;
  wire time_out_wait_bypass;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(p_level_in_d1_cdc_from_reg_0),
        .CE(1'b1),
        .D(time_out_wait_bypass),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_13
   (out,
    s_level_out_d3_reg_0,
    tx_fsm_reset_done_int,
    init_clk_in,
    s_level_out_d5_reg_0);
  output out;
  output s_level_out_d3_reg_0;
  input tx_fsm_reset_done_int;
  input init_clk_in;
  input s_level_out_d5_reg_0;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  wire s_level_out_d3_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  wire s_level_out_d5_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;
  wire tx_fsm_reset_done_int;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h1)) 
    gt_txresetdone_r_i_1
       (.I0(s_level_out_d3),
        .O(s_level_out_d3_reg_0));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_14
   (out,
    rxfsm_rxresetdone_r,
    p_level_in_d1_cdc_from_reg_0,
    init_clk_in);
  output out;
  input rxfsm_rxresetdone_r;
  input p_level_in_d1_cdc_from_reg_0;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_int;
  wire rxfsm_rxresetdone_r;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(p_level_in_d1_cdc_from_reg_0),
        .CE(1'b1),
        .D(rxfsm_rxresetdone_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_18
   (out,
    p_level_in_d1_cdc_from_reg_0,
    init_clk_in,
    s_level_out_d6_reg_0);
  output out;
  input p_level_in_d1_cdc_from_reg_0;
  input init_clk_in;
  input s_level_out_d6_reg_0;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire s_level_out_d6_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from_reg_0),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_19
   (out,
    rx_fsm_reset_done_int,
    init_clk_in,
    s_level_out_d6_reg_0);
  output out;
  input rx_fsm_reset_done_int;
  input init_clk_in;
  input s_level_out_d6_reg_0;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  wire rx_fsm_reset_done_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire s_level_out_d6_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_fsm_reset_done_int),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d6_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_20
   (out,
    p_level_in_d1_cdc_from_reg_0,
    p_level_in_d1_cdc_from_reg_1,
    init_clk_in);
  output out;
  input p_level_in_d1_cdc_from_reg_0;
  input p_level_in_d1_cdc_from_reg_1;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_d1_cdc_from_reg_1;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(p_level_in_d1_cdc_from_reg_1),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from_reg_0),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_21
   (out,
    link_reset_r,
    init_clk_in,
    s_level_out_d5_reg_0);
  output out;
  input link_reset_r;
  input init_clk_in;
  input s_level_out_d5_reg_0;

  wire init_clk_in;
  wire link_reset_r;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  wire s_level_out_d5_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_22
   (out,
    tx_lock_comb_r,
    init_clk_in,
    s_level_out_d5_reg_0);
  output out;
  input tx_lock_comb_r;
  input init_clk_in;
  input s_level_out_d5_reg_0;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  wire s_level_out_d5_reg_0;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;
  wire tx_lock_comb_r;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_lock_comb_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(s_level_out_d5_reg_0),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_23
   (out,
    rx_cc_extend_r2,
    p_level_in_d1_cdc_from_reg_0,
    init_clk_in);
  output out;
  input rx_cc_extend_r2;
  input p_level_in_d1_cdc_from_reg_0;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_int;
  wire rx_cc_extend_r2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(p_level_in_d1_cdc_from_reg_0),
        .CE(1'b1),
        .D(rx_cc_extend_r2),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_6
   (out,
    gtrxreset_i,
    p_level_in_d1_cdc_from_reg_0,
    init_clk_in);
  output out;
  input gtrxreset_i;
  input p_level_in_d1_cdc_from_reg_0;
  input init_clk_in;

  wire gtrxreset_i;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(p_level_in_d1_cdc_from_reg_0),
        .CE(1'b1),
        .D(gtrxreset_i),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_cdc_sync" *) 
module top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_7
   (out,
    txfsm_txresetdone_r,
    p_level_in_d1_cdc_from_reg_0,
    init_clk_in);
  output out;
  input txfsm_txresetdone_r;
  input p_level_in_d1_cdc_from_reg_0;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire p_level_in_d1_cdc_from_reg_0;
  wire p_level_in_int;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire [1:0]s_level_out_bus_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d1_aurora_8b10b_0_cdc_to;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d2;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d3;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d4;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d5;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d6;
  (* async_reg = "true" *) (* shift_extract = "{no}" *) wire s_out_d7;
  wire txfsm_txresetdone_r;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(p_level_in_d1_cdc_from),
        .O(p_level_in_int));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(s_out_d1_aurora_8b10b_0_cdc_to));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(1'b0),
        .O(s_level_out_bus_d2[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(1'b0),
        .O(s_level_out_bus_d2[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(1'b0),
        .O(s_level_out_bus_d3[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(1'b0),
        .O(s_level_out_bus_d3[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(1'b0),
        .O(s_level_out_bus_d4[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(1'b0),
        .O(s_level_out_bus_d4[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(1'b0),
        .O(s_level_out_bus_d5[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(1'b0),
        .O(s_level_out_bus_d5[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(1'b0),
        .O(s_level_out_bus_d6[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(1'b0),
        .O(s_level_out_bus_d6[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(s_out_d2));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(s_out_d3));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(s_out_d4));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(s_out_d5));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(s_out_d6));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(s_out_d7));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(1'b0),
        .O(s_level_out_bus_d1_aurora_8b10b_0_cdc_to[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(p_level_in_d1_cdc_from_reg_0),
        .CE(1'b1),
        .D(txfsm_txresetdone_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_aurora_8b10b_0_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_core" *) 
module top_aurora_0_0_aurora_8b10b_0_core
   (sys_reset_out,
    pll_not_locked_out,
    tx_lock,
    lane_up,
    link_reset_out,
    tx_resetdone_out,
    drprdy_out,
    txn,
    txp,
    tx_out_clk,
    drpdo_out,
    rx_resetdone_out,
    channel_up,
    soft_err,
    hard_err,
    m_axi_rx_tkeep,
    m_axi_rx_tlast,
    m_axi_rx_tvalid,
    frame_err,
    m_axi_rx_tdata,
    s_axi_tx_tready,
    \prepare_count_r_reg[9] ,
    gt_refclk1,
    s_axi_tx_tlast,
    in0,
    init_clk_in,
    \init_wait_count_reg[7] ,
    drpclk_in,
    drpen_in,
    drpwe_in,
    rxn,
    rxp,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    power_down,
    drpdi_in,
    loopback,
    drpaddr_in,
    s_axi_tx_tdata,
    s_axi_tx_tvalid,
    s_axi_tx_tkeep);
  output sys_reset_out;
  output pll_not_locked_out;
  output tx_lock;
  output lane_up;
  output link_reset_out;
  output tx_resetdone_out;
  output drprdy_out;
  output txn;
  output txp;
  output tx_out_clk;
  output [15:0]drpdo_out;
  output rx_resetdone_out;
  output channel_up;
  output soft_err;
  output hard_err;
  output [2:0]m_axi_rx_tkeep;
  output m_axi_rx_tlast;
  output m_axi_rx_tvalid;
  output frame_err;
  output [0:31]m_axi_rx_tdata;
  output s_axi_tx_tready;
  input \prepare_count_r_reg[9] ;
  input gt_refclk1;
  input s_axi_tx_tlast;
  input in0;
  input init_clk_in;
  input \init_wait_count_reg[7] ;
  input drpclk_in;
  input drpen_in;
  input drpwe_in;
  input rxn;
  input rxp;
  input gt_qpllclk_quad1_out;
  input gt_qpllrefclk_quad1_out;
  input power_down;
  input [15:0]drpdi_in;
  input [2:0]loopback;
  input [8:0]drpaddr_in;
  input [0:31]s_axi_tx_tdata;
  input s_axi_tx_tvalid;
  input [0:3]s_axi_tx_tkeep;

  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_10;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_14;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_19;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_20;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_22;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_23;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_24;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_25;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_26;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_27;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_28;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_62;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_63;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_64;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_65;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_66;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_67;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_68;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_69;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_70;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_71;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_72;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_73;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_74;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_75;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_76;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_77;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_82;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_83;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_84;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_85;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_86;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_87;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_88;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_89;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_9;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_90;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_91;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_92;
  wire aurora_8b10b_0_aurora_lane_4byte_0_i_n_93;
  wire \aurora_8b10b_0_err_detect_4byte_i/hard_err_gt0 ;
  wire [3:1]\aurora_8b10b_0_err_detect_4byte_i/p_6_out ;
  wire \aurora_8b10b_0_lane_init_sm_4byte_i/begin_r ;
  wire \aurora_8b10b_0_lane_init_sm_4byte_i/consecutive_commas_r ;
  wire [3:0]\aurora_8b10b_0_sym_dec_4byte_i/p_0_in ;
  wire [0:0]\aurora_8b10b_0_sym_dec_4byte_i/previous_cycle_control_r ;
  wire axi_to_ll_pdu_i_n_0;
  wire channel_up;
  wire do_cc_i;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire ena_comma_align_i;
  wire enable_err_detect_i;
  wire frame_err;
  wire gen_a_i;
  wire gen_cc_i;
  wire gen_ecp_i;
  wire [0:3]gen_k_i;
  wire [0:1]gen_pad_i;
  wire [0:3]gen_r_i;
  wire [0:0]gen_scp_striped_i;
  wire [1:3]gen_v_i;
  wire got_v_i;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire gt_wrapper_i_n_67;
  wire gt_wrapper_i_n_69;
  wire gt_wrapper_i_n_70;
  wire gt_wrapper_i_n_71;
  wire gt_wrapper_i_n_72;
  wire gt_wrapper_i_n_73;
  wire gt_wrapper_i_n_74;
  wire gt_wrapper_i_n_75;
  wire gt_wrapper_i_n_76;
  wire gt_wrapper_i_n_77;
  wire gt_wrapper_i_n_78;
  wire gt_wrapper_i_n_79;
  wire gt_wrapper_i_n_80;
  wire gt_wrapper_i_n_81;
  wire gt_wrapper_i_n_82;
  wire gt_wrapper_i_n_83;
  wire gt_wrapper_i_n_84;
  wire gt_wrapper_i_n_85;
  wire gt_wrapper_i_n_86;
  wire gt_wrapper_i_n_87;
  wire gt_wrapper_i_n_89;
  wire gt_wrapper_i_n_90;
  wire gt_wrapper_i_n_91;
  wire gt_wrapper_i_n_92;
  wire gtrxreset_i;
  wire hard_err;
  wire hard_err_i;
  wire in0;
  wire init_clk_in;
  wire \init_wait_count_reg[7] ;
  wire lane_up;
  wire link_reset_out;
  wire link_reset_r;
  wire [2:0]loopback;
  wire [0:31]m_axi_rx_tdata;
  wire [2:0]m_axi_rx_tkeep;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire new_pkt_r;
  wire p_0_in;
  wire pll_not_locked_out;
  wire power_down;
  wire \prepare_count_r_reg[9] ;
  wire reset_lanes_i;
  wire [3:0]rx_char_is_comma_i;
  wire [3:0]rx_char_is_k_i;
  wire [31:0]rx_data_i;
  wire [0:1]rx_ecp_striped_i;
  wire rx_eof;
  wire \rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_0 ;
  wire \rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_1 ;
  wire rx_ll_rst;
  wire [0:1]rx_pe_data_v_striped_i;
  wire rx_polarity_i;
  wire rx_realign_i;
  wire [0:1]rx_rem_int;
  wire rx_resetdone_out;
  wire [0:1]rx_scp_striped_i;
  wire rxn;
  wire rxp;
  wire [0:31]s_axi_tx_tdata;
  wire [0:3]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire soft_err;
  wire [0:1]soft_err_i;
  wire start_rx_i;
  wire sys_reset_out;
  wire [3:0]tx_char_is_k_i;
  wire [31:0]tx_data_i;
  wire tx_dst_rdy;
  wire tx_lock;
  wire tx_out_clk;
  wire [0:31]tx_pe_data_i;
  wire [0:1]tx_pe_data_v_i;
  wire tx_resetdone_out;
  wire txn;
  wire txp;

  top_aurora_0_0_aurora_8b10b_0_AURORA_LANE_4BYTE aurora_8b10b_0_aurora_lane_4byte_0_i
       (.D(rx_char_is_comma_i),
        .Q({rx_ecp_striped_i[0],rx_ecp_striped_i[1]}),
        .RXCHARISK(rx_char_is_k_i),
        .RXDATA(rx_data_i),
        .\RX_ECP_reg[0] (aurora_8b10b_0_aurora_lane_4byte_0_i_n_19),
        .\RX_ECP_reg[1] (aurora_8b10b_0_aurora_lane_4byte_0_i_n_14),
        .\RX_PAD_reg[1] (aurora_8b10b_0_aurora_lane_4byte_0_i_n_20),
        .\RX_PE_DATA_V_reg[0] ({rx_pe_data_v_striped_i[0],rx_pe_data_v_striped_i[1]}),
        .\RX_SCP_reg[0] ({rx_scp_striped_i[0],rx_scp_striped_i[1]}),
        .\SOFT_ERR_reg[0] ({soft_err_i[0],soft_err_i[1]}),
        .SR(reset_lanes_i),
        .TXCHARISK(tx_char_is_k_i),
        .TXDATA(tx_data_i),
        .\TX_DATA_reg[0] (\prepare_count_r_reg[9] ),
        .after_scp_select_c_0(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_0 ),
        .after_scp_select_c_1(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_1 ),
        .begin_r(\aurora_8b10b_0_lane_init_sm_4byte_i/begin_r ),
        .consecutive_commas_r(\aurora_8b10b_0_lane_init_sm_4byte_i/consecutive_commas_r ),
        .ena_comma_align_i(ena_comma_align_i),
        .enable_err_detect_i(enable_err_detect_i),
        .gen_a_i(gen_a_i),
        .gen_cc_i(gen_cc_i),
        .gen_ecp_i(gen_ecp_i),
        .\gen_k_r_reg[0] ({gen_k_i[0],gen_k_i[1],gen_k_i[2],gen_k_i[3]}),
        .\gen_pad_r_reg[0] ({gen_pad_i[0],gen_pad_i[1]}),
        .\gen_r_r_reg[0] ({gen_r_i[0],gen_r_i[1],gen_r_i[2],gen_r_i[3]}),
        .gen_scp_striped_i(gen_scp_striped_i),
        .\gen_v_r_reg[1] ({gen_v_i[1],gen_v_i[2],gen_v_i[3]}),
        .got_v_i(got_v_i),
        .hard_err_gt0(\aurora_8b10b_0_err_detect_4byte_i/hard_err_gt0 ),
        .hard_err_i(hard_err_i),
        .init_clk_in(init_clk_in),
        .lane_up(lane_up),
        .\left_align_select_r_reg[0] (aurora_8b10b_0_aurora_lane_4byte_0_i_n_9),
        .\left_align_select_r_reg[0]_0 (gt_wrapper_i_n_91),
        .\left_align_select_r_reg[1] (aurora_8b10b_0_aurora_lane_4byte_0_i_n_10),
        .\left_align_select_r_reg[1]_0 (gt_wrapper_i_n_92),
        .link_reset_out(link_reset_out),
        .\previous_cycle_control_r_reg[0] (\aurora_8b10b_0_sym_dec_4byte_i/previous_cycle_control_r ),
        .\previous_cycle_data_r_reg[7] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_23,aurora_8b10b_0_aurora_lane_4byte_0_i_n_24,aurora_8b10b_0_aurora_lane_4byte_0_i_n_25,aurora_8b10b_0_aurora_lane_4byte_0_i_n_26,aurora_8b10b_0_aurora_lane_4byte_0_i_n_27,aurora_8b10b_0_aurora_lane_4byte_0_i_n_28}),
        .ready_r_reg(aurora_8b10b_0_aurora_lane_4byte_0_i_n_22),
        .reset_count_r_reg(gt_wrapper_i_n_71),
        .reset_count_r_reg_0(gt_wrapper_i_n_70),
        .rx_polarity_i(rx_polarity_i),
        .rx_realign_i(rx_realign_i),
        .\soft_err_r_reg[0] ({\aurora_8b10b_0_err_detect_4byte_i/p_6_out [3],gt_wrapper_i_n_67,\aurora_8b10b_0_err_detect_4byte_i/p_6_out [1],gt_wrapper_i_n_69}),
        .\tx_pe_data_r_reg[0] ({tx_pe_data_i[0],tx_pe_data_i[1],tx_pe_data_i[2],tx_pe_data_i[3],tx_pe_data_i[4],tx_pe_data_i[5],tx_pe_data_i[6],tx_pe_data_i[7],tx_pe_data_i[8],tx_pe_data_i[9],tx_pe_data_i[10],tx_pe_data_i[11],tx_pe_data_i[12],tx_pe_data_i[13],tx_pe_data_i[14],tx_pe_data_i[15],tx_pe_data_i[16],tx_pe_data_i[17],tx_pe_data_i[18],tx_pe_data_i[19],tx_pe_data_i[20],tx_pe_data_i[21],tx_pe_data_i[22],tx_pe_data_i[23],tx_pe_data_i[24],tx_pe_data_i[25],tx_pe_data_i[26],tx_pe_data_i[27],tx_pe_data_i[28],tx_pe_data_i[29],tx_pe_data_i[30],tx_pe_data_i[31]}),
        .\tx_pe_data_v_r_reg[0] ({tx_pe_data_v_i[0],tx_pe_data_v_i[1]}),
        .\word_aligned_control_bits_r_reg[2] (gt_wrapper_i_n_86),
        .\word_aligned_control_bits_r_reg[3] (gt_wrapper_i_n_87),
        .\word_aligned_data_r_reg[0] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_86,aurora_8b10b_0_aurora_lane_4byte_0_i_n_87,aurora_8b10b_0_aurora_lane_4byte_0_i_n_88,aurora_8b10b_0_aurora_lane_4byte_0_i_n_89,aurora_8b10b_0_aurora_lane_4byte_0_i_n_90,aurora_8b10b_0_aurora_lane_4byte_0_i_n_91,aurora_8b10b_0_aurora_lane_4byte_0_i_n_92,aurora_8b10b_0_aurora_lane_4byte_0_i_n_93}),
        .\word_aligned_data_r_reg[16] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_70,aurora_8b10b_0_aurora_lane_4byte_0_i_n_71,aurora_8b10b_0_aurora_lane_4byte_0_i_n_72,aurora_8b10b_0_aurora_lane_4byte_0_i_n_73,aurora_8b10b_0_aurora_lane_4byte_0_i_n_74,aurora_8b10b_0_aurora_lane_4byte_0_i_n_75,aurora_8b10b_0_aurora_lane_4byte_0_i_n_76,aurora_8b10b_0_aurora_lane_4byte_0_i_n_77}),
        .\word_aligned_data_r_reg[16]_0 ({gt_wrapper_i_n_72,gt_wrapper_i_n_73,gt_wrapper_i_n_74,gt_wrapper_i_n_75,gt_wrapper_i_n_76,gt_wrapper_i_n_77}),
        .\word_aligned_data_r_reg[24] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_62,aurora_8b10b_0_aurora_lane_4byte_0_i_n_63,aurora_8b10b_0_aurora_lane_4byte_0_i_n_64,aurora_8b10b_0_aurora_lane_4byte_0_i_n_65,aurora_8b10b_0_aurora_lane_4byte_0_i_n_66,aurora_8b10b_0_aurora_lane_4byte_0_i_n_67,aurora_8b10b_0_aurora_lane_4byte_0_i_n_68,aurora_8b10b_0_aurora_lane_4byte_0_i_n_69}),
        .\word_aligned_data_r_reg[24]_0 ({gt_wrapper_i_n_78,gt_wrapper_i_n_79,gt_wrapper_i_n_80,gt_wrapper_i_n_81,gt_wrapper_i_n_82,gt_wrapper_i_n_83,gt_wrapper_i_n_84,gt_wrapper_i_n_85}),
        .\word_aligned_data_r_reg[8] ({\aurora_8b10b_0_sym_dec_4byte_i/p_0_in ,aurora_8b10b_0_aurora_lane_4byte_0_i_n_82,aurora_8b10b_0_aurora_lane_4byte_0_i_n_83,aurora_8b10b_0_aurora_lane_4byte_0_i_n_84,aurora_8b10b_0_aurora_lane_4byte_0_i_n_85}));
  top_aurora_0_0_aurora_8b10b_0_GLOBAL_LOGIC aurora_8b10b_0_global_logic_i
       (.D({soft_err_i[0],soft_err_i[1]}),
        .SR(reset_lanes_i),
        .START_RX_reg(rx_ll_rst),
        .channel_up(channel_up),
        .\down_count_r_reg[0] (\prepare_count_r_reg[9] ),
        .\downcounter_r_reg[0] (sys_reset_out),
        .gen_a_i(gen_a_i),
        .gen_k_flop_0_i({gen_k_i[0],gen_k_i[1],gen_k_i[2],gen_k_i[3]}),
        .gen_r_flop_0_i({gen_r_i[0],gen_r_i[1],gen_r_i[2],gen_r_i[3]}),
        .gen_v_flop_1_i({gen_v_i[1],gen_v_i[2],gen_v_i[3]}),
        .got_v_i(got_v_i),
        .gtrxreset_i(gtrxreset_i),
        .hard_err(hard_err),
        .hard_err_i(hard_err_i),
        .lane_up(lane_up),
        .p_0_in(p_0_in),
        .power_down(power_down),
        .soft_err(soft_err),
        .start_rx_i(start_rx_i));
  top_aurora_0_0_aurora_8b10b_0_RX_LL aurora_8b10b_0_rx_ll_i
       (.D({rx_scp_striped_i[0],rx_scp_striped_i[1]}),
        .\DEFRAMED_DATA_V_reg[0] ({rx_pe_data_v_striped_i[0],rx_pe_data_v_striped_i[1]}),
        .\IN_FRAME_reg[1] (aurora_8b10b_0_aurora_lane_4byte_0_i_n_19),
        .Q({rx_rem_int[0],rx_rem_int[1]}),
        .SR(rx_ll_rst),
        .\STORAGE_DATA_reg[31] (\prepare_count_r_reg[9] ),
        .after_scp_select_c_0(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_0 ),
        .after_scp_select_c_1(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_1 ),
        .frame_err(frame_err),
        .in_frame_r_reg(aurora_8b10b_0_aurora_lane_4byte_0_i_n_14),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .rx_eof(rx_eof),
        .\stage_1_ecp_r_reg[0] ({rx_ecp_striped_i[0],rx_ecp_striped_i[1]}),
        .stage_1_pad_r_reg(aurora_8b10b_0_aurora_lane_4byte_0_i_n_20),
        .\stage_2_data_r_reg[0] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_86,aurora_8b10b_0_aurora_lane_4byte_0_i_n_87,aurora_8b10b_0_aurora_lane_4byte_0_i_n_88,aurora_8b10b_0_aurora_lane_4byte_0_i_n_89,aurora_8b10b_0_aurora_lane_4byte_0_i_n_90,aurora_8b10b_0_aurora_lane_4byte_0_i_n_91,aurora_8b10b_0_aurora_lane_4byte_0_i_n_92,aurora_8b10b_0_aurora_lane_4byte_0_i_n_93}),
        .\stage_2_data_r_reg[16] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_70,aurora_8b10b_0_aurora_lane_4byte_0_i_n_71,aurora_8b10b_0_aurora_lane_4byte_0_i_n_72,aurora_8b10b_0_aurora_lane_4byte_0_i_n_73,aurora_8b10b_0_aurora_lane_4byte_0_i_n_74,aurora_8b10b_0_aurora_lane_4byte_0_i_n_75,aurora_8b10b_0_aurora_lane_4byte_0_i_n_76,aurora_8b10b_0_aurora_lane_4byte_0_i_n_77}),
        .\stage_2_data_r_reg[24] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_62,aurora_8b10b_0_aurora_lane_4byte_0_i_n_63,aurora_8b10b_0_aurora_lane_4byte_0_i_n_64,aurora_8b10b_0_aurora_lane_4byte_0_i_n_65,aurora_8b10b_0_aurora_lane_4byte_0_i_n_66,aurora_8b10b_0_aurora_lane_4byte_0_i_n_67,aurora_8b10b_0_aurora_lane_4byte_0_i_n_68,aurora_8b10b_0_aurora_lane_4byte_0_i_n_69}),
        .\stage_2_data_r_reg[8] ({\aurora_8b10b_0_sym_dec_4byte_i/p_0_in ,aurora_8b10b_0_aurora_lane_4byte_0_i_n_82,aurora_8b10b_0_aurora_lane_4byte_0_i_n_83,aurora_8b10b_0_aurora_lane_4byte_0_i_n_84,aurora_8b10b_0_aurora_lane_4byte_0_i_n_85}),
        .start_rx_i(start_rx_i));
  top_aurora_0_0_aurora_8b10b_0_TX_LL aurora_8b10b_0_tx_ll_i
       (.\GEN_PAD_reg[0] ({gen_pad_i[0],gen_pad_i[1]}),
        .Q(do_cc_i),
        .\TX_PE_DATA_V_reg[0] ({tx_pe_data_v_i[0],tx_pe_data_v_i[1]}),
        .\TX_PE_DATA_reg[0] ({tx_pe_data_i[0],tx_pe_data_i[1],tx_pe_data_i[2],tx_pe_data_i[3],tx_pe_data_i[4],tx_pe_data_i[5],tx_pe_data_i[6],tx_pe_data_i[7],tx_pe_data_i[8],tx_pe_data_i[9],tx_pe_data_i[10],tx_pe_data_i[11],tx_pe_data_i[12],tx_pe_data_i[13],tx_pe_data_i[14],tx_pe_data_i[15],tx_pe_data_i[16],tx_pe_data_i[17],tx_pe_data_i[18],tx_pe_data_i[19],tx_pe_data_i[20],tx_pe_data_i[21],tx_pe_data_i[22],tx_pe_data_i[23],tx_pe_data_i[24],tx_pe_data_i[25],tx_pe_data_i[26],tx_pe_data_i[27],tx_pe_data_i[28],tx_pe_data_i[29],tx_pe_data_i[30],tx_pe_data_i[31]}),
        .gen_cc_i(gen_cc_i),
        .gen_ecp_i(gen_ecp_i),
        .gen_scp_striped_i(gen_scp_striped_i),
        .p_0_in(p_0_in),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .tx_dst_rdy(tx_dst_rdy),
        .\tx_pe_data_r_reg[0] (\prepare_count_r_reg[9] ),
        .\tx_pe_data_v_r_reg[1] (axi_to_ll_pdu_i_n_0));
  top_aurora_0_0_aurora_8b10b_0_AXI_TO_LL axi_to_ll_pdu_i
       (.new_pkt_r(new_pkt_r),
        .new_pkt_r_reg_0(axi_to_ll_pdu_i_n_0),
        .new_pkt_r_reg_1(\prepare_count_r_reg[9] ));
  top_aurora_0_0_aurora_8b10b_0_RESET_LOGIC core_reset_logic_i
       (.SR(sys_reset_out),
        .channel_up(channel_up),
        .gt_rxresetdone_r2_reg_0(gt_wrapper_i_n_90),
        .gt_txresetdone_r2_reg_0(gt_wrapper_i_n_89),
        .in0(in0),
        .init_clk_in(init_clk_in),
        .link_reset_r(link_reset_r),
        .new_pkt_r(new_pkt_r),
        .new_pkt_r_reg(axi_to_ll_pdu_i_n_0),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .s_level_out_d5_reg(\prepare_count_r_reg[9] ),
        .tx_dst_rdy(tx_dst_rdy),
        .tx_lock_comb_r_reg_0(tx_lock));
  top_aurora_0_0_aurora_8b10b_0_GT_WRAPPER gt_wrapper_i
       (.D(rx_char_is_comma_i),
        .ENABLE_ERR_DETECT_reg({\aurora_8b10b_0_err_detect_4byte_i/p_6_out [3],gt_wrapper_i_n_67,\aurora_8b10b_0_err_detect_4byte_i/p_6_out [1],gt_wrapper_i_n_69}),
        .RXCHARISK(rx_char_is_k_i),
        .RXDATA(rx_data_i),
        .TXCHARISK(tx_char_is_k_i),
        .TXDATA(tx_data_i),
        .begin_r(\aurora_8b10b_0_lane_init_sm_4byte_i/begin_r ),
        .consecutive_commas_r(\aurora_8b10b_0_lane_init_sm_4byte_i/consecutive_commas_r ),
        .consecutive_commas_r_reg(gt_wrapper_i_n_70),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drpwe_in(drpwe_in),
        .ena_comma_align_i(ena_comma_align_i),
        .enable_err_detect_i(enable_err_detect_i),
        .gt_qpllclk_quad1_out(gt_qpllclk_quad1_out),
        .gt_qpllrefclk_quad1_out(gt_qpllrefclk_quad1_out),
        .gt_refclk1(gt_refclk1),
        .gtrxreset_i(gtrxreset_i),
        .hard_err_gt0(\aurora_8b10b_0_err_detect_4byte_i/hard_err_gt0 ),
        .init_clk_in(init_clk_in),
        .init_clk_in_0(tx_lock),
        .init_clk_in_1(gt_wrapper_i_n_71),
        .\init_wait_count_reg[7] (\init_wait_count_reg[7] ),
        .\left_align_select_r_reg[0] ({gt_wrapper_i_n_78,gt_wrapper_i_n_79,gt_wrapper_i_n_80,gt_wrapper_i_n_81,gt_wrapper_i_n_82,gt_wrapper_i_n_83,gt_wrapper_i_n_84,gt_wrapper_i_n_85}),
        .\left_align_select_r_reg[0]_0 (gt_wrapper_i_n_91),
        .\left_align_select_r_reg[0]_1 (aurora_8b10b_0_aurora_lane_4byte_0_i_n_9),
        .\left_align_select_r_reg[0]_2 (aurora_8b10b_0_aurora_lane_4byte_0_i_n_22),
        .\left_align_select_r_reg[1] (gt_wrapper_i_n_87),
        .\left_align_select_r_reg[1]_0 (gt_wrapper_i_n_92),
        .\left_align_select_r_reg[1]_1 (aurora_8b10b_0_aurora_lane_4byte_0_i_n_10),
        .link_reset_out(link_reset_out),
        .link_reset_r(link_reset_r),
        .loopback(loopback),
        .out(tx_resetdone_out),
        .p_level_in_d1_cdc_from_reg(\prepare_count_r_reg[9] ),
        .pll_not_locked_out(pll_not_locked_out),
        .power_down(power_down),
        .\previous_cycle_control_r_reg[0] (gt_wrapper_i_n_86),
        .\previous_cycle_data_r_reg[7] ({gt_wrapper_i_n_72,gt_wrapper_i_n_73,gt_wrapper_i_n_74,gt_wrapper_i_n_75,gt_wrapper_i_n_76,gt_wrapper_i_n_77}),
        .rx_polarity_i(rx_polarity_i),
        .rx_realign_i(rx_realign_i),
        .rx_resetdone_out(rx_resetdone_out),
        .rxfsm_rxresetdone_r3_reg_0(gt_wrapper_i_n_90),
        .rxn(rxn),
        .rxp(rxp),
        .s_level_out_d3_reg(gt_wrapper_i_n_89),
        .tx_out_clk(tx_out_clk),
        .txn(txn),
        .txp(txp),
        .\word_aligned_control_bits_r_reg[2] (\aurora_8b10b_0_sym_dec_4byte_i/previous_cycle_control_r ),
        .\word_aligned_data_r_reg[16] ({aurora_8b10b_0_aurora_lane_4byte_0_i_n_23,aurora_8b10b_0_aurora_lane_4byte_0_i_n_24,aurora_8b10b_0_aurora_lane_4byte_0_i_n_25,aurora_8b10b_0_aurora_lane_4byte_0_i_n_26,aurora_8b10b_0_aurora_lane_4byte_0_i_n_27,aurora_8b10b_0_aurora_lane_4byte_0_i_n_28}));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_5 hpcnt_reset_cdc_sync
       (.in0(in0),
        .init_clk_in(init_clk_in));
  top_aurora_0_0_aurora_8b10b_0_LL_TO_AXI ll_to_axi_pdu_i
       (.Q({rx_rem_int[0],rx_rem_int[1]}),
        .m_axi_rx_tkeep(m_axi_rx_tkeep),
        .rx_eof(rx_eof));
  top_aurora_0_0_aurora_8b10b_0_STANDARD_CC_MODULE standard_cc_module_i
       (.Q(do_cc_i),
        .SR(sys_reset_out),
        .\prepare_count_r_reg[9]_0 (\prepare_count_r_reg[9] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_gt" *) 
module top_aurora_0_0_aurora_8b10b_0_gt
   (in0,
    drprdy_out,
    txn,
    txp,
    rx_realign_i,
    init_clk_in_0,
    tx_out_clk,
    init_clk_in_1,
    drpdo_out,
    RXDATA,
    D,
    RXCHARISK,
    ack_flag,
    pll_not_locked_out,
    ENABLE_ERR_DETECT_reg,
    consecutive_commas_r_reg,
    init_clk_in_2,
    \previous_cycle_data_r_reg[7] ,
    \left_align_select_r_reg[0] ,
    \previous_cycle_control_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    hard_err_gt0,
    \left_align_select_r_reg[0]_0 ,
    \left_align_select_r_reg[1]_0 ,
    gt_refclk1,
    init_clk_in,
    drpclk_in,
    drpen_in,
    drpwe_in,
    SR,
    gt_tx_reset_i,
    rxn,
    rxp,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    gt_rxdfelfhold_i,
    ena_comma_align_i,
    rx_polarity_i,
    gt_rxuserrdy_i,
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg,
    power_down,
    gt_txuserrdy_i,
    drpdi_in,
    loopback,
    TXDATA,
    TXCHARISK,
    drpaddr_in,
    flag2_reg_0,
    enable_err_detect_i,
    consecutive_commas_r,
    begin_r,
    \word_aligned_data_r_reg[16] ,
    \left_align_select_r_reg[0]_1 ,
    \left_align_select_r_reg[1]_1 ,
    \word_aligned_control_bits_r_reg[2] ,
    cpll_reset_i,
    \left_align_select_r_reg[0]_2 );
  output in0;
  output drprdy_out;
  output txn;
  output txp;
  output rx_realign_i;
  output init_clk_in_0;
  output tx_out_clk;
  output init_clk_in_1;
  output [15:0]drpdo_out;
  output [31:0]RXDATA;
  output [3:0]D;
  output [3:0]RXCHARISK;
  output ack_flag;
  output pll_not_locked_out;
  output [3:0]ENABLE_ERR_DETECT_reg;
  output consecutive_commas_r_reg;
  output init_clk_in_2;
  output [5:0]\previous_cycle_data_r_reg[7] ;
  output [7:0]\left_align_select_r_reg[0] ;
  output \previous_cycle_control_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  output hard_err_gt0;
  output \left_align_select_r_reg[0]_0 ;
  output \left_align_select_r_reg[1]_0 ;
  input gt_refclk1;
  input init_clk_in;
  input drpclk_in;
  input drpen_in;
  input drpwe_in;
  input [0:0]SR;
  input gt_tx_reset_i;
  input rxn;
  input rxp;
  input gt_qpllclk_quad1_out;
  input gt_qpllrefclk_quad1_out;
  input gt_rxdfelfhold_i;
  input ena_comma_align_i;
  input rx_polarity_i;
  input gt_rxuserrdy_i;
  input s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  input power_down;
  input gt_txuserrdy_i;
  input [15:0]drpdi_in;
  input [2:0]loopback;
  input [31:0]TXDATA;
  input [3:0]TXCHARISK;
  input [8:0]drpaddr_in;
  input flag2_reg_0;
  input enable_err_detect_i;
  input consecutive_commas_r;
  input begin_r;
  input [5:0]\word_aligned_data_r_reg[16] ;
  input \left_align_select_r_reg[0]_1 ;
  input \left_align_select_r_reg[1]_1 ;
  input [0:0]\word_aligned_control_bits_r_reg[2] ;
  input cpll_reset_i;
  input \left_align_select_r_reg[0]_2 ;

  wire [3:0]D;
  wire [3:0]ENABLE_ERR_DETECT_reg;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA;
  wire [0:0]SR;
  wire [3:0]TXCHARISK;
  wire [31:0]TXDATA;
  wire ack_flag;
  wire ack_flag_i_1_n_0;
  wire ack_sync1;
  wire ack_sync2;
  wire ack_sync3;
  wire ack_sync4;
  wire ack_sync5;
  wire ack_sync6;
  wire begin_r;
  wire consecutive_commas_r;
  wire consecutive_commas_r_reg;
  wire cpll_pd_i;
  wire cpll_reset_i;
  wire cpll_reset_i_0;
  wire \cpllpd_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_wait_reg[94]_srl31_n_0 ;
  wire cpllreset_ovrd_i;
  wire \cpllreset_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_wait_reg[95]_srl32_n_1 ;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync6;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire ena_comma_align_i;
  wire enable_err_detect_i;
  wire flag;
  wire flag2;
  wire flag2_reg_0;
  wire flag_i_1_n_0;
  wire gt_pllrefclklost_i;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire gt_rxdfelfhold_i;
  wire gt_rxuserrdy_i;
  wire gt_tx_reset_i;
  wire gt_txuserrdy_i;
  wire gtxe2_i_n_0;
  wire gtxe2_i_n_11;
  wire gtxe2_i_n_16;
  wire gtxe2_i_n_170;
  wire gtxe2_i_n_171;
  wire gtxe2_i_n_172;
  wire gtxe2_i_n_173;
  wire gtxe2_i_n_174;
  wire gtxe2_i_n_175;
  wire gtxe2_i_n_176;
  wire gtxe2_i_n_177;
  wire gtxe2_i_n_178;
  wire gtxe2_i_n_179;
  wire gtxe2_i_n_180;
  wire gtxe2_i_n_181;
  wire gtxe2_i_n_182;
  wire gtxe2_i_n_183;
  wire gtxe2_i_n_184;
  wire gtxe2_i_n_23;
  wire gtxe2_i_n_27;
  wire gtxe2_i_n_38;
  wire gtxe2_i_n_39;
  wire gtxe2_i_n_4;
  wire gtxe2_i_n_78;
  wire gtxe2_i_n_79;
  wire gtxe2_i_n_81;
  wire gtxe2_i_n_83;
  wire gtxe2_i_n_84;
  wire gtxe2_i_n_9;
  wire hard_err_gt0;
  wire in0;
  wire init_clk_in;
  wire init_clk_in_0;
  wire init_clk_in_1;
  wire init_clk_in_2;
  wire [7:0]\left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[0]_1 ;
  wire \left_align_select_r_reg[0]_2 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire \left_align_select_r_reg[1]_1 ;
  wire [2:0]loopback;
  wire pll_not_locked_out;
  wire power_down;
  wire \previous_cycle_control_r_reg[0] ;
  wire [5:0]\previous_cycle_data_r_reg[7] ;
  wire rx_buf_err_i;
  wire [3:0]rx_disp_err_i;
  wire [3:0]rx_not_in_table_i;
  wire rx_polarity_i;
  wire rx_realign_i;
  wire rxn;
  wire rxp;
  wire s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  wire tx_buf_err_i;
  wire tx_out_clk;
  wire txn;
  wire txp;
  wire [0:0]\word_aligned_control_bits_r_reg[2] ;
  wire [5:0]\word_aligned_data_r_reg[16] ;
  wire \NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ;
  wire NLW_gtxe2_i_GTREFCLKMONITOR_UNCONNECTED;
  wire NLW_gtxe2_i_PHYSTATUS_UNCONNECTED;
  wire NLW_gtxe2_i_RXCHANBONDSEQ_UNCONNECTED;
  wire NLW_gtxe2_i_RXCHANISALIGNED_UNCONNECTED;
  wire NLW_gtxe2_i_RXCHANREALIGN_UNCONNECTED;
  wire NLW_gtxe2_i_RXCOMINITDET_UNCONNECTED;
  wire NLW_gtxe2_i_RXCOMSASDET_UNCONNECTED;
  wire NLW_gtxe2_i_RXCOMWAKEDET_UNCONNECTED;
  wire NLW_gtxe2_i_RXDATAVALID_UNCONNECTED;
  wire NLW_gtxe2_i_RXDLYSRESETDONE_UNCONNECTED;
  wire NLW_gtxe2_i_RXELECIDLE_UNCONNECTED;
  wire NLW_gtxe2_i_RXHEADERVALID_UNCONNECTED;
  wire NLW_gtxe2_i_RXOUTCLKFABRIC_UNCONNECTED;
  wire NLW_gtxe2_i_RXOUTCLKPCS_UNCONNECTED;
  wire NLW_gtxe2_i_RXPHALIGNDONE_UNCONNECTED;
  wire NLW_gtxe2_i_RXQPISENN_UNCONNECTED;
  wire NLW_gtxe2_i_RXQPISENP_UNCONNECTED;
  wire NLW_gtxe2_i_RXRATEDONE_UNCONNECTED;
  wire NLW_gtxe2_i_RXSTARTOFSEQ_UNCONNECTED;
  wire NLW_gtxe2_i_RXVALID_UNCONNECTED;
  wire NLW_gtxe2_i_TXCOMFINISH_UNCONNECTED;
  wire NLW_gtxe2_i_TXDLYSRESETDONE_UNCONNECTED;
  wire NLW_gtxe2_i_TXGEARBOXREADY_UNCONNECTED;
  wire NLW_gtxe2_i_TXPHALIGNDONE_UNCONNECTED;
  wire NLW_gtxe2_i_TXPHINITDONE_UNCONNECTED;
  wire NLW_gtxe2_i_TXQPISENN_UNCONNECTED;
  wire NLW_gtxe2_i_TXQPISENP_UNCONNECTED;
  wire NLW_gtxe2_i_TXRATEDONE_UNCONNECTED;
  wire [15:0]NLW_gtxe2_i_PCSRSVDOUT_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXCHARISCOMMA_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXCHARISK_UNCONNECTED;
  wire [4:0]NLW_gtxe2_i_RXCHBONDO_UNCONNECTED;
  wire [63:32]NLW_gtxe2_i_RXDATA_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXDISPERR_UNCONNECTED;
  wire [2:0]NLW_gtxe2_i_RXHEADER_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXNOTINTABLE_UNCONNECTED;
  wire [4:0]NLW_gtxe2_i_RXPHMONITOR_UNCONNECTED;
  wire [4:0]NLW_gtxe2_i_RXPHSLIPMONITOR_UNCONNECTED;
  wire [2:0]NLW_gtxe2_i_RXSTATUS_UNCONNECTED;
  wire [9:0]NLW_gtxe2_i_TSTOUT_UNCONNECTED;

  LUT4 #(
    .INIT(16'hFF90)) 
    ack_flag_i_1
       (.I0(ack_sync6),
        .I1(ack_sync5),
        .I2(ack_flag),
        .I3(flag2),
        .O(ack_flag_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ack_flag_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(ack_flag_i_1_n_0),
        .Q(ack_flag),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    ack_sync_reg1
       (.C(init_clk_in),
        .CE(1'b1),
        .D(data_sync6),
        .Q(ack_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    ack_sync_reg2
       (.C(init_clk_in),
        .CE(1'b1),
        .D(ack_sync1),
        .Q(ack_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    ack_sync_reg3
       (.C(init_clk_in),
        .CE(1'b1),
        .D(ack_sync2),
        .Q(ack_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    ack_sync_reg4
       (.C(init_clk_in),
        .CE(1'b1),
        .D(ack_sync3),
        .Q(ack_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    ack_sync_reg5
       (.C(init_clk_in),
        .CE(1'b1),
        .D(ack_sync4),
        .Q(ack_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    ack_sync_reg6
       (.C(init_clk_in),
        .CE(1'b1),
        .D(ack_sync5),
        .Q(ack_sync6),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFAFFFB10401110)) 
    \aurora_8b10b_0_sym_dec_4byte_i/left_align_select_r[0]_i_1 
       (.I0(\left_align_select_r_reg[0]_2 ),
        .I1(RXCHARISK[0]),
        .I2(RXCHARISK[2]),
        .I3(RXCHARISK[3]),
        .I4(RXCHARISK[1]),
        .I5(\left_align_select_r_reg[0]_1 ),
        .O(\left_align_select_r_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFBFFFEB10051100)) 
    \aurora_8b10b_0_sym_dec_4byte_i/left_align_select_r[1]_i_1 
       (.I0(\left_align_select_r_reg[0]_2 ),
        .I1(RXCHARISK[0]),
        .I2(RXCHARISK[2]),
        .I3(RXCHARISK[3]),
        .I4(RXCHARISK[1]),
        .I5(\left_align_select_r_reg[1]_1 ),
        .O(\left_align_select_r_reg[1]_0 ));
  LUT3 #(
    .INIT(8'hF6)) 
    cpll_reset_i__0
       (.I0(data_sync5),
        .I1(data_sync6),
        .I2(cpllreset_ovrd_i),
        .O(cpll_reset_i_0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllpd_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllpd_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(1'b0),
        .Q(\NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllpd_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllpd_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(\cpllpd_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllpd_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllpd_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(\cpllpd_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_wait_reg[95] 
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q(cpll_pd_i),
        .R(1'b0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(\cpllreset_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_wait_reg[127] 
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q(cpllreset_ovrd_i),
        .R(1'b0));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(1'b0),
        .Q(\NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(\cpllreset_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/aurora_0/inst/\aurora_8b10b_0_core_i/gt_wrapper_i/aurora_8b10b_0_multi_gt_i/gt0_aurora_8b10b_0_i/cpllreset_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1),
        .D(\cpllreset_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[95]_srl32_n_1 ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(flag),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(gt_refclk1),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_sync6),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    flag2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(flag2_reg_0),
        .Q(flag2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB4)) 
    flag_i_1
       (.I0(ack_flag),
        .I1(cpll_reset_i),
        .I2(flag),
        .O(flag_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    flag_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(flag_i_1_n_0),
        .Q(flag),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_CHANNEL #(
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b1111111111),
    .ALIGN_COMMA_WORD(2),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CHAN_BOND_KEEP_ALIGN("FALSE"),
    .CHAN_BOND_MAX_SKEW(7),
    .CHAN_BOND_SEQ_1_1(10'b0101111100),
    .CHAN_BOND_SEQ_1_2(10'b0000000000),
    .CHAN_BOND_SEQ_1_3(10'b0000000000),
    .CHAN_BOND_SEQ_1_4(10'b0000000000),
    .CHAN_BOND_SEQ_1_ENABLE(4'b0001),
    .CHAN_BOND_SEQ_2_1(10'b0000000000),
    .CHAN_BOND_SEQ_2_2(10'b0000000000),
    .CHAN_BOND_SEQ_2_3(10'b0000000000),
    .CHAN_BOND_SEQ_2_4(10'b0000000000),
    .CHAN_BOND_SEQ_2_ENABLE(4'b0000),
    .CHAN_BOND_SEQ_2_USE("FALSE"),
    .CHAN_BOND_SEQ_LEN(1),
    .CLK_CORRECT_USE("TRUE"),
    .CLK_COR_KEEP_IDLE("FALSE"),
    .CLK_COR_MAX_LAT(31),
    .CLK_COR_MIN_LAT(24),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0111110111),
    .CLK_COR_SEQ_1_2(10'b0111110111),
    .CLK_COR_SEQ_1_3(10'b0111110111),
    .CLK_COR_SEQ_1_4(10'b0111110111),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0100000000),
    .CLK_COR_SEQ_2_2(10'b0100000000),
    .CLK_COR_SEQ_2_3(10'b0100000000),
    .CLK_COR_SEQ_2_4(10'b0100000000),
    .CLK_COR_SEQ_2_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(4),
    .CPLL_CFG(24'hBC07DC),
    .CPLL_FBDIV(4),
    .CPLL_FBDIV_45(4),
    .CPLL_INIT_CFG(24'h00001E),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DMONITOR_CFG(24'h000A00),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("TRUE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("FALSE"),
    .GEARBOX_MODE(3'b000),
    .IS_CPLLLOCKDETCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("FALSE"),
    .PCS_RSVD_ATTR(48'h000000000000),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h19),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_RSV(32'h00018480),
    .PMA_RSV2(16'h2050),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(32'h00000000),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FULL"),
    .RXBUF_EIDLE_HI_CNT(4'b1000),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("FALSE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(72'h03000023FF40200020),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b0),
    .RXCDR_LOCK_CFG(6'b010101),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_HF_CFG(14'b00000011110000),
    .RXLPM_LF_CFG(14'b00000011110000),
    .RXOOB_CFG(7'b0000110),
    .RXOUT_DIV(2),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h084020),
    .RXPH_CFG(24'h000000),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("OFF"),
    .RX_BIAS_CFG(12'b000000000100),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(5),
    .RX_CLKMUX_PD(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(3'b010),
    .RX_DATA_WIDTH(40),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(12'b000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DFE_GAIN_CFG(23'h020FEA),
    .RX_DFE_H2_CFG(12'b000000000000),
    .RX_DFE_H3_CFG(12'b000001000000),
    .RX_DFE_H4_CFG(11'b00011110000),
    .RX_DFE_H5_CFG(11'b00011100000),
    .RX_DFE_KL_CFG(13'b0000011111110),
    .RX_DFE_KL_CFG2(32'h301148AC),
    .RX_DFE_LPM_CFG(16'h0954),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b0),
    .RX_DFE_UT_CFG(17'b10001111000000000),
    .RX_DFE_VP_CFG(17'b00011111100000011),
    .RX_DFE_XYD_CFG(13'b0000000000000),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_INT_DATAWIDTH(1),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(10),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b0101),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SHOW_REALIGN_COMMA("TRUE"),
    .SIM_CPLLREFCLK_SEL(3'b001),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("TRUE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("X"),
    .SIM_VERSION("4.0"),
    .TERM_RCAL_CFG(5'b10000),
    .TERM_RCAL_OVRD(1'b0),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("TRUE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(2),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPMARESET_TIME(5'b00001),
    .TX_CLK25_DIV(5),
    .TX_CLKMUX_PD(1'b1),
    .TX_DATA_WIDTH(40),
    .TX_DEEMPH0(5'b00000),
    .TX_DEEMPH1(5'b00000),
    .TX_DRIVE_MODE("DIRECT"),
    .TX_EIDLE_ASSERT_DELAY(3'b110),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_INT_DATAWIDTH(1),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001110),
    .TX_MARGIN_FULL_1(7'b1001001),
    .TX_MARGIN_FULL_2(7'b1000101),
    .TX_MARGIN_FULL_3(7'b1000010),
    .TX_MARGIN_FULL_4(7'b1000000),
    .TX_MARGIN_LOW_0(7'b1000110),
    .TX_MARGIN_LOW_1(7'b1000100),
    .TX_MARGIN_LOW_2(7'b1000010),
    .TX_MARGIN_LOW_3(7'b1000000),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h1832),
    .TX_RXDETECT_REF(3'b100),
    .TX_XCLK_SEL("TXOUT"),
    .UCODEER_CLR(1'b0)) 
    gtxe2_i
       (.CFGRESET(1'b0),
        .CLKRSVD({1'b0,1'b0,1'b0,1'b0}),
        .CPLLFBCLKLOST(gtxe2_i_n_0),
        .CPLLLOCK(in0),
        .CPLLLOCKDETCLK(init_clk_in),
        .CPLLLOCKEN(1'b1),
        .CPLLPD(cpll_pd_i),
        .CPLLREFCLKLOST(gt_pllrefclklost_i),
        .CPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .CPLLRESET(cpll_reset_i_0),
        .DMONITOROUT({gtxe2_i_n_177,gtxe2_i_n_178,gtxe2_i_n_179,gtxe2_i_n_180,gtxe2_i_n_181,gtxe2_i_n_182,gtxe2_i_n_183,gtxe2_i_n_184}),
        .DRPADDR(drpaddr_in),
        .DRPCLK(drpclk_in),
        .DRPDI(drpdi_in),
        .DRPDO(drpdo_out),
        .DRPEN(drpen_in),
        .DRPRDY(drprdy_out),
        .DRPWE(drpwe_in),
        .EYESCANDATAERROR(gtxe2_i_n_4),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(1'b0),
        .EYESCANTRIGGER(1'b0),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(gt_refclk1),
        .GTREFCLK1(1'b0),
        .GTREFCLKMONITOR(NLW_gtxe2_i_GTREFCLKMONITOR_UNCONNECTED),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(SR),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .GTTXRESET(gt_tx_reset_i),
        .GTXRXN(rxn),
        .GTXRXP(rxp),
        .GTXTXN(txn),
        .GTXTXP(txp),
        .LOOPBACK(loopback),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(NLW_gtxe2_i_PCSRSVDOUT_UNCONNECTED[15:0]),
        .PHYSTATUS(NLW_gtxe2_i_PHYSTATUS_UNCONNECTED),
        .PMARSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLCLK(gt_qpllclk_quad1_out),
        .QPLLREFCLK(gt_qpllrefclk_quad1_out),
        .RESETOVRD(1'b0),
        .RX8B10BEN(1'b1),
        .RXBUFRESET(1'b0),
        .RXBUFSTATUS({rx_buf_err_i,gtxe2_i_n_83,gtxe2_i_n_84}),
        .RXBYTEISALIGNED(gtxe2_i_n_9),
        .RXBYTEREALIGN(rx_realign_i),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(1'b0),
        .RXCDRLOCK(gtxe2_i_n_11),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(NLW_gtxe2_i_RXCHANBONDSEQ_UNCONNECTED),
        .RXCHANISALIGNED(NLW_gtxe2_i_RXCHANISALIGNED_UNCONNECTED),
        .RXCHANREALIGN(NLW_gtxe2_i_RXCHANREALIGN_UNCONNECTED),
        .RXCHARISCOMMA({NLW_gtxe2_i_RXCHARISCOMMA_UNCONNECTED[7:4],D}),
        .RXCHARISK({NLW_gtxe2_i_RXCHARISK_UNCONNECTED[7:4],RXCHARISK}),
        .RXCHBONDEN(1'b0),
        .RXCHBONDI({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b0}),
        .RXCHBONDMASTER(1'b0),
        .RXCHBONDO(NLW_gtxe2_i_RXCHBONDO_UNCONNECTED[4:0]),
        .RXCHBONDSLAVE(1'b0),
        .RXCLKCORCNT({gtxe2_i_n_78,gtxe2_i_n_79}),
        .RXCOMINITDET(NLW_gtxe2_i_RXCOMINITDET_UNCONNECTED),
        .RXCOMMADET(gtxe2_i_n_16),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(NLW_gtxe2_i_RXCOMSASDET_UNCONNECTED),
        .RXCOMWAKEDET(NLW_gtxe2_i_RXCOMWAKEDET_UNCONNECTED),
        .RXDATA({NLW_gtxe2_i_RXDATA_UNCONNECTED[63:32],RXDATA}),
        .RXDATAVALID(NLW_gtxe2_i_RXDATAVALID_UNCONNECTED),
        .RXDDIEN(1'b0),
        .RXDFEAGCHOLD(gt_rxdfelfhold_i),
        .RXDFEAGCOVRDEN(1'b0),
        .RXDFECM1EN(1'b0),
        .RXDFELFHOLD(gt_rxdfelfhold_i),
        .RXDFELFOVRDEN(1'b1),
        .RXDFELPMRESET(1'b0),
        .RXDFETAP2HOLD(1'b0),
        .RXDFETAP2OVRDEN(1'b0),
        .RXDFETAP3HOLD(1'b0),
        .RXDFETAP3OVRDEN(1'b0),
        .RXDFETAP4HOLD(1'b0),
        .RXDFETAP4OVRDEN(1'b0),
        .RXDFETAP5HOLD(1'b0),
        .RXDFETAP5OVRDEN(1'b0),
        .RXDFEUTHOLD(1'b0),
        .RXDFEUTOVRDEN(1'b0),
        .RXDFEVPHOLD(1'b0),
        .RXDFEVPOVRDEN(1'b0),
        .RXDFEVSEN(1'b0),
        .RXDFEXYDEN(1'b1),
        .RXDFEXYDHOLD(1'b0),
        .RXDFEXYDOVRDEN(1'b0),
        .RXDISPERR({NLW_gtxe2_i_RXDISPERR_UNCONNECTED[7:4],rx_disp_err_i}),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(NLW_gtxe2_i_RXDLYSRESETDONE_UNCONNECTED),
        .RXELECIDLE(NLW_gtxe2_i_RXELECIDLE_UNCONNECTED),
        .RXELECIDLEMODE({1'b1,1'b1}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(NLW_gtxe2_i_RXHEADER_UNCONNECTED[2:0]),
        .RXHEADERVALID(NLW_gtxe2_i_RXHEADERVALID_UNCONNECTED),
        .RXLPMEN(1'b0),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFKLOVRDEN(1'b0),
        .RXMCOMMAALIGNEN(ena_comma_align_i),
        .RXMONITOROUT({gtxe2_i_n_170,gtxe2_i_n_171,gtxe2_i_n_172,gtxe2_i_n_173,gtxe2_i_n_174,gtxe2_i_n_175,gtxe2_i_n_176}),
        .RXMONITORSEL({1'b0,1'b0}),
        .RXNOTINTABLE({NLW_gtxe2_i_RXNOTINTABLE_UNCONNECTED[7:4],rx_not_in_table_i}),
        .RXOOBRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(gtxe2_i_n_23),
        .RXOUTCLKFABRIC(NLW_gtxe2_i_RXOUTCLKFABRIC_UNCONNECTED),
        .RXOUTCLKPCS(NLW_gtxe2_i_RXOUTCLKPCS_UNCONNECTED),
        .RXOUTCLKSEL({1'b0,1'b1,1'b0}),
        .RXPCOMMAALIGNEN(ena_comma_align_i),
        .RXPCSRESET(1'b0),
        .RXPD({power_down,power_down}),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(NLW_gtxe2_i_RXPHALIGNDONE_UNCONNECTED),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(NLW_gtxe2_i_RXPHMONITOR_UNCONNECTED[4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(NLW_gtxe2_i_RXPHSLIPMONITOR_UNCONNECTED[4:0]),
        .RXPMARESET(1'b0),
        .RXPOLARITY(rx_polarity_i),
        .RXPRBSCNTRESET(1'b0),
        .RXPRBSERR(gtxe2_i_n_27),
        .RXPRBSSEL({1'b0,1'b0,1'b0}),
        .RXQPIEN(1'b0),
        .RXQPISENN(NLW_gtxe2_i_RXQPISENN_UNCONNECTED),
        .RXQPISENP(NLW_gtxe2_i_RXQPISENP_UNCONNECTED),
        .RXRATE({1'b0,1'b0,1'b0}),
        .RXRATEDONE(NLW_gtxe2_i_RXRATEDONE_UNCONNECTED),
        .RXRESETDONE(init_clk_in_0),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(NLW_gtxe2_i_RXSTARTOFSEQ_UNCONNECTED),
        .RXSTATUS(NLW_gtxe2_i_RXSTATUS_UNCONNECTED[2:0]),
        .RXSYSCLKSEL({1'b0,1'b0}),
        .RXUSERRDY(gt_rxuserrdy_i),
        .RXUSRCLK(s_level_out_d1_aurora_8b10b_0_cdc_to_reg),
        .RXUSRCLK2(s_level_out_d1_aurora_8b10b_0_cdc_to_reg),
        .RXVALID(NLW_gtxe2_i_RXVALID_UNCONNECTED),
        .SETERRSTATUS(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TSTOUT(NLW_gtxe2_i_TSTOUT_UNCONNECTED[9:0]),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(1'b1),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS({tx_buf_err_i,gtxe2_i_n_81}),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK({1'b0,1'b0,1'b0,1'b0,TXCHARISK}),
        .TXCOMFINISH(NLW_gtxe2_i_TXCOMFINISH_UNCONNECTED),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,TXDATA}),
        .TXDEEMPH(1'b0),
        .TXDETECTRX(1'b0),
        .TXDIFFCTRL({1'b1,1'b0,1'b0,1'b0}),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b1),
        .TXDLYEN(1'b0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(1'b0),
        .TXDLYSRESETDONE(NLW_gtxe2_i_TXDLYSRESETDONE_UNCONNECTED),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(power_down),
        .TXGEARBOXREADY(NLW_gtxe2_i_TXGEARBOXREADY_UNCONNECTED),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(1'b0),
        .TXMAINCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXMARGIN({1'b0,1'b0,1'b0}),
        .TXOUTCLK(tx_out_clk),
        .TXOUTCLKFABRIC(gtxe2_i_n_38),
        .TXOUTCLKPCS(gtxe2_i_n_39),
        .TXOUTCLKSEL({1'b0,1'b1,1'b0}),
        .TXPCSRESET(1'b0),
        .TXPD({power_down,power_down}),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(1'b0),
        .TXPHALIGNDONE(NLW_gtxe2_i_TXPHALIGNDONE_UNCONNECTED),
        .TXPHALIGNEN(1'b0),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(1'b0),
        .TXPHINITDONE(NLW_gtxe2_i_TXPHINITDONE_UNCONNECTED),
        .TXPHOVRDEN(1'b0),
        .TXPISOPD(1'b0),
        .TXPMARESET(1'b0),
        .TXPOLARITY(1'b0),
        .TXPOSTCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(1'b0),
        .TXPRBSSEL({1'b0,1'b0,1'b0}),
        .TXPRECURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXPRECURSORINV(1'b0),
        .TXQPIBIASEN(1'b0),
        .TXQPISENN(NLW_gtxe2_i_TXQPISENN_UNCONNECTED),
        .TXQPISENP(NLW_gtxe2_i_TXQPISENP_UNCONNECTED),
        .TXQPISTRONGPDOWN(1'b0),
        .TXQPIWEAKPUP(1'b0),
        .TXRATE({1'b0,1'b0,1'b0}),
        .TXRATEDONE(NLW_gtxe2_i_TXRATEDONE_UNCONNECTED),
        .TXRESETDONE(init_clk_in_1),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYSCLKSEL({1'b0,1'b0}),
        .TXUSERRDY(gt_txuserrdy_i),
        .TXUSRCLK(s_level_out_d1_aurora_8b10b_0_cdc_to_reg),
        .TXUSRCLK2(s_level_out_d1_aurora_8b10b_0_cdc_to_reg));
  LUT3 #(
    .INIT(8'hFE)) 
    hard_err_gt_i_1
       (.I0(rx_buf_err_i),
        .I1(tx_buf_err_i),
        .I2(rx_realign_i),
        .O(hard_err_gt0));
  LUT1 #(
    .INIT(2'h1)) 
    pll_not_locked_out_INST_0
       (.I0(in0),
        .O(pll_not_locked_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    reset_count_r_i_2
       (.I0(rx_disp_err_i[3]),
        .I1(rx_not_in_table_i[3]),
        .I2(rx_not_in_table_i[1]),
        .I3(rx_disp_err_i[1]),
        .I4(rx_disp_err_i[0]),
        .I5(rx_disp_err_i[2]),
        .O(init_clk_in_2));
  LUT4 #(
    .INIT(16'h0010)) 
    reset_count_r_i_3
       (.I0(rx_not_in_table_i[2]),
        .I1(rx_not_in_table_i[0]),
        .I2(consecutive_commas_r),
        .I3(begin_r),
        .O(consecutive_commas_r_reg));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \soft_err_r[0]_i_1 
       (.I0(enable_err_detect_i),
        .I1(rx_disp_err_i[0]),
        .I2(rx_not_in_table_i[0]),
        .O(ENABLE_ERR_DETECT_reg[3]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \soft_err_r[1]_i_1 
       (.I0(rx_disp_err_i[1]),
        .I1(rx_not_in_table_i[1]),
        .I2(enable_err_detect_i),
        .O(ENABLE_ERR_DETECT_reg[2]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \soft_err_r[2]_i_1 
       (.I0(enable_err_detect_i),
        .I1(rx_disp_err_i[2]),
        .I2(rx_not_in_table_i[2]),
        .O(ENABLE_ERR_DETECT_reg[1]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \soft_err_r[3]_i_1 
       (.I0(rx_disp_err_i[3]),
        .I1(rx_not_in_table_i[3]),
        .I2(enable_err_detect_i),
        .O(ENABLE_ERR_DETECT_reg[0]));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_control_bits_r[2]_i_1 
       (.I0(RXCHARISK[2]),
        .I1(\word_aligned_control_bits_r_reg[2] ),
        .I2(RXCHARISK[0]),
        .I3(\left_align_select_r_reg[0]_1 ),
        .I4(\left_align_select_r_reg[1]_1 ),
        .I5(RXCHARISK[1]),
        .O(\previous_cycle_control_r_reg[0] ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \word_aligned_control_bits_r[3]_i_1 
       (.I0(RXCHARISK[0]),
        .I1(RXCHARISK[2]),
        .I2(RXCHARISK[3]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXCHARISK[1]),
        .O(\left_align_select_r_reg[1] ));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[16]_i_1 
       (.I0(RXDATA[23]),
        .I1(\word_aligned_data_r_reg[16] [5]),
        .I2(RXDATA[7]),
        .I3(\left_align_select_r_reg[0]_1 ),
        .I4(\left_align_select_r_reg[1]_1 ),
        .I5(RXDATA[15]),
        .O(\previous_cycle_data_r_reg[7] [5]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[17]_i_1 
       (.I0(RXDATA[22]),
        .I1(\word_aligned_data_r_reg[16] [4]),
        .I2(RXDATA[14]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[6]),
        .O(\previous_cycle_data_r_reg[7] [4]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[20]_i_1 
       (.I0(RXDATA[19]),
        .I1(\word_aligned_data_r_reg[16] [3]),
        .I2(RXDATA[11]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[3]),
        .O(\previous_cycle_data_r_reg[7] [3]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[21]_i_1 
       (.I0(RXDATA[18]),
        .I1(\word_aligned_data_r_reg[16] [2]),
        .I2(RXDATA[10]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[2]),
        .O(\previous_cycle_data_r_reg[7] [2]));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[22]_i_1 
       (.I0(RXDATA[17]),
        .I1(\word_aligned_data_r_reg[16] [1]),
        .I2(RXDATA[1]),
        .I3(\left_align_select_r_reg[0]_1 ),
        .I4(\left_align_select_r_reg[1]_1 ),
        .I5(RXDATA[9]),
        .O(\previous_cycle_data_r_reg[7] [1]));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[23]_i_1 
       (.I0(RXDATA[16]),
        .I1(\word_aligned_data_r_reg[16] [0]),
        .I2(RXDATA[0]),
        .I3(\left_align_select_r_reg[0]_1 ),
        .I4(\left_align_select_r_reg[1]_1 ),
        .I5(RXDATA[8]),
        .O(\previous_cycle_data_r_reg[7] [0]));
  LUT6 #(
    .INIT(64'hFFCCF0AA00CCF0AA)) 
    \word_aligned_data_r[24]_i_1 
       (.I0(RXDATA[31]),
        .I1(RXDATA[7]),
        .I2(RXDATA[15]),
        .I3(\left_align_select_r_reg[0]_1 ),
        .I4(\left_align_select_r_reg[1]_1 ),
        .I5(RXDATA[23]),
        .O(\left_align_select_r_reg[0] [7]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \word_aligned_data_r[25]_i_1 
       (.I0(RXDATA[6]),
        .I1(RXDATA[14]),
        .I2(RXDATA[30]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[22]),
        .O(\left_align_select_r_reg[0] [6]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \word_aligned_data_r[26]_i_1 
       (.I0(RXDATA[5]),
        .I1(RXDATA[13]),
        .I2(RXDATA[29]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[21]),
        .O(\left_align_select_r_reg[0] [5]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \word_aligned_data_r[27]_i_1 
       (.I0(RXDATA[4]),
        .I1(RXDATA[20]),
        .I2(RXDATA[28]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[12]),
        .O(\left_align_select_r_reg[0] [4]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[28]_i_1 
       (.I0(RXDATA[27]),
        .I1(RXDATA[3]),
        .I2(RXDATA[19]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[11]),
        .O(\left_align_select_r_reg[0] [3]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[29]_i_1 
       (.I0(RXDATA[26]),
        .I1(RXDATA[2]),
        .I2(RXDATA[18]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[10]),
        .O(\left_align_select_r_reg[0] [2]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[30]_i_1 
       (.I0(RXDATA[25]),
        .I1(RXDATA[1]),
        .I2(RXDATA[17]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[9]),
        .O(\left_align_select_r_reg[0] [1]));
  LUT6 #(
    .INIT(64'hF0FFCCAAF000CCAA)) 
    \word_aligned_data_r[31]_i_1 
       (.I0(RXDATA[24]),
        .I1(RXDATA[0]),
        .I2(RXDATA[16]),
        .I3(\left_align_select_r_reg[1]_1 ),
        .I4(\left_align_select_r_reg[0]_1 ),
        .I5(RXDATA[8]),
        .O(\left_align_select_r_reg[0] [0]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_gt_common_wrapper" *) 
module top_aurora_0_0_aurora_8b10b_0_gt_common_wrapper
   (gt0_qplllock_out,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    gt0_qpllrefclklost_out,
    gt_refclk1,
    init_clk_in);
  output gt0_qplllock_out;
  output gt_qpllclk_quad1_out;
  output gt_qpllrefclk_quad1_out;
  output gt0_qpllrefclklost_out;
  input gt_refclk1;
  input init_clk_in;

  wire gt0_qplllock_out;
  wire gt0_qpllrefclklost_out;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire init_clk_in;
  wire NLW_gtxe2_common_i_DRPRDY_UNCONNECTED;
  wire NLW_gtxe2_common_i_QPLLFBCLKLOST_UNCONNECTED;
  wire NLW_gtxe2_common_i_REFCLKOUTMONITOR_UNCONNECTED;
  wire [15:0]NLW_gtxe2_common_i_DRPDO_UNCONNECTED;
  wire [7:0]NLW_gtxe2_common_i_QPLLDMONITOR_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_COMMON #(
    .BIAS_CFG(64'h0000040000001000),
    .COMMON_CFG(32'h00000000),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_QPLLLOCKDETCLK_INVERTED(1'b0),
    .QPLL_CFG(27'h06801C1),
    .QPLL_CLKOUT_CFG(4'b0000),
    .QPLL_COARSE_FREQ_OVRD(6'b010000),
    .QPLL_COARSE_FREQ_OVRD_EN(1'b0),
    .QPLL_CP(10'b0000011111),
    .QPLL_CP_MONITOR_EN(1'b0),
    .QPLL_DMONITOR_SEL(1'b0),
    .QPLL_FBDIV(10'b0010000000),
    .QPLL_FBDIV_MONITOR_EN(1'b0),
    .QPLL_FBDIV_RATIO(1'b1),
    .QPLL_INIT_CFG(24'h000006),
    .QPLL_LOCK_CFG(16'h21E8),
    .QPLL_LPF(4'b1111),
    .QPLL_REFCLK_DIV(1),
    .SIM_QPLLREFCLK_SEL(3'b001),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_VERSION("4.0")) 
    gtxe2_common_i
       (.BGBYPASSB(1'b1),
        .BGMONITORENB(1'b1),
        .BGPDB(1'b1),
        .BGRCALOVRD({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DRPADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DRPCLK(1'b0),
        .DRPDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DRPDO(NLW_gtxe2_common_i_DRPDO_UNCONNECTED[15:0]),
        .DRPEN(1'b0),
        .DRPRDY(NLW_gtxe2_common_i_DRPRDY_UNCONNECTED),
        .DRPWE(1'b0),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(gt_refclk1),
        .GTREFCLK1(1'b0),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .PMARSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLDMONITOR(NLW_gtxe2_common_i_QPLLDMONITOR_UNCONNECTED[7:0]),
        .QPLLFBCLKLOST(NLW_gtxe2_common_i_QPLLFBCLKLOST_UNCONNECTED),
        .QPLLLOCK(gt0_qplllock_out),
        .QPLLLOCKDETCLK(init_clk_in),
        .QPLLLOCKEN(1'b1),
        .QPLLOUTCLK(gt_qpllclk_quad1_out),
        .QPLLOUTREFCLK(gt_qpllrefclk_quad1_out),
        .QPLLOUTRESET(1'b0),
        .QPLLPD(1'b1),
        .QPLLREFCLKLOST(gt0_qpllrefclklost_out),
        .QPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .QPLLRESET(1'b0),
        .QPLLRSVD1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLRSVD2({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .RCALENB(1'b1),
        .REFCLKOUTMONITOR(NLW_gtxe2_common_i_REFCLKOUTMONITOR_UNCONNECTED));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_hotplug" *) 
module top_aurora_0_0_aurora_8b10b_0_hotplug
   (link_reset_out,
    p_level_in_d1_cdc_from_reg,
    init_clk_in,
    SR,
    D);
  output link_reset_out;
  input p_level_in_d1_cdc_from_reg;
  input init_clk_in;
  input [0:0]SR;
  input [0:0]D;

  wire [0:0]D;
  wire [0:0]SR;
  wire cc_sync;
  wire \count_for_reset_r[0]_i_2_n_0 ;
  wire [25:0]count_for_reset_r_reg;
  wire \count_for_reset_r_reg[0]_i_1_n_0 ;
  wire \count_for_reset_r_reg[0]_i_1_n_1 ;
  wire \count_for_reset_r_reg[0]_i_1_n_2 ;
  wire \count_for_reset_r_reg[0]_i_1_n_3 ;
  wire \count_for_reset_r_reg[0]_i_1_n_4 ;
  wire \count_for_reset_r_reg[0]_i_1_n_5 ;
  wire \count_for_reset_r_reg[0]_i_1_n_6 ;
  wire \count_for_reset_r_reg[0]_i_1_n_7 ;
  wire \count_for_reset_r_reg[12]_i_1_n_0 ;
  wire \count_for_reset_r_reg[12]_i_1_n_1 ;
  wire \count_for_reset_r_reg[12]_i_1_n_2 ;
  wire \count_for_reset_r_reg[12]_i_1_n_3 ;
  wire \count_for_reset_r_reg[12]_i_1_n_4 ;
  wire \count_for_reset_r_reg[12]_i_1_n_5 ;
  wire \count_for_reset_r_reg[12]_i_1_n_6 ;
  wire \count_for_reset_r_reg[12]_i_1_n_7 ;
  wire \count_for_reset_r_reg[16]_i_1_n_0 ;
  wire \count_for_reset_r_reg[16]_i_1_n_1 ;
  wire \count_for_reset_r_reg[16]_i_1_n_2 ;
  wire \count_for_reset_r_reg[16]_i_1_n_3 ;
  wire \count_for_reset_r_reg[16]_i_1_n_4 ;
  wire \count_for_reset_r_reg[16]_i_1_n_5 ;
  wire \count_for_reset_r_reg[16]_i_1_n_6 ;
  wire \count_for_reset_r_reg[16]_i_1_n_7 ;
  wire \count_for_reset_r_reg[20]_i_1_n_0 ;
  wire \count_for_reset_r_reg[20]_i_1_n_1 ;
  wire \count_for_reset_r_reg[20]_i_1_n_2 ;
  wire \count_for_reset_r_reg[20]_i_1_n_3 ;
  wire \count_for_reset_r_reg[20]_i_1_n_4 ;
  wire \count_for_reset_r_reg[20]_i_1_n_5 ;
  wire \count_for_reset_r_reg[20]_i_1_n_6 ;
  wire \count_for_reset_r_reg[20]_i_1_n_7 ;
  wire \count_for_reset_r_reg[24]_i_1_n_3 ;
  wire \count_for_reset_r_reg[24]_i_1_n_6 ;
  wire \count_for_reset_r_reg[24]_i_1_n_7 ;
  wire \count_for_reset_r_reg[4]_i_1_n_0 ;
  wire \count_for_reset_r_reg[4]_i_1_n_1 ;
  wire \count_for_reset_r_reg[4]_i_1_n_2 ;
  wire \count_for_reset_r_reg[4]_i_1_n_3 ;
  wire \count_for_reset_r_reg[4]_i_1_n_4 ;
  wire \count_for_reset_r_reg[4]_i_1_n_5 ;
  wire \count_for_reset_r_reg[4]_i_1_n_6 ;
  wire \count_for_reset_r_reg[4]_i_1_n_7 ;
  wire \count_for_reset_r_reg[8]_i_1_n_0 ;
  wire \count_for_reset_r_reg[8]_i_1_n_1 ;
  wire \count_for_reset_r_reg[8]_i_1_n_2 ;
  wire \count_for_reset_r_reg[8]_i_1_n_3 ;
  wire \count_for_reset_r_reg[8]_i_1_n_4 ;
  wire \count_for_reset_r_reg[8]_i_1_n_5 ;
  wire \count_for_reset_r_reg[8]_i_1_n_6 ;
  wire \count_for_reset_r_reg[8]_i_1_n_7 ;
  wire init_clk_in;
  wire link_reset_0;
  wire link_reset_0_i_1_n_0;
  wire link_reset_0_i_2_n_0;
  wire link_reset_0_i_3_n_0;
  wire link_reset_0_i_4_n_0;
  wire link_reset_0_i_5_n_0;
  wire link_reset_0_i_6_n_0;
  wire link_reset_0_i_7_n_0;
  wire link_reset_out;
  wire p_level_in_d1_cdc_from_reg;
  wire [7:0]rx_cc_extend_r;
  wire rx_cc_extend_r2;
  wire rx_cc_extend_r2_i_1_n_0;
  wire rx_cc_extend_r2_i_2_n_0;
  wire [3:1]\NLW_count_for_reset_r_reg[24]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_count_for_reset_r_reg[24]_i_1_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count_for_reset_r[0]_i_2 
       (.I0(count_for_reset_r_reg[0]),
        .O(\count_for_reset_r[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[0]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\count_for_reset_r_reg[0]_i_1_n_0 ,\count_for_reset_r_reg[0]_i_1_n_1 ,\count_for_reset_r_reg[0]_i_1_n_2 ,\count_for_reset_r_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\count_for_reset_r_reg[0]_i_1_n_4 ,\count_for_reset_r_reg[0]_i_1_n_5 ,\count_for_reset_r_reg[0]_i_1_n_6 ,\count_for_reset_r_reg[0]_i_1_n_7 }),
        .S({count_for_reset_r_reg[3:1],\count_for_reset_r[0]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[10] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[10]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[11] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[11]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[12] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[12]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[12]_i_1 
       (.CI(\count_for_reset_r_reg[8]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[12]_i_1_n_0 ,\count_for_reset_r_reg[12]_i_1_n_1 ,\count_for_reset_r_reg[12]_i_1_n_2 ,\count_for_reset_r_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[12]_i_1_n_4 ,\count_for_reset_r_reg[12]_i_1_n_5 ,\count_for_reset_r_reg[12]_i_1_n_6 ,\count_for_reset_r_reg[12]_i_1_n_7 }),
        .S(count_for_reset_r_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[13] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[13]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[14] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[14]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[15] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[15]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[16] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[16]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[16]_i_1 
       (.CI(\count_for_reset_r_reg[12]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[16]_i_1_n_0 ,\count_for_reset_r_reg[16]_i_1_n_1 ,\count_for_reset_r_reg[16]_i_1_n_2 ,\count_for_reset_r_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[16]_i_1_n_4 ,\count_for_reset_r_reg[16]_i_1_n_5 ,\count_for_reset_r_reg[16]_i_1_n_6 ,\count_for_reset_r_reg[16]_i_1_n_7 }),
        .S(count_for_reset_r_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[17] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[17]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[18] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[18]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[19] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[19]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[1] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[1]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[20] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[20]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[20]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[20]_i_1 
       (.CI(\count_for_reset_r_reg[16]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[20]_i_1_n_0 ,\count_for_reset_r_reg[20]_i_1_n_1 ,\count_for_reset_r_reg[20]_i_1_n_2 ,\count_for_reset_r_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[20]_i_1_n_4 ,\count_for_reset_r_reg[20]_i_1_n_5 ,\count_for_reset_r_reg[20]_i_1_n_6 ,\count_for_reset_r_reg[20]_i_1_n_7 }),
        .S(count_for_reset_r_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[21] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[20]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[21]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[22] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[20]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[22]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[23] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[20]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[23]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[24] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[24]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[24]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[24]_i_1 
       (.CI(\count_for_reset_r_reg[20]_i_1_n_0 ),
        .CO({\NLW_count_for_reset_r_reg[24]_i_1_CO_UNCONNECTED [3:1],\count_for_reset_r_reg[24]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_count_for_reset_r_reg[24]_i_1_O_UNCONNECTED [3:2],\count_for_reset_r_reg[24]_i_1_n_6 ,\count_for_reset_r_reg[24]_i_1_n_7 }),
        .S({1'b0,1'b0,count_for_reset_r_reg[25:24]}));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[25] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[24]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[25]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[2] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[2]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[3] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[3]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[4] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[4]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[4]_i_1 
       (.CI(\count_for_reset_r_reg[0]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[4]_i_1_n_0 ,\count_for_reset_r_reg[4]_i_1_n_1 ,\count_for_reset_r_reg[4]_i_1_n_2 ,\count_for_reset_r_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[4]_i_1_n_4 ,\count_for_reset_r_reg[4]_i_1_n_5 ,\count_for_reset_r_reg[4]_i_1_n_6 ,\count_for_reset_r_reg[4]_i_1_n_7 }),
        .S(count_for_reset_r_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[5] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[5]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[6] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[6]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[7] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[7]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[8] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[8]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[8]_i_1 
       (.CI(\count_for_reset_r_reg[4]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[8]_i_1_n_0 ,\count_for_reset_r_reg[8]_i_1_n_1 ,\count_for_reset_r_reg[8]_i_1_n_2 ,\count_for_reset_r_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[8]_i_1_n_4 ,\count_for_reset_r_reg[8]_i_1_n_5 ,\count_for_reset_r_reg[8]_i_1_n_6 ,\count_for_reset_r_reg[8]_i_1_n_7 }),
        .S(count_for_reset_r_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[9] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[9]),
        .R(cc_sync));
  LUT6 #(
    .INIT(64'h0000000000005444)) 
    link_reset_0_i_1
       (.I0(link_reset_0_i_2_n_0),
        .I1(count_for_reset_r_reg[4]),
        .I2(count_for_reset_r_reg[2]),
        .I3(count_for_reset_r_reg[3]),
        .I4(link_reset_0_i_3_n_0),
        .I5(link_reset_0_i_4_n_0),
        .O(link_reset_0_i_1_n_0));
  LUT4 #(
    .INIT(16'hFF7F)) 
    link_reset_0_i_2
       (.I0(count_for_reset_r_reg[14]),
        .I1(count_for_reset_r_reg[10]),
        .I2(count_for_reset_r_reg[13]),
        .I3(link_reset_0_i_5_n_0),
        .O(link_reset_0_i_2_n_0));
  LUT6 #(
    .INIT(64'hEFFFFFFFFFFFFFFF)) 
    link_reset_0_i_3
       (.I0(link_reset_0_i_6_n_0),
        .I1(link_reset_0_i_7_n_0),
        .I2(count_for_reset_r_reg[6]),
        .I3(count_for_reset_r_reg[21]),
        .I4(count_for_reset_r_reg[5]),
        .I5(count_for_reset_r_reg[16]),
        .O(link_reset_0_i_3_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    link_reset_0_i_4
       (.I0(count_for_reset_r_reg[2]),
        .I1(count_for_reset_r_reg[3]),
        .I2(count_for_reset_r_reg[0]),
        .I3(count_for_reset_r_reg[4]),
        .I4(count_for_reset_r_reg[10]),
        .I5(count_for_reset_r_reg[1]),
        .O(link_reset_0_i_4_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    link_reset_0_i_5
       (.I0(count_for_reset_r_reg[7]),
        .I1(count_for_reset_r_reg[22]),
        .I2(count_for_reset_r_reg[8]),
        .I3(count_for_reset_r_reg[15]),
        .O(link_reset_0_i_5_n_0));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    link_reset_0_i_6
       (.I0(count_for_reset_r_reg[9]),
        .I1(count_for_reset_r_reg[18]),
        .I2(count_for_reset_r_reg[24]),
        .I3(count_for_reset_r_reg[11]),
        .I4(count_for_reset_r_reg[19]),
        .I5(count_for_reset_r_reg[17]),
        .O(link_reset_0_i_6_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    link_reset_0_i_7
       (.I0(count_for_reset_r_reg[12]),
        .I1(count_for_reset_r_reg[23]),
        .I2(count_for_reset_r_reg[20]),
        .I3(count_for_reset_r_reg[25]),
        .O(link_reset_0_i_7_n_0));
  FDRE link_reset_0_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_0_i_1_n_0),
        .Q(link_reset_0),
        .R(1'b0));
  FDRE \link_reset_r_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_0),
        .Q(link_reset_out),
        .R(1'b0));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_23 rx_cc_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(cc_sync),
        .p_level_in_d1_cdc_from_reg_0(p_level_in_d1_cdc_from_reg),
        .rx_cc_extend_r2(rx_cc_extend_r2));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rx_cc_extend_r2_i_1
       (.I0(rx_cc_extend_r[2]),
        .I1(rx_cc_extend_r[3]),
        .I2(rx_cc_extend_r[0]),
        .I3(rx_cc_extend_r[1]),
        .I4(rx_cc_extend_r2_i_2_n_0),
        .O(rx_cc_extend_r2_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    rx_cc_extend_r2_i_2
       (.I0(rx_cc_extend_r[5]),
        .I1(rx_cc_extend_r[4]),
        .I2(rx_cc_extend_r[7]),
        .I3(rx_cc_extend_r[6]),
        .O(rx_cc_extend_r2_i_2_n_0));
  FDRE rx_cc_extend_r2_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r2_i_1_n_0),
        .Q(rx_cc_extend_r2),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[0] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[1]),
        .Q(rx_cc_extend_r[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[1] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[2]),
        .Q(rx_cc_extend_r[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[2] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[3]),
        .Q(rx_cc_extend_r[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[3] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[4]),
        .Q(rx_cc_extend_r[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[4] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[5]),
        .Q(rx_cc_extend_r[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[5] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[6]),
        .Q(rx_cc_extend_r[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[6] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(rx_cc_extend_r[7]),
        .Q(rx_cc_extend_r[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[7] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(D),
        .Q(rx_cc_extend_r[7]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_multi_gt" *) 
module top_aurora_0_0_aurora_8b10b_0_multi_gt
   (in0,
    drprdy_out,
    txn,
    txp,
    rx_realign_i,
    init_clk_in_0,
    tx_out_clk,
    init_clk_in_1,
    drpdo_out,
    RXDATA,
    D,
    RXCHARISK,
    ack_flag,
    pll_not_locked_out,
    ENABLE_ERR_DETECT_reg,
    consecutive_commas_r_reg,
    init_clk_in_2,
    \previous_cycle_data_r_reg[7] ,
    \left_align_select_r_reg[0] ,
    \previous_cycle_control_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    hard_err_gt0,
    \left_align_select_r_reg[0]_0 ,
    \left_align_select_r_reg[1]_0 ,
    gt_refclk1,
    init_clk_in,
    drpclk_in,
    drpen_in,
    drpwe_in,
    SR,
    gt_tx_reset_i,
    rxn,
    rxp,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    gt_rxdfelfhold_i,
    ena_comma_align_i,
    rx_polarity_i,
    gt_rxuserrdy_i,
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg,
    power_down,
    gt_txuserrdy_i,
    drpdi_in,
    loopback,
    TXDATA,
    TXCHARISK,
    drpaddr_in,
    flag2_reg,
    enable_err_detect_i,
    consecutive_commas_r,
    begin_r,
    \word_aligned_data_r_reg[16] ,
    \left_align_select_r_reg[0]_1 ,
    \left_align_select_r_reg[1]_1 ,
    \word_aligned_control_bits_r_reg[2] ,
    cpll_reset_i,
    \left_align_select_r_reg[0]_2 );
  output in0;
  output drprdy_out;
  output txn;
  output txp;
  output rx_realign_i;
  output init_clk_in_0;
  output tx_out_clk;
  output init_clk_in_1;
  output [15:0]drpdo_out;
  output [31:0]RXDATA;
  output [3:0]D;
  output [3:0]RXCHARISK;
  output ack_flag;
  output pll_not_locked_out;
  output [3:0]ENABLE_ERR_DETECT_reg;
  output consecutive_commas_r_reg;
  output init_clk_in_2;
  output [5:0]\previous_cycle_data_r_reg[7] ;
  output [7:0]\left_align_select_r_reg[0] ;
  output \previous_cycle_control_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  output hard_err_gt0;
  output \left_align_select_r_reg[0]_0 ;
  output \left_align_select_r_reg[1]_0 ;
  input gt_refclk1;
  input init_clk_in;
  input drpclk_in;
  input drpen_in;
  input drpwe_in;
  input [0:0]SR;
  input gt_tx_reset_i;
  input rxn;
  input rxp;
  input gt_qpllclk_quad1_out;
  input gt_qpllrefclk_quad1_out;
  input gt_rxdfelfhold_i;
  input ena_comma_align_i;
  input rx_polarity_i;
  input gt_rxuserrdy_i;
  input s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  input power_down;
  input gt_txuserrdy_i;
  input [15:0]drpdi_in;
  input [2:0]loopback;
  input [31:0]TXDATA;
  input [3:0]TXCHARISK;
  input [8:0]drpaddr_in;
  input flag2_reg;
  input enable_err_detect_i;
  input consecutive_commas_r;
  input begin_r;
  input [5:0]\word_aligned_data_r_reg[16] ;
  input \left_align_select_r_reg[0]_1 ;
  input \left_align_select_r_reg[1]_1 ;
  input [0:0]\word_aligned_control_bits_r_reg[2] ;
  input cpll_reset_i;
  input \left_align_select_r_reg[0]_2 ;

  wire [3:0]D;
  wire [3:0]ENABLE_ERR_DETECT_reg;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA;
  wire [0:0]SR;
  wire [3:0]TXCHARISK;
  wire [31:0]TXDATA;
  wire ack_flag;
  wire begin_r;
  wire consecutive_commas_r;
  wire consecutive_commas_r_reg;
  wire cpll_reset_i;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire ena_comma_align_i;
  wire enable_err_detect_i;
  wire flag2_reg;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire gt_rxdfelfhold_i;
  wire gt_rxuserrdy_i;
  wire gt_tx_reset_i;
  wire gt_txuserrdy_i;
  wire hard_err_gt0;
  wire in0;
  wire init_clk_in;
  wire init_clk_in_0;
  wire init_clk_in_1;
  wire init_clk_in_2;
  wire [7:0]\left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[0]_1 ;
  wire \left_align_select_r_reg[0]_2 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire \left_align_select_r_reg[1]_1 ;
  wire [2:0]loopback;
  wire pll_not_locked_out;
  wire power_down;
  wire \previous_cycle_control_r_reg[0] ;
  wire [5:0]\previous_cycle_data_r_reg[7] ;
  wire rx_polarity_i;
  wire rx_realign_i;
  wire rxn;
  wire rxp;
  wire s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  wire tx_out_clk;
  wire txn;
  wire txp;
  wire [0:0]\word_aligned_control_bits_r_reg[2] ;
  wire [5:0]\word_aligned_data_r_reg[16] ;

  top_aurora_0_0_aurora_8b10b_0_gt gt0_aurora_8b10b_0_i
       (.D(D),
        .ENABLE_ERR_DETECT_reg(ENABLE_ERR_DETECT_reg),
        .RXCHARISK(RXCHARISK),
        .RXDATA(RXDATA),
        .SR(SR),
        .TXCHARISK(TXCHARISK),
        .TXDATA(TXDATA),
        .ack_flag(ack_flag),
        .begin_r(begin_r),
        .consecutive_commas_r(consecutive_commas_r),
        .consecutive_commas_r_reg(consecutive_commas_r_reg),
        .cpll_reset_i(cpll_reset_i),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drpwe_in(drpwe_in),
        .ena_comma_align_i(ena_comma_align_i),
        .enable_err_detect_i(enable_err_detect_i),
        .flag2_reg_0(flag2_reg),
        .gt_qpllclk_quad1_out(gt_qpllclk_quad1_out),
        .gt_qpllrefclk_quad1_out(gt_qpllrefclk_quad1_out),
        .gt_refclk1(gt_refclk1),
        .gt_rxdfelfhold_i(gt_rxdfelfhold_i),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .gt_tx_reset_i(gt_tx_reset_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .hard_err_gt0(hard_err_gt0),
        .in0(in0),
        .init_clk_in(init_clk_in),
        .init_clk_in_0(init_clk_in_0),
        .init_clk_in_1(init_clk_in_1),
        .init_clk_in_2(init_clk_in_2),
        .\left_align_select_r_reg[0] (\left_align_select_r_reg[0] ),
        .\left_align_select_r_reg[0]_0 (\left_align_select_r_reg[0]_0 ),
        .\left_align_select_r_reg[0]_1 (\left_align_select_r_reg[0]_1 ),
        .\left_align_select_r_reg[0]_2 (\left_align_select_r_reg[0]_2 ),
        .\left_align_select_r_reg[1] (\left_align_select_r_reg[1] ),
        .\left_align_select_r_reg[1]_0 (\left_align_select_r_reg[1]_0 ),
        .\left_align_select_r_reg[1]_1 (\left_align_select_r_reg[1]_1 ),
        .loopback(loopback),
        .pll_not_locked_out(pll_not_locked_out),
        .power_down(power_down),
        .\previous_cycle_control_r_reg[0] (\previous_cycle_control_r_reg[0] ),
        .\previous_cycle_data_r_reg[7] (\previous_cycle_data_r_reg[7] ),
        .rx_polarity_i(rx_polarity_i),
        .rx_realign_i(rx_realign_i),
        .rxn(rxn),
        .rxp(rxp),
        .s_level_out_d1_aurora_8b10b_0_cdc_to_reg(s_level_out_d1_aurora_8b10b_0_cdc_to_reg),
        .tx_out_clk(tx_out_clk),
        .txn(txn),
        .txp(txp),
        .\word_aligned_control_bits_r_reg[2] (\word_aligned_control_bits_r_reg[2] ),
        .\word_aligned_data_r_reg[16] (\word_aligned_data_r_reg[16] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_rx_startup_fsm" *) 
module top_aurora_0_0_aurora_8b10b_0_rx_startup_fsm
   (gtrxreset_i_0,
    gt_rxuserrdy_i,
    gt_rxdfelfhold_i,
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg,
    init_clk_in,
    p_level_in_d1_cdc_from_reg,
    rxfsm_rxresetdone_r,
    AR,
    reset_time_out_reg_0,
    gt_txuserrdy_i);
  output gtrxreset_i_0;
  output gt_rxuserrdy_i;
  output gt_rxdfelfhold_i;
  input s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  input init_clk_in;
  input p_level_in_d1_cdc_from_reg;
  input rxfsm_rxresetdone_r;
  input [0:0]AR;
  input reset_time_out_reg_0;
  input gt_txuserrdy_i;

  wire [0:0]AR;
  wire \FSM_sequential_rx_state[0]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[0]_i_2_n_0 ;
  wire \FSM_sequential_rx_state[1]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[1]_i_2_n_0 ;
  wire \FSM_sequential_rx_state[2]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[2]_i_2_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_10_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_11_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_2_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_3_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_4_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_5_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_7_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_8_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_9_n_0 ;
  wire RXDFEAGCHOLD_i_1_n_0;
  wire RXUSERRDY_i_1_n_0;
  wire adapt_count;
  wire \adapt_count[0]_i_10_n_0 ;
  wire \adapt_count[0]_i_11_n_0 ;
  wire \adapt_count[0]_i_3_n_0 ;
  wire \adapt_count[0]_i_4_n_0 ;
  wire \adapt_count[0]_i_5_n_0 ;
  wire \adapt_count[0]_i_6_n_0 ;
  wire \adapt_count[0]_i_7_n_0 ;
  wire \adapt_count[0]_i_8_n_0 ;
  wire \adapt_count[0]_i_9_n_0 ;
  wire [31:0]adapt_count_reg;
  wire \adapt_count_reg[0]_i_2_n_0 ;
  wire \adapt_count_reg[0]_i_2_n_1 ;
  wire \adapt_count_reg[0]_i_2_n_2 ;
  wire \adapt_count_reg[0]_i_2_n_3 ;
  wire \adapt_count_reg[0]_i_2_n_4 ;
  wire \adapt_count_reg[0]_i_2_n_5 ;
  wire \adapt_count_reg[0]_i_2_n_6 ;
  wire \adapt_count_reg[0]_i_2_n_7 ;
  wire \adapt_count_reg[12]_i_1_n_0 ;
  wire \adapt_count_reg[12]_i_1_n_1 ;
  wire \adapt_count_reg[12]_i_1_n_2 ;
  wire \adapt_count_reg[12]_i_1_n_3 ;
  wire \adapt_count_reg[12]_i_1_n_4 ;
  wire \adapt_count_reg[12]_i_1_n_5 ;
  wire \adapt_count_reg[12]_i_1_n_6 ;
  wire \adapt_count_reg[12]_i_1_n_7 ;
  wire \adapt_count_reg[16]_i_1_n_0 ;
  wire \adapt_count_reg[16]_i_1_n_1 ;
  wire \adapt_count_reg[16]_i_1_n_2 ;
  wire \adapt_count_reg[16]_i_1_n_3 ;
  wire \adapt_count_reg[16]_i_1_n_4 ;
  wire \adapt_count_reg[16]_i_1_n_5 ;
  wire \adapt_count_reg[16]_i_1_n_6 ;
  wire \adapt_count_reg[16]_i_1_n_7 ;
  wire \adapt_count_reg[20]_i_1_n_0 ;
  wire \adapt_count_reg[20]_i_1_n_1 ;
  wire \adapt_count_reg[20]_i_1_n_2 ;
  wire \adapt_count_reg[20]_i_1_n_3 ;
  wire \adapt_count_reg[20]_i_1_n_4 ;
  wire \adapt_count_reg[20]_i_1_n_5 ;
  wire \adapt_count_reg[20]_i_1_n_6 ;
  wire \adapt_count_reg[20]_i_1_n_7 ;
  wire \adapt_count_reg[24]_i_1_n_0 ;
  wire \adapt_count_reg[24]_i_1_n_1 ;
  wire \adapt_count_reg[24]_i_1_n_2 ;
  wire \adapt_count_reg[24]_i_1_n_3 ;
  wire \adapt_count_reg[24]_i_1_n_4 ;
  wire \adapt_count_reg[24]_i_1_n_5 ;
  wire \adapt_count_reg[24]_i_1_n_6 ;
  wire \adapt_count_reg[24]_i_1_n_7 ;
  wire \adapt_count_reg[28]_i_1_n_1 ;
  wire \adapt_count_reg[28]_i_1_n_2 ;
  wire \adapt_count_reg[28]_i_1_n_3 ;
  wire \adapt_count_reg[28]_i_1_n_4 ;
  wire \adapt_count_reg[28]_i_1_n_5 ;
  wire \adapt_count_reg[28]_i_1_n_6 ;
  wire \adapt_count_reg[28]_i_1_n_7 ;
  wire \adapt_count_reg[4]_i_1_n_0 ;
  wire \adapt_count_reg[4]_i_1_n_1 ;
  wire \adapt_count_reg[4]_i_1_n_2 ;
  wire \adapt_count_reg[4]_i_1_n_3 ;
  wire \adapt_count_reg[4]_i_1_n_4 ;
  wire \adapt_count_reg[4]_i_1_n_5 ;
  wire \adapt_count_reg[4]_i_1_n_6 ;
  wire \adapt_count_reg[4]_i_1_n_7 ;
  wire \adapt_count_reg[8]_i_1_n_0 ;
  wire \adapt_count_reg[8]_i_1_n_1 ;
  wire \adapt_count_reg[8]_i_1_n_2 ;
  wire \adapt_count_reg[8]_i_1_n_3 ;
  wire \adapt_count_reg[8]_i_1_n_4 ;
  wire \adapt_count_reg[8]_i_1_n_5 ;
  wire \adapt_count_reg[8]_i_1_n_6 ;
  wire \adapt_count_reg[8]_i_1_n_7 ;
  wire check_tlock_max_i_1_n_0;
  wire check_tlock_max_reg_n_0;
  wire gt_rxdfelfhold_i;
  wire gt_rxuserrdy_i;
  wire gt_txuserrdy_i;
  wire gtrxreset_i_0;
  wire gtrxreset_i_i_1_n_0;
  wire init_clk_in;
  wire init_wait_count;
  wire \init_wait_count[0]_i_1__0_n_0 ;
  wire \init_wait_count[7]_i_3__0_n_0 ;
  wire \init_wait_count[7]_i_4__0_n_0 ;
  wire [7:0]init_wait_count_reg__0;
  wire init_wait_done_i_1__0_n_0;
  wire init_wait_done_reg_n_0;
  wire \mmcm_lock_count[9]_i_2__0_n_0 ;
  wire \mmcm_lock_count[9]_i_4__0_n_0 ;
  wire [9:0]mmcm_lock_count_reg__0;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_i_2__0_n_0;
  wire [7:1]p_0_in__3;
  wire [9:0]p_0_in__4;
  wire p_level_in_d1_cdc_from_reg;
  wire recclk_mon_count_reset;
  wire reset_time_out_i_2__0_n_0;
  wire reset_time_out_i_4_n_0;
  wire reset_time_out_i_5_n_0;
  wire reset_time_out_reg_0;
  wire reset_time_out_reg_n_0;
  wire run_phase_alignment_int_i_1__0_n_0;
  wire run_phase_alignment_int_reg_n_0;
  wire run_phase_alignment_int_s2;
  wire run_phase_alignment_int_s3_reg_n_0;
  wire rx_fsm_reset_done_int;
  wire rx_fsm_reset_done_int_0;
  wire rx_fsm_reset_done_int_i_1_n_0;
  wire rx_fsm_reset_done_int_i_3_n_0;
  wire rx_fsm_reset_done_int_s3;
  wire [3:0]rx_state;
  wire rxfsm_rxresetdone_r;
  wire rxresetdone_s2;
  wire rxresetdone_s3;
  wire s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  wire sync_cplllock_cdc_sync_n_0;
  wire sync_cplllock_cdc_sync_n_1;
  wire sync_cplllock_cdc_sync_n_2;
  wire sync_mmcm_lock_reclocked_cdc_sync_n_0;
  wire sync_mmcm_lock_reclocked_cdc_sync_n_1;
  wire sync_rx_fsm_reset_done_int_cdc_sync_n_0;
  wire time_out_100us_i_1_n_0;
  wire time_out_100us_i_2_n_0;
  wire time_out_100us_i_3_n_0;
  wire time_out_100us_i_4_n_0;
  wire time_out_100us_reg_n_0;
  wire time_out_1us_i_1_n_0;
  wire time_out_1us_i_2_n_0;
  wire time_out_1us_i_3_n_0;
  wire time_out_1us_i_4_n_0;
  wire time_out_1us_i_5_n_0;
  wire time_out_1us_reg_n_0;
  wire time_out_2ms_i_1_n_0;
  wire time_out_2ms_reg_n_0;
  wire time_out_adapt_i_1_n_0;
  wire time_out_adapt_reg_n_0;
  wire time_out_counter;
  wire \time_out_counter[0]_i_3__0_n_0 ;
  wire \time_out_counter[0]_i_4_n_0 ;
  wire \time_out_counter[0]_i_5_n_0 ;
  wire \time_out_counter[0]_i_6__0_n_0 ;
  wire \time_out_counter[0]_i_7_n_0 ;
  wire \time_out_counter[0]_i_8_n_0 ;
  wire [18:0]time_out_counter_reg;
  wire \time_out_counter_reg[0]_i_2__0_n_0 ;
  wire \time_out_counter_reg[0]_i_2__0_n_1 ;
  wire \time_out_counter_reg[0]_i_2__0_n_2 ;
  wire \time_out_counter_reg[0]_i_2__0_n_3 ;
  wire \time_out_counter_reg[0]_i_2__0_n_4 ;
  wire \time_out_counter_reg[0]_i_2__0_n_5 ;
  wire \time_out_counter_reg[0]_i_2__0_n_6 ;
  wire \time_out_counter_reg[0]_i_2__0_n_7 ;
  wire \time_out_counter_reg[12]_i_1__0_n_0 ;
  wire \time_out_counter_reg[12]_i_1__0_n_1 ;
  wire \time_out_counter_reg[12]_i_1__0_n_2 ;
  wire \time_out_counter_reg[12]_i_1__0_n_3 ;
  wire \time_out_counter_reg[12]_i_1__0_n_4 ;
  wire \time_out_counter_reg[12]_i_1__0_n_5 ;
  wire \time_out_counter_reg[12]_i_1__0_n_6 ;
  wire \time_out_counter_reg[12]_i_1__0_n_7 ;
  wire \time_out_counter_reg[16]_i_1__0_n_2 ;
  wire \time_out_counter_reg[16]_i_1__0_n_3 ;
  wire \time_out_counter_reg[16]_i_1__0_n_5 ;
  wire \time_out_counter_reg[16]_i_1__0_n_6 ;
  wire \time_out_counter_reg[16]_i_1__0_n_7 ;
  wire \time_out_counter_reg[4]_i_1__0_n_0 ;
  wire \time_out_counter_reg[4]_i_1__0_n_1 ;
  wire \time_out_counter_reg[4]_i_1__0_n_2 ;
  wire \time_out_counter_reg[4]_i_1__0_n_3 ;
  wire \time_out_counter_reg[4]_i_1__0_n_4 ;
  wire \time_out_counter_reg[4]_i_1__0_n_5 ;
  wire \time_out_counter_reg[4]_i_1__0_n_6 ;
  wire \time_out_counter_reg[4]_i_1__0_n_7 ;
  wire \time_out_counter_reg[8]_i_1__0_n_0 ;
  wire \time_out_counter_reg[8]_i_1__0_n_1 ;
  wire \time_out_counter_reg[8]_i_1__0_n_2 ;
  wire \time_out_counter_reg[8]_i_1__0_n_3 ;
  wire \time_out_counter_reg[8]_i_1__0_n_4 ;
  wire \time_out_counter_reg[8]_i_1__0_n_5 ;
  wire \time_out_counter_reg[8]_i_1__0_n_6 ;
  wire \time_out_counter_reg[8]_i_1__0_n_7 ;
  wire time_out_wait_bypass_i_1__0_n_0;
  wire time_out_wait_bypass_reg_n_0;
  wire time_out_wait_bypass_s2;
  wire time_out_wait_bypass_s3;
  wire time_tlock_max;
  wire time_tlock_max_i_1_n_0;
  wire time_tlock_max_i_2_n_0;
  wire time_tlock_max_i_3_n_0;
  wire time_tlock_max_i_4_n_0;
  wire \wait_bypass_count[0]_i_1__0_n_0 ;
  wire \wait_bypass_count[0]_i_2__0_n_0 ;
  wire \wait_bypass_count[0]_i_4__0_n_0 ;
  wire \wait_bypass_count[0]_i_5__0_n_0 ;
  wire \wait_bypass_count[0]_i_6__0_n_0 ;
  wire \wait_bypass_count[0]_i_7__0_n_0 ;
  wire [12:0]wait_bypass_count_reg;
  wire \wait_bypass_count_reg[0]_i_3__0_n_0 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_1 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_2 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_3 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_4 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_5 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_6 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_7 ;
  wire \wait_bypass_count_reg[12]_i_1__0_n_7 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_0 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_1 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_2 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_3 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_4 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_5 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_6 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_7 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_0 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_1 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_2 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_3 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_4 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_5 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_6 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_7 ;
  wire \wait_time_cnt[0]_i_10_n_0 ;
  wire \wait_time_cnt[0]_i_11_n_0 ;
  wire \wait_time_cnt[0]_i_1_n_0 ;
  wire \wait_time_cnt[0]_i_2__0_n_0 ;
  wire \wait_time_cnt[0]_i_4__0_n_0 ;
  wire \wait_time_cnt[0]_i_5__0_n_0 ;
  wire \wait_time_cnt[0]_i_6__0_n_0 ;
  wire \wait_time_cnt[0]_i_7__0_n_0 ;
  wire \wait_time_cnt[0]_i_8_n_0 ;
  wire \wait_time_cnt[0]_i_9_n_0 ;
  wire \wait_time_cnt[12]_i_2__0_n_0 ;
  wire \wait_time_cnt[12]_i_3__0_n_0 ;
  wire \wait_time_cnt[12]_i_4__0_n_0 ;
  wire \wait_time_cnt[12]_i_5__0_n_0 ;
  wire \wait_time_cnt[4]_i_2__0_n_0 ;
  wire \wait_time_cnt[4]_i_3__0_n_0 ;
  wire \wait_time_cnt[4]_i_4__0_n_0 ;
  wire \wait_time_cnt[4]_i_5__0_n_0 ;
  wire \wait_time_cnt[8]_i_2__0_n_0 ;
  wire \wait_time_cnt[8]_i_3__0_n_0 ;
  wire \wait_time_cnt[8]_i_4__0_n_0 ;
  wire \wait_time_cnt[8]_i_5__0_n_0 ;
  wire [15:0]wait_time_cnt_reg;
  wire \wait_time_cnt_reg[0]_i_3__0_n_0 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_1 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_2 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_3 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_4 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_5 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_6 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_7 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_7 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_0 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_7 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_0 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_7 ;
  wire [3:3]\NLW_adapt_count_reg[28]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_time_out_counter_reg[16]_i_1__0_CO_UNCONNECTED ;
  wire [3:3]\NLW_time_out_counter_reg[16]_i_1__0_O_UNCONNECTED ;
  wire [3:0]\NLW_wait_bypass_count_reg[12]_i_1__0_CO_UNCONNECTED ;
  wire [3:1]\NLW_wait_bypass_count_reg[12]_i_1__0_O_UNCONNECTED ;
  wire [3:3]\NLW_wait_time_cnt_reg[12]_i_1__0_CO_UNCONNECTED ;

  LUT3 #(
    .INIT(8'h74)) 
    \FSM_sequential_rx_state[0]_i_1 
       (.I0(\FSM_sequential_rx_state[1]_i_2_n_0 ),
        .I1(rx_state[3]),
        .I2(\FSM_sequential_rx_state[0]_i_2_n_0 ),
        .O(\FSM_sequential_rx_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB3F73337B3F33333)) 
    \FSM_sequential_rx_state[0]_i_2 
       (.I0(\FSM_sequential_rx_state[3]_i_9_n_0 ),
        .I1(rx_state[0]),
        .I2(rx_state[1]),
        .I3(reset_time_out_reg_n_0),
        .I4(time_out_2ms_reg_n_0),
        .I5(time_tlock_max),
        .O(\FSM_sequential_rx_state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8B8B888BB8B8B8B8)) 
    \FSM_sequential_rx_state[1]_i_1 
       (.I0(\FSM_sequential_rx_state[1]_i_2_n_0 ),
        .I1(rx_state[3]),
        .I2(rx_state[1]),
        .I3(rx_state[2]),
        .I4(\FSM_sequential_rx_state[2]_i_2_n_0 ),
        .I5(rx_state[0]),
        .O(\FSM_sequential_rx_state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT5 #(
    .INIT(32'hFB000000)) 
    \FSM_sequential_rx_state[1]_i_2 
       (.I0(reset_time_out_reg_n_0),
        .I1(time_out_100us_reg_n_0),
        .I2(gt_rxuserrdy_i),
        .I3(rx_state[0]),
        .I4(\FSM_sequential_rx_state[3]_i_9_n_0 ),
        .O(\FSM_sequential_rx_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000026AA04AA)) 
    \FSM_sequential_rx_state[2]_i_1 
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(time_out_2ms_reg_n_0),
        .I3(rx_state[0]),
        .I4(\FSM_sequential_rx_state[2]_i_2_n_0 ),
        .I5(rx_state[3]),
        .O(\FSM_sequential_rx_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \FSM_sequential_rx_state[2]_i_2 
       (.I0(reset_time_out_reg_n_0),
        .I1(time_tlock_max),
        .O(\FSM_sequential_rx_state[2]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFEAE)) 
    \FSM_sequential_rx_state[3]_i_10 
       (.I0(rx_state[1]),
        .I1(reset_time_out_reg_0),
        .I2(rx_state[0]),
        .I3(mmcm_lock_reclocked),
        .O(\FSM_sequential_rx_state[3]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \FSM_sequential_rx_state[3]_i_11 
       (.I0(rx_state[0]),
        .I1(init_wait_done_reg_n_0),
        .I2(rx_state[1]),
        .I3(rx_state[2]),
        .I4(rx_state[3]),
        .O(\FSM_sequential_rx_state[3]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAB00AB00FFFFFF00)) 
    \FSM_sequential_rx_state[3]_i_2 
       (.I0(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I1(time_out_wait_bypass_s3),
        .I2(rx_state[0]),
        .I3(rx_state[3]),
        .I4(\FSM_sequential_rx_state[3]_i_8_n_0 ),
        .I5(\FSM_sequential_rx_state[3]_i_9_n_0 ),
        .O(\FSM_sequential_rx_state[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0CC4)) 
    \FSM_sequential_rx_state[3]_i_3 
       (.I0(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I1(rx_state[3]),
        .I2(gt_rxuserrdy_i),
        .I3(rx_state[1]),
        .O(\FSM_sequential_rx_state[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF10111111)) 
    \FSM_sequential_rx_state[3]_i_4 
       (.I0(\FSM_sequential_rx_state[3]_i_10_n_0 ),
        .I1(\FSM_sequential_rx_state[3]_i_9_n_0 ),
        .I2(reset_time_out_reg_n_0),
        .I3(time_tlock_max),
        .I4(rx_state[0]),
        .I5(\FSM_sequential_rx_state[3]_i_11_n_0 ),
        .O(\FSM_sequential_rx_state[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h5555775700000000)) 
    \FSM_sequential_rx_state[3]_i_5 
       (.I0(rx_state[0]),
        .I1(\FSM_sequential_rx_state[3]_i_9_n_0 ),
        .I2(time_out_2ms_reg_n_0),
        .I3(reset_time_out_reg_n_0),
        .I4(rxresetdone_s3),
        .I5(rx_state[1]),
        .O(\FSM_sequential_rx_state[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'hAA8A)) 
    \FSM_sequential_rx_state[3]_i_7 
       (.I0(rx_state[0]),
        .I1(gt_rxuserrdy_i),
        .I2(time_out_100us_reg_n_0),
        .I3(reset_time_out_reg_n_0),
        .O(\FSM_sequential_rx_state[3]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT4 #(
    .INIT(16'hD000)) 
    \FSM_sequential_rx_state[3]_i_8 
       (.I0(time_out_2ms_reg_n_0),
        .I1(reset_time_out_reg_n_0),
        .I2(rx_state[1]),
        .I3(rx_state[0]),
        .O(\FSM_sequential_rx_state[3]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'h35)) 
    \FSM_sequential_rx_state[3]_i_9 
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(rx_state[3]),
        .O(\FSM_sequential_rx_state[3]_i_9_n_0 ));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[0] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[0]_i_1_n_0 ),
        .Q(rx_state[0]),
        .R(AR));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[1] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[1]_i_1_n_0 ),
        .Q(rx_state[1]),
        .R(AR));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[2] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[2]_i_1_n_0 ),
        .Q(rx_state[2]),
        .R(AR));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[3] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[3]_i_2_n_0 ),
        .Q(rx_state[3]),
        .R(AR));
  LUT6 #(
    .INIT(64'hFFFFFFFF00400000)) 
    RXDFEAGCHOLD_i_1
       (.I0(rx_state[0]),
        .I1(rx_state[3]),
        .I2(rx_state[1]),
        .I3(rx_state[2]),
        .I4(time_out_adapt_reg_n_0),
        .I5(gt_rxdfelfhold_i),
        .O(RXDFEAGCHOLD_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RXDFEAGCHOLD_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(RXDFEAGCHOLD_i_1_n_0),
        .Q(gt_rxdfelfhold_i),
        .R(AR));
  LUT6 #(
    .INIT(64'hFFFFFFF308000000)) 
    RXUSERRDY_i_1
       (.I0(gt_txuserrdy_i),
        .I1(rx_state[0]),
        .I2(rx_state[3]),
        .I3(rx_state[1]),
        .I4(rx_state[2]),
        .I5(gt_rxuserrdy_i),
        .O(RXUSERRDY_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RXUSERRDY_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(RXUSERRDY_i_1_n_0),
        .Q(gt_rxuserrdy_i),
        .R(AR));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \adapt_count[0]_i_1 
       (.I0(\adapt_count[0]_i_3_n_0 ),
        .I1(\adapt_count[0]_i_4_n_0 ),
        .I2(\adapt_count[0]_i_5_n_0 ),
        .I3(\adapt_count[0]_i_6_n_0 ),
        .O(adapt_count));
  LUT4 #(
    .INIT(16'hFFFD)) 
    \adapt_count[0]_i_10 
       (.I0(adapt_count_reg[12]),
        .I1(adapt_count_reg[21]),
        .I2(adapt_count_reg[26]),
        .I3(adapt_count_reg[27]),
        .O(\adapt_count[0]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \adapt_count[0]_i_11 
       (.I0(adapt_count_reg[8]),
        .I1(adapt_count_reg[17]),
        .I2(adapt_count_reg[16]),
        .I3(adapt_count_reg[15]),
        .O(\adapt_count[0]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFF7)) 
    \adapt_count[0]_i_3 
       (.I0(adapt_count_reg[0]),
        .I1(adapt_count_reg[11]),
        .I2(adapt_count_reg[28]),
        .I3(adapt_count_reg[30]),
        .I4(\adapt_count[0]_i_8_n_0 ),
        .O(\adapt_count[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFBFFF)) 
    \adapt_count[0]_i_4 
       (.I0(adapt_count_reg[6]),
        .I1(adapt_count_reg[2]),
        .I2(adapt_count_reg[1]),
        .I3(adapt_count_reg[9]),
        .I4(\adapt_count[0]_i_9_n_0 ),
        .O(\adapt_count[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \adapt_count[0]_i_5 
       (.I0(adapt_count_reg[24]),
        .I1(adapt_count_reg[23]),
        .I2(adapt_count_reg[18]),
        .I3(adapt_count_reg[14]),
        .I4(\adapt_count[0]_i_10_n_0 ),
        .O(\adapt_count[0]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFEFF)) 
    \adapt_count[0]_i_6 
       (.I0(adapt_count_reg[31]),
        .I1(adapt_count_reg[5]),
        .I2(adapt_count_reg[29]),
        .I3(adapt_count_reg[20]),
        .I4(\adapt_count[0]_i_11_n_0 ),
        .O(\adapt_count[0]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \adapt_count[0]_i_7 
       (.I0(adapt_count_reg[0]),
        .O(\adapt_count[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \adapt_count[0]_i_8 
       (.I0(adapt_count_reg[3]),
        .I1(adapt_count_reg[22]),
        .I2(adapt_count_reg[7]),
        .I3(adapt_count_reg[13]),
        .O(\adapt_count[0]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFD)) 
    \adapt_count[0]_i_9 
       (.I0(adapt_count_reg[19]),
        .I1(adapt_count_reg[25]),
        .I2(adapt_count_reg[10]),
        .I3(adapt_count_reg[4]),
        .O(\adapt_count[0]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[0] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[0]_i_2_n_7 ),
        .Q(adapt_count_reg[0]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\adapt_count_reg[0]_i_2_n_0 ,\adapt_count_reg[0]_i_2_n_1 ,\adapt_count_reg[0]_i_2_n_2 ,\adapt_count_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\adapt_count_reg[0]_i_2_n_4 ,\adapt_count_reg[0]_i_2_n_5 ,\adapt_count_reg[0]_i_2_n_6 ,\adapt_count_reg[0]_i_2_n_7 }),
        .S({adapt_count_reg[3:1],\adapt_count[0]_i_7_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[10] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[8]_i_1_n_5 ),
        .Q(adapt_count_reg[10]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[11] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[8]_i_1_n_4 ),
        .Q(adapt_count_reg[11]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[12] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[12]_i_1_n_7 ),
        .Q(adapt_count_reg[12]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[12]_i_1 
       (.CI(\adapt_count_reg[8]_i_1_n_0 ),
        .CO({\adapt_count_reg[12]_i_1_n_0 ,\adapt_count_reg[12]_i_1_n_1 ,\adapt_count_reg[12]_i_1_n_2 ,\adapt_count_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[12]_i_1_n_4 ,\adapt_count_reg[12]_i_1_n_5 ,\adapt_count_reg[12]_i_1_n_6 ,\adapt_count_reg[12]_i_1_n_7 }),
        .S(adapt_count_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[13] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[12]_i_1_n_6 ),
        .Q(adapt_count_reg[13]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[14] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[12]_i_1_n_5 ),
        .Q(adapt_count_reg[14]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[15] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[12]_i_1_n_4 ),
        .Q(adapt_count_reg[15]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[16] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[16]_i_1_n_7 ),
        .Q(adapt_count_reg[16]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[16]_i_1 
       (.CI(\adapt_count_reg[12]_i_1_n_0 ),
        .CO({\adapt_count_reg[16]_i_1_n_0 ,\adapt_count_reg[16]_i_1_n_1 ,\adapt_count_reg[16]_i_1_n_2 ,\adapt_count_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[16]_i_1_n_4 ,\adapt_count_reg[16]_i_1_n_5 ,\adapt_count_reg[16]_i_1_n_6 ,\adapt_count_reg[16]_i_1_n_7 }),
        .S(adapt_count_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[17] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[16]_i_1_n_6 ),
        .Q(adapt_count_reg[17]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[18] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[16]_i_1_n_5 ),
        .Q(adapt_count_reg[18]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[19] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[16]_i_1_n_4 ),
        .Q(adapt_count_reg[19]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[1] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[0]_i_2_n_6 ),
        .Q(adapt_count_reg[1]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[20] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[20]_i_1_n_7 ),
        .Q(adapt_count_reg[20]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[20]_i_1 
       (.CI(\adapt_count_reg[16]_i_1_n_0 ),
        .CO({\adapt_count_reg[20]_i_1_n_0 ,\adapt_count_reg[20]_i_1_n_1 ,\adapt_count_reg[20]_i_1_n_2 ,\adapt_count_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[20]_i_1_n_4 ,\adapt_count_reg[20]_i_1_n_5 ,\adapt_count_reg[20]_i_1_n_6 ,\adapt_count_reg[20]_i_1_n_7 }),
        .S(adapt_count_reg[23:20]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[21] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[20]_i_1_n_6 ),
        .Q(adapt_count_reg[21]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[22] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[20]_i_1_n_5 ),
        .Q(adapt_count_reg[22]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[23] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[20]_i_1_n_4 ),
        .Q(adapt_count_reg[23]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[24] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[24]_i_1_n_7 ),
        .Q(adapt_count_reg[24]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[24]_i_1 
       (.CI(\adapt_count_reg[20]_i_1_n_0 ),
        .CO({\adapt_count_reg[24]_i_1_n_0 ,\adapt_count_reg[24]_i_1_n_1 ,\adapt_count_reg[24]_i_1_n_2 ,\adapt_count_reg[24]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[24]_i_1_n_4 ,\adapt_count_reg[24]_i_1_n_5 ,\adapt_count_reg[24]_i_1_n_6 ,\adapt_count_reg[24]_i_1_n_7 }),
        .S(adapt_count_reg[27:24]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[25] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[24]_i_1_n_6 ),
        .Q(adapt_count_reg[25]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[26] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[24]_i_1_n_5 ),
        .Q(adapt_count_reg[26]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[27] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[24]_i_1_n_4 ),
        .Q(adapt_count_reg[27]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[28] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[28]_i_1_n_7 ),
        .Q(adapt_count_reg[28]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[28]_i_1 
       (.CI(\adapt_count_reg[24]_i_1_n_0 ),
        .CO({\NLW_adapt_count_reg[28]_i_1_CO_UNCONNECTED [3],\adapt_count_reg[28]_i_1_n_1 ,\adapt_count_reg[28]_i_1_n_2 ,\adapt_count_reg[28]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[28]_i_1_n_4 ,\adapt_count_reg[28]_i_1_n_5 ,\adapt_count_reg[28]_i_1_n_6 ,\adapt_count_reg[28]_i_1_n_7 }),
        .S(adapt_count_reg[31:28]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[29] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[28]_i_1_n_6 ),
        .Q(adapt_count_reg[29]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[2] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[0]_i_2_n_5 ),
        .Q(adapt_count_reg[2]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[30] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[28]_i_1_n_5 ),
        .Q(adapt_count_reg[30]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[31] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[28]_i_1_n_4 ),
        .Q(adapt_count_reg[31]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[3] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[0]_i_2_n_4 ),
        .Q(adapt_count_reg[3]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[4] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[4]_i_1_n_7 ),
        .Q(adapt_count_reg[4]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[4]_i_1 
       (.CI(\adapt_count_reg[0]_i_2_n_0 ),
        .CO({\adapt_count_reg[4]_i_1_n_0 ,\adapt_count_reg[4]_i_1_n_1 ,\adapt_count_reg[4]_i_1_n_2 ,\adapt_count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[4]_i_1_n_4 ,\adapt_count_reg[4]_i_1_n_5 ,\adapt_count_reg[4]_i_1_n_6 ,\adapt_count_reg[4]_i_1_n_7 }),
        .S(adapt_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[5] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[4]_i_1_n_6 ),
        .Q(adapt_count_reg[5]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[6] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[4]_i_1_n_5 ),
        .Q(adapt_count_reg[6]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[7] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[4]_i_1_n_4 ),
        .Q(adapt_count_reg[7]),
        .R(recclk_mon_count_reset));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[8] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[8]_i_1_n_7 ),
        .Q(adapt_count_reg[8]),
        .R(recclk_mon_count_reset));
  CARRY4 \adapt_count_reg[8]_i_1 
       (.CI(\adapt_count_reg[4]_i_1_n_0 ),
        .CO({\adapt_count_reg[8]_i_1_n_0 ,\adapt_count_reg[8]_i_1_n_1 ,\adapt_count_reg[8]_i_1_n_2 ,\adapt_count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\adapt_count_reg[8]_i_1_n_4 ,\adapt_count_reg[8]_i_1_n_5 ,\adapt_count_reg[8]_i_1_n_6 ,\adapt_count_reg[8]_i_1_n_7 }),
        .S(adapt_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \adapt_count_reg[9] 
       (.C(init_clk_in),
        .CE(adapt_count),
        .D(\adapt_count_reg[8]_i_1_n_6 ),
        .Q(adapt_count_reg[9]),
        .R(recclk_mon_count_reset));
  FDSE #(
    .INIT(1'b0)) 
    adapt_count_reset_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(sync_cplllock_cdc_sync_n_2),
        .Q(recclk_mon_count_reset),
        .S(AR));
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    check_tlock_max_i_1
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(rx_state[0]),
        .I3(rx_state[3]),
        .I4(check_tlock_max_reg_n_0),
        .O(check_tlock_max_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    check_tlock_max_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(check_tlock_max_i_1_n_0),
        .Q(check_tlock_max_reg_n_0),
        .R(AR));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'hFEFF0010)) 
    gtrxreset_i_i_1
       (.I0(rx_state[1]),
        .I1(rx_state[3]),
        .I2(rx_state[0]),
        .I3(rx_state[2]),
        .I4(gtrxreset_i_0),
        .O(gtrxreset_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtrxreset_i_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_i_i_1_n_0),
        .Q(gtrxreset_i_0),
        .R(AR));
  LUT1 #(
    .INIT(2'h1)) 
    \init_wait_count[0]_i_1__0 
       (.I0(init_wait_count_reg__0[0]),
        .O(\init_wait_count[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \init_wait_count[1]_i_1__0 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[0]),
        .O(p_0_in__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \init_wait_count[2]_i_1__0 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[0]),
        .O(p_0_in__3[2]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \init_wait_count[3]_i_1__0 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[3]),
        .O(p_0_in__3[3]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \init_wait_count[4]_i_1__0 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[2]),
        .I4(init_wait_count_reg__0[3]),
        .O(p_0_in__3[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \init_wait_count[5]_i_1__0 
       (.I0(init_wait_count_reg__0[5]),
        .I1(init_wait_count_reg__0[3]),
        .I2(init_wait_count_reg__0[4]),
        .I3(init_wait_count_reg__0[0]),
        .I4(init_wait_count_reg__0[1]),
        .I5(init_wait_count_reg__0[2]),
        .O(p_0_in__3[5]));
  LUT5 #(
    .INIT(32'h9AAAAAAA)) 
    \init_wait_count[6]_i_1__0 
       (.I0(init_wait_count_reg__0[6]),
        .I1(\init_wait_count[7]_i_4__0_n_0 ),
        .I2(init_wait_count_reg__0[4]),
        .I3(init_wait_count_reg__0[3]),
        .I4(init_wait_count_reg__0[5]),
        .O(p_0_in__3[6]));
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \init_wait_count[7]_i_1__0 
       (.I0(\init_wait_count[7]_i_3__0_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[5]),
        .I4(init_wait_count_reg__0[6]),
        .O(init_wait_count));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAAAAAAA)) 
    \init_wait_count[7]_i_2__0 
       (.I0(init_wait_count_reg__0[7]),
        .I1(init_wait_count_reg__0[5]),
        .I2(init_wait_count_reg__0[3]),
        .I3(init_wait_count_reg__0[4]),
        .I4(\init_wait_count[7]_i_4__0_n_0 ),
        .I5(init_wait_count_reg__0[6]),
        .O(p_0_in__3[7]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'hFFF7)) 
    \init_wait_count[7]_i_3__0 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[3]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .O(\init_wait_count[7]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \init_wait_count[7]_i_4__0 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[2]),
        .O(\init_wait_count[7]_i_4__0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[0] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(\init_wait_count[0]_i_1__0_n_0 ),
        .Q(init_wait_count_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[1] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[1]),
        .Q(init_wait_count_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[2] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[2]),
        .Q(init_wait_count_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[3] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[3]),
        .Q(init_wait_count_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[4] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[4]),
        .Q(init_wait_count_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[5] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[5]),
        .Q(init_wait_count_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[6] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[6]),
        .Q(init_wait_count_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[7] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__3[7]),
        .Q(init_wait_count_reg__0[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    init_wait_done_i_1__0
       (.I0(\init_wait_count[7]_i_3__0_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[5]),
        .I4(init_wait_count_reg__0[6]),
        .I5(init_wait_done_reg_n_0),
        .O(init_wait_done_i_1__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    init_wait_done_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .CLR(AR),
        .D(init_wait_done_i_1__0_n_0),
        .Q(init_wait_done_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[0]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__4[0]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \mmcm_lock_count[1]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[0]),
        .I1(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__4[1]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[2]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[2]),
        .I1(mmcm_lock_count_reg__0[0]),
        .I2(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__4[2]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[3]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[3]),
        .I1(mmcm_lock_count_reg__0[1]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[2]),
        .O(p_0_in__4[3]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \mmcm_lock_count[4]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .O(p_0_in__4[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \mmcm_lock_count[5]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[5]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[4]),
        .O(p_0_in__4[5]));
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[6]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I2(mmcm_lock_count_reg__0[5]),
        .O(p_0_in__4[6]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[7]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(mmcm_lock_count_reg__0[5]),
        .I2(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I3(mmcm_lock_count_reg__0[6]),
        .O(p_0_in__4[7]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \mmcm_lock_count[8]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[8]),
        .I1(mmcm_lock_count_reg__0[6]),
        .I2(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I3(mmcm_lock_count_reg__0[5]),
        .I4(mmcm_lock_count_reg__0[7]),
        .O(p_0_in__4[8]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \mmcm_lock_count[9]_i_2__0 
       (.I0(mmcm_lock_count_reg__0[8]),
        .I1(mmcm_lock_count_reg__0[6]),
        .I2(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I3(mmcm_lock_count_reg__0[5]),
        .I4(mmcm_lock_count_reg__0[7]),
        .I5(mmcm_lock_count_reg__0[9]),
        .O(\mmcm_lock_count[9]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \mmcm_lock_count[9]_i_3__0 
       (.I0(mmcm_lock_count_reg__0[9]),
        .I1(mmcm_lock_count_reg__0[7]),
        .I2(mmcm_lock_count_reg__0[5]),
        .I3(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I4(mmcm_lock_count_reg__0[6]),
        .I5(mmcm_lock_count_reg__0[8]),
        .O(p_0_in__4[9]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \mmcm_lock_count[9]_i_4__0 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[3]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[0]),
        .I4(mmcm_lock_count_reg__0[2]),
        .O(\mmcm_lock_count[9]_i_4__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[0] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[0]),
        .Q(mmcm_lock_count_reg__0[0]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[1] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[1]),
        .Q(mmcm_lock_count_reg__0[1]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[2] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[2]),
        .Q(mmcm_lock_count_reg__0[2]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[3] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[3]),
        .Q(mmcm_lock_count_reg__0[3]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[4] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[4]),
        .Q(mmcm_lock_count_reg__0[4]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[5] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[5]),
        .Q(mmcm_lock_count_reg__0[5]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[6] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[6]),
        .Q(mmcm_lock_count_reg__0[6]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[7] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[7]),
        .Q(mmcm_lock_count_reg__0[7]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[8] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[8]),
        .Q(mmcm_lock_count_reg__0[8]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[9] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__4[9]),
        .Q(mmcm_lock_count_reg__0[9]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    mmcm_lock_reclocked_i_2__0
       (.I0(mmcm_lock_count_reg__0[9]),
        .I1(mmcm_lock_count_reg__0[7]),
        .I2(mmcm_lock_count_reg__0[5]),
        .I3(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I4(mmcm_lock_count_reg__0[6]),
        .I5(mmcm_lock_count_reg__0[8]),
        .O(mmcm_lock_reclocked_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mmcm_lock_reclocked_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(sync_mmcm_lock_reclocked_cdc_sync_n_1),
        .Q(mmcm_lock_reclocked),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT2 #(
    .INIT(4'h2)) 
    reset_time_out_i_2__0
       (.I0(rx_state[0]),
        .I1(rx_state[1]),
        .O(reset_time_out_i_2__0_n_0));
  LUT5 #(
    .INIT(32'h07DC07CC)) 
    reset_time_out_i_4
       (.I0(rx_state[1]),
        .I1(rx_state[0]),
        .I2(rx_state[2]),
        .I3(rx_state[3]),
        .I4(reset_time_out_reg_0),
        .O(reset_time_out_i_4_n_0));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    reset_time_out_i_5
       (.I0(mmcm_lock_reclocked),
        .I1(rx_state[0]),
        .I2(reset_time_out_reg_0),
        .I3(rx_state[2]),
        .I4(rx_state[1]),
        .I5(rxresetdone_s3),
        .O(reset_time_out_i_5_n_0));
  FDSE #(
    .INIT(1'b0)) 
    reset_time_out_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(sync_cplllock_cdc_sync_n_1),
        .Q(reset_time_out_reg_n_0),
        .S(AR));
  LUT5 #(
    .INIT(32'hFFFD0004)) 
    run_phase_alignment_int_i_1__0
       (.I0(rx_state[0]),
        .I1(rx_state[3]),
        .I2(rx_state[1]),
        .I3(rx_state[2]),
        .I4(run_phase_alignment_int_reg_n_0),
        .O(run_phase_alignment_int_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int_i_1__0_n_0),
        .Q(run_phase_alignment_int_reg_n_0),
        .R(AR));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_s3_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(run_phase_alignment_int_s2),
        .Q(run_phase_alignment_int_s3_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFBF0080)) 
    rx_fsm_reset_done_int_i_1
       (.I0(rx_fsm_reset_done_int_0),
        .I1(rx_fsm_reset_done_int_i_3_n_0),
        .I2(rx_state[3]),
        .I3(rx_state[2]),
        .I4(rx_fsm_reset_done_int),
        .O(rx_fsm_reset_done_int_i_1_n_0));
  LUT5 #(
    .INIT(32'h00100000)) 
    rx_fsm_reset_done_int_i_2
       (.I0(rx_state[0]),
        .I1(rx_state[2]),
        .I2(time_out_1us_reg_n_0),
        .I3(reset_time_out_reg_n_0),
        .I4(gt_rxuserrdy_i),
        .O(rx_fsm_reset_done_int_0));
  LUT6 #(
    .INIT(64'h00003B3BCFCC0000)) 
    rx_fsm_reset_done_int_i_3
       (.I0(time_out_1us_reg_n_0),
        .I1(gt_rxuserrdy_i),
        .I2(reset_time_out_reg_n_0),
        .I3(time_out_100us_reg_n_0),
        .I4(rx_state[0]),
        .I5(rx_state[1]),
        .O(rx_fsm_reset_done_int_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rx_fsm_reset_done_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_fsm_reset_done_int_i_1_n_0),
        .Q(rx_fsm_reset_done_int),
        .R(AR));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rx_fsm_reset_done_int_s3_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(sync_rx_fsm_reset_done_int_cdc_sync_n_0),
        .Q(rx_fsm_reset_done_int_s3),
        .R(1'b0));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    rxresetdone_s3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rxresetdone_s2),
        .Q(rxresetdone_s3),
        .R(1'b0));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_14 sync_RXRESETDONE_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(rxresetdone_s2),
        .p_level_in_d1_cdc_from_reg_0(p_level_in_d1_cdc_from_reg),
        .rxfsm_rxresetdone_r(rxfsm_rxresetdone_r));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_15 sync_cplllock_cdc_sync
       (.E(sync_cplllock_cdc_sync_n_0),
        .\FSM_sequential_rx_state_reg[0] (\FSM_sequential_rx_state[3]_i_3_n_0 ),
        .\FSM_sequential_rx_state_reg[0]_0 (\FSM_sequential_rx_state[3]_i_4_n_0 ),
        .\FSM_sequential_rx_state_reg[0]_1 (\wait_time_cnt[0]_i_2__0_n_0 ),
        .\FSM_sequential_rx_state_reg[0]_2 (\FSM_sequential_rx_state[3]_i_5_n_0 ),
        .\FSM_sequential_rx_state_reg[0]_3 (time_out_2ms_reg_n_0),
        .\FSM_sequential_rx_state_reg[3] (sync_cplllock_cdc_sync_n_1),
        .\FSM_sequential_rx_state_reg[3]_0 (sync_cplllock_cdc_sync_n_2),
        .Q(rx_state),
        .init_clk_in(init_clk_in),
        .recclk_mon_count_reset(recclk_mon_count_reset),
        .reset_time_out_reg(gt_rxuserrdy_i),
        .reset_time_out_reg_0(reset_time_out_i_5_n_0),
        .reset_time_out_reg_1(reset_time_out_i_2__0_n_0),
        .reset_time_out_reg_2(reset_time_out_i_4_n_0),
        .reset_time_out_reg_3(reset_time_out_reg_n_0),
        .s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0(s_level_out_d1_aurora_8b10b_0_cdc_to_reg));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_16 sync_mmcm_lock_reclocked_cdc_sync
       (.SR(sync_mmcm_lock_reclocked_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .mmcm_lock_reclocked_reg(sync_mmcm_lock_reclocked_cdc_sync_n_1),
        .mmcm_lock_reclocked_reg_0(mmcm_lock_reclocked_i_2__0_n_0));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_17 sync_qplllock_cdc_sync
       (.init_clk_in(init_clk_in));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_18 sync_run_phase_alignment_int_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(run_phase_alignment_int_s2),
        .p_level_in_d1_cdc_from_reg_0(run_phase_alignment_int_reg_n_0),
        .s_level_out_d6_reg_0(p_level_in_d1_cdc_from_reg));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_19 sync_rx_fsm_reset_done_int_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(sync_rx_fsm_reset_done_int_cdc_sync_n_0),
        .rx_fsm_reset_done_int(rx_fsm_reset_done_int),
        .s_level_out_d6_reg_0(p_level_in_d1_cdc_from_reg));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_20 sync_time_out_wait_bypass_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(time_out_wait_bypass_s2),
        .p_level_in_d1_cdc_from_reg_0(time_out_wait_bypass_reg_n_0),
        .p_level_in_d1_cdc_from_reg_1(p_level_in_d1_cdc_from_reg));
  LUT5 #(
    .INIT(32'hFFFF0040)) 
    time_out_100us_i_1
       (.I0(time_tlock_max_i_4_n_0),
        .I1(time_out_100us_i_2_n_0),
        .I2(time_out_100us_i_3_n_0),
        .I3(time_out_100us_i_4_n_0),
        .I4(time_out_100us_reg_n_0),
        .O(time_out_100us_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    time_out_100us_i_2
       (.I0(time_out_counter_reg[1]),
        .I1(time_out_counter_reg[0]),
        .I2(time_out_counter_reg[2]),
        .I3(time_out_counter_reg[3]),
        .O(time_out_100us_i_2_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    time_out_100us_i_3
       (.I0(time_out_counter_reg[4]),
        .I1(time_out_counter_reg[13]),
        .I2(time_out_counter_reg[10]),
        .I3(time_tlock_max_i_2_n_0),
        .I4(time_out_counter_reg[9]),
        .I5(time_out_counter_reg[8]),
        .O(time_out_100us_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    time_out_100us_i_4
       (.I0(time_out_counter_reg[7]),
        .I1(time_out_counter_reg[6]),
        .I2(time_out_counter_reg[5]),
        .O(time_out_100us_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_100us_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_100us_i_1_n_0),
        .Q(time_out_100us_reg_n_0),
        .R(reset_time_out_reg_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00200000)) 
    time_out_1us_i_1
       (.I0(time_out_counter_reg[2]),
        .I1(time_out_counter_reg[4]),
        .I2(time_out_counter_reg[5]),
        .I3(time_out_1us_i_2_n_0),
        .I4(time_out_1us_i_3_n_0),
        .I5(time_out_1us_reg_n_0),
        .O(time_out_1us_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    time_out_1us_i_2
       (.I0(time_out_counter_reg[9]),
        .I1(time_out_counter_reg[7]),
        .I2(time_out_counter_reg[8]),
        .I3(time_out_counter_reg[10]),
        .I4(\time_out_counter[0]_i_7_n_0 ),
        .I5(time_tlock_max_i_2_n_0),
        .O(time_out_1us_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    time_out_1us_i_3
       (.I0(time_out_counter_reg[18]),
        .I1(time_out_counter_reg[17]),
        .I2(time_out_1us_i_4_n_0),
        .I3(time_out_1us_i_5_n_0),
        .I4(time_out_counter_reg[15]),
        .I5(time_out_counter_reg[16]),
        .O(time_out_1us_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'h1)) 
    time_out_1us_i_4
       (.I0(time_out_counter_reg[0]),
        .I1(time_out_counter_reg[1]),
        .O(time_out_1us_i_4_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    time_out_1us_i_5
       (.I0(time_out_counter_reg[3]),
        .I1(time_out_counter_reg[6]),
        .O(time_out_1us_i_5_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_1us_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_1us_i_1_n_0),
        .Q(time_out_1us_reg_n_0),
        .R(reset_time_out_reg_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00010000)) 
    time_out_2ms_i_1
       (.I0(time_out_counter_reg[0]),
        .I1(time_out_counter_reg[1]),
        .I2(time_out_counter_reg[2]),
        .I3(\time_out_counter[0]_i_3__0_n_0 ),
        .I4(\time_out_counter[0]_i_4_n_0 ),
        .I5(time_out_2ms_reg_n_0),
        .O(time_out_2ms_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_2ms_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_2ms_i_1_n_0),
        .Q(time_out_2ms_reg_n_0),
        .R(reset_time_out_reg_n_0));
  LUT6 #(
    .INIT(64'h00000000AAAAAABA)) 
    time_out_adapt_i_1
       (.I0(time_out_adapt_reg_n_0),
        .I1(\adapt_count[0]_i_6_n_0 ),
        .I2(\adapt_count[0]_i_5_n_0 ),
        .I3(\adapt_count[0]_i_4_n_0 ),
        .I4(\adapt_count[0]_i_3_n_0 ),
        .I5(recclk_mon_count_reset),
        .O(time_out_adapt_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_adapt_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_adapt_i_1_n_0),
        .Q(time_out_adapt_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \time_out_counter[0]_i_1 
       (.I0(time_out_counter_reg[0]),
        .I1(time_out_counter_reg[1]),
        .I2(time_out_counter_reg[2]),
        .I3(\time_out_counter[0]_i_3__0_n_0 ),
        .I4(\time_out_counter[0]_i_4_n_0 ),
        .O(time_out_counter));
  LUT5 #(
    .INIT(32'hFFFFFFFB)) 
    \time_out_counter[0]_i_3__0 
       (.I0(time_out_counter_reg[17]),
        .I1(time_out_counter_reg[18]),
        .I2(time_out_counter_reg[11]),
        .I3(time_out_counter_reg[4]),
        .I4(\time_out_counter[0]_i_6__0_n_0 ),
        .O(\time_out_counter[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    \time_out_counter[0]_i_4 
       (.I0(time_out_counter_reg[10]),
        .I1(time_out_counter_reg[12]),
        .I2(time_out_counter_reg[3]),
        .I3(time_out_counter_reg[6]),
        .I4(\time_out_counter[0]_i_7_n_0 ),
        .I5(\time_out_counter[0]_i_8_n_0 ),
        .O(\time_out_counter[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_5 
       (.I0(time_out_counter_reg[0]),
        .O(\time_out_counter[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'hFF7F)) 
    \time_out_counter[0]_i_6__0 
       (.I0(time_out_counter_reg[15]),
        .I1(time_out_counter_reg[7]),
        .I2(time_out_counter_reg[5]),
        .I3(time_out_counter_reg[16]),
        .O(\time_out_counter[0]_i_6__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \time_out_counter[0]_i_7 
       (.I0(time_out_counter_reg[13]),
        .I1(time_out_counter_reg[14]),
        .O(\time_out_counter[0]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \time_out_counter[0]_i_8 
       (.I0(time_out_counter_reg[9]),
        .I1(time_out_counter_reg[8]),
        .O(\time_out_counter[0]_i_8_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[0] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_7 ),
        .Q(time_out_counter_reg[0]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[0]_i_2__0 
       (.CI(1'b0),
        .CO({\time_out_counter_reg[0]_i_2__0_n_0 ,\time_out_counter_reg[0]_i_2__0_n_1 ,\time_out_counter_reg[0]_i_2__0_n_2 ,\time_out_counter_reg[0]_i_2__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\time_out_counter_reg[0]_i_2__0_n_4 ,\time_out_counter_reg[0]_i_2__0_n_5 ,\time_out_counter_reg[0]_i_2__0_n_6 ,\time_out_counter_reg[0]_i_2__0_n_7 }),
        .S({time_out_counter_reg[3:1],\time_out_counter[0]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[10] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[10]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[11] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_4 ),
        .Q(time_out_counter_reg[11]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[12] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[12]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[12]_i_1__0 
       (.CI(\time_out_counter_reg[8]_i_1__0_n_0 ),
        .CO({\time_out_counter_reg[12]_i_1__0_n_0 ,\time_out_counter_reg[12]_i_1__0_n_1 ,\time_out_counter_reg[12]_i_1__0_n_2 ,\time_out_counter_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[12]_i_1__0_n_4 ,\time_out_counter_reg[12]_i_1__0_n_5 ,\time_out_counter_reg[12]_i_1__0_n_6 ,\time_out_counter_reg[12]_i_1__0_n_7 }),
        .S(time_out_counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[13] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[13]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[14] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[14]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[15] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_4 ),
        .Q(time_out_counter_reg[15]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[16] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[16]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[16]_i_1__0 
       (.CI(\time_out_counter_reg[12]_i_1__0_n_0 ),
        .CO({\NLW_time_out_counter_reg[16]_i_1__0_CO_UNCONNECTED [3:2],\time_out_counter_reg[16]_i_1__0_n_2 ,\time_out_counter_reg[16]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_time_out_counter_reg[16]_i_1__0_O_UNCONNECTED [3],\time_out_counter_reg[16]_i_1__0_n_5 ,\time_out_counter_reg[16]_i_1__0_n_6 ,\time_out_counter_reg[16]_i_1__0_n_7 }),
        .S({1'b0,time_out_counter_reg[18:16]}));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[17] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[17]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[18] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[18]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[1] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_6 ),
        .Q(time_out_counter_reg[1]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[2] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_5 ),
        .Q(time_out_counter_reg[2]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[3] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_4 ),
        .Q(time_out_counter_reg[3]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[4] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[4]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[4]_i_1__0 
       (.CI(\time_out_counter_reg[0]_i_2__0_n_0 ),
        .CO({\time_out_counter_reg[4]_i_1__0_n_0 ,\time_out_counter_reg[4]_i_1__0_n_1 ,\time_out_counter_reg[4]_i_1__0_n_2 ,\time_out_counter_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[4]_i_1__0_n_4 ,\time_out_counter_reg[4]_i_1__0_n_5 ,\time_out_counter_reg[4]_i_1__0_n_6 ,\time_out_counter_reg[4]_i_1__0_n_7 }),
        .S(time_out_counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[5] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[5]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[6] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[6]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[7] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_4 ),
        .Q(time_out_counter_reg[7]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[8] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[8]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[8]_i_1__0 
       (.CI(\time_out_counter_reg[4]_i_1__0_n_0 ),
        .CO({\time_out_counter_reg[8]_i_1__0_n_0 ,\time_out_counter_reg[8]_i_1__0_n_1 ,\time_out_counter_reg[8]_i_1__0_n_2 ,\time_out_counter_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[8]_i_1__0_n_4 ,\time_out_counter_reg[8]_i_1__0_n_5 ,\time_out_counter_reg[8]_i_1__0_n_6 ,\time_out_counter_reg[8]_i_1__0_n_7 }),
        .S(time_out_counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[9] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[9]),
        .R(reset_time_out_reg_n_0));
  LUT4 #(
    .INIT(16'hAB00)) 
    time_out_wait_bypass_i_1__0
       (.I0(time_out_wait_bypass_reg_n_0),
        .I1(rx_fsm_reset_done_int_s3),
        .I2(\wait_bypass_count[0]_i_4__0_n_0 ),
        .I3(run_phase_alignment_int_s3_reg_n_0),
        .O(time_out_wait_bypass_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_reg
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(1'b1),
        .D(time_out_wait_bypass_i_1__0_n_0),
        .Q(time_out_wait_bypass_reg_n_0),
        .R(1'b0));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_s3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_wait_bypass_s2),
        .Q(time_out_wait_bypass_s3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFB00000)) 
    time_tlock_max_i_1
       (.I0(time_tlock_max_i_2_n_0),
        .I1(time_tlock_max_i_3_n_0),
        .I2(time_out_counter_reg[13]),
        .I3(time_tlock_max_i_4_n_0),
        .I4(check_tlock_max_reg_n_0),
        .I5(time_tlock_max),
        .O(time_tlock_max_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    time_tlock_max_i_2
       (.I0(time_out_counter_reg[12]),
        .I1(time_out_counter_reg[11]),
        .O(time_tlock_max_i_2_n_0));
  LUT6 #(
    .INIT(64'h45FFFFFFFFFFFFFF)) 
    time_tlock_max_i_3
       (.I0(time_out_100us_i_4_n_0),
        .I1(time_out_100us_i_2_n_0),
        .I2(time_out_counter_reg[4]),
        .I3(time_out_counter_reg[10]),
        .I4(time_out_counter_reg[9]),
        .I5(time_out_counter_reg[8]),
        .O(time_tlock_max_i_3_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    time_tlock_max_i_4
       (.I0(time_out_counter_reg[16]),
        .I1(time_out_counter_reg[15]),
        .I2(time_out_counter_reg[18]),
        .I3(time_out_counter_reg[17]),
        .I4(time_out_counter_reg[14]),
        .O(time_tlock_max_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_tlock_max_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_tlock_max_i_1_n_0),
        .Q(time_tlock_max),
        .R(reset_time_out_reg_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_1__0 
       (.I0(run_phase_alignment_int_s3_reg_n_0),
        .O(\wait_bypass_count[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \wait_bypass_count[0]_i_2__0 
       (.I0(\wait_bypass_count[0]_i_4__0_n_0 ),
        .I1(rx_fsm_reset_done_int_s3),
        .O(\wait_bypass_count[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hBFFFFFFF)) 
    \wait_bypass_count[0]_i_4__0 
       (.I0(\wait_bypass_count[0]_i_6__0_n_0 ),
        .I1(wait_bypass_count_reg[1]),
        .I2(wait_bypass_count_reg[8]),
        .I3(wait_bypass_count_reg[0]),
        .I4(\wait_bypass_count[0]_i_7__0_n_0 ),
        .O(\wait_bypass_count[0]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_5__0 
       (.I0(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \wait_bypass_count[0]_i_6__0 
       (.I0(wait_bypass_count_reg[3]),
        .I1(wait_bypass_count_reg[5]),
        .I2(wait_bypass_count_reg[9]),
        .I3(wait_bypass_count_reg[7]),
        .O(\wait_bypass_count[0]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \wait_bypass_count[0]_i_7__0 
       (.I0(wait_bypass_count_reg[2]),
        .I1(wait_bypass_count_reg[12]),
        .I2(wait_bypass_count_reg[4]),
        .I3(wait_bypass_count_reg[10]),
        .I4(wait_bypass_count_reg[6]),
        .I5(wait_bypass_count_reg[11]),
        .O(\wait_bypass_count[0]_i_7__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[0] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_7 ),
        .Q(wait_bypass_count_reg[0]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\wait_bypass_count_reg[0]_i_3__0_n_0 ,\wait_bypass_count_reg[0]_i_3__0_n_1 ,\wait_bypass_count_reg[0]_i_3__0_n_2 ,\wait_bypass_count_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\wait_bypass_count_reg[0]_i_3__0_n_4 ,\wait_bypass_count_reg[0]_i_3__0_n_5 ,\wait_bypass_count_reg[0]_i_3__0_n_6 ,\wait_bypass_count_reg[0]_i_3__0_n_7 }),
        .S({wait_bypass_count_reg[3:1],\wait_bypass_count[0]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[10] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_5 ),
        .Q(wait_bypass_count_reg[10]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[11] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_4 ),
        .Q(wait_bypass_count_reg[11]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[12] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[12]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[12]_i_1__0 
       (.CI(\wait_bypass_count_reg[8]_i_1__0_n_0 ),
        .CO(\NLW_wait_bypass_count_reg[12]_i_1__0_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_wait_bypass_count_reg[12]_i_1__0_O_UNCONNECTED [3:1],\wait_bypass_count_reg[12]_i_1__0_n_7 }),
        .S({1'b0,1'b0,1'b0,wait_bypass_count_reg[12]}));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[1] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_6 ),
        .Q(wait_bypass_count_reg[1]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[2] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_5 ),
        .Q(wait_bypass_count_reg[2]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[3] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_4 ),
        .Q(wait_bypass_count_reg[3]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[4] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[4]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[4]_i_1__0 
       (.CI(\wait_bypass_count_reg[0]_i_3__0_n_0 ),
        .CO({\wait_bypass_count_reg[4]_i_1__0_n_0 ,\wait_bypass_count_reg[4]_i_1__0_n_1 ,\wait_bypass_count_reg[4]_i_1__0_n_2 ,\wait_bypass_count_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[4]_i_1__0_n_4 ,\wait_bypass_count_reg[4]_i_1__0_n_5 ,\wait_bypass_count_reg[4]_i_1__0_n_6 ,\wait_bypass_count_reg[4]_i_1__0_n_7 }),
        .S(wait_bypass_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[5] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_6 ),
        .Q(wait_bypass_count_reg[5]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[6] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_5 ),
        .Q(wait_bypass_count_reg[6]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[7] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_4 ),
        .Q(wait_bypass_count_reg[7]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[8] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[8]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[8]_i_1__0 
       (.CI(\wait_bypass_count_reg[4]_i_1__0_n_0 ),
        .CO({\wait_bypass_count_reg[8]_i_1__0_n_0 ,\wait_bypass_count_reg[8]_i_1__0_n_1 ,\wait_bypass_count_reg[8]_i_1__0_n_2 ,\wait_bypass_count_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[8]_i_1__0_n_4 ,\wait_bypass_count_reg[8]_i_1__0_n_5 ,\wait_bypass_count_reg[8]_i_1__0_n_6 ,\wait_bypass_count_reg[8]_i_1__0_n_7 }),
        .S(wait_bypass_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[9] 
       (.C(p_level_in_d1_cdc_from_reg),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_6 ),
        .Q(wait_bypass_count_reg[9]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \wait_time_cnt[0]_i_1 
       (.I0(rx_state[1]),
        .I1(rx_state[0]),
        .I2(rx_state[3]),
        .O(\wait_time_cnt[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_10 
       (.I0(wait_time_cnt_reg[1]),
        .O(\wait_time_cnt[0]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_11 
       (.I0(wait_time_cnt_reg[0]),
        .O(\wait_time_cnt[0]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_2__0 
       (.I0(\wait_time_cnt[0]_i_4__0_n_0 ),
        .I1(\wait_time_cnt[0]_i_5__0_n_0 ),
        .I2(\wait_time_cnt[0]_i_6__0_n_0 ),
        .I3(\wait_time_cnt[0]_i_7__0_n_0 ),
        .O(\wait_time_cnt[0]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_4__0 
       (.I0(wait_time_cnt_reg[0]),
        .I1(wait_time_cnt_reg[3]),
        .I2(wait_time_cnt_reg[15]),
        .I3(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[0]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_5__0 
       (.I0(wait_time_cnt_reg[9]),
        .I1(wait_time_cnt_reg[10]),
        .I2(wait_time_cnt_reg[14]),
        .I3(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[0]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_6__0 
       (.I0(wait_time_cnt_reg[1]),
        .I1(wait_time_cnt_reg[2]),
        .I2(wait_time_cnt_reg[8]),
        .I3(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[0]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_7__0 
       (.I0(wait_time_cnt_reg[6]),
        .I1(wait_time_cnt_reg[5]),
        .I2(wait_time_cnt_reg[7]),
        .I3(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[0]_i_7__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_8 
       (.I0(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_9 
       (.I0(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_9_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_2__0 
       (.I0(wait_time_cnt_reg[15]),
        .O(\wait_time_cnt[12]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_3__0 
       (.I0(wait_time_cnt_reg[14]),
        .O(\wait_time_cnt[12]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_4__0 
       (.I0(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[12]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_5__0 
       (.I0(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[12]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_2__0 
       (.I0(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[4]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_3__0 
       (.I0(wait_time_cnt_reg[6]),
        .O(\wait_time_cnt[4]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_4__0 
       (.I0(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[4]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_5__0 
       (.I0(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[4]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_2__0 
       (.I0(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[8]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_3__0 
       (.I0(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[8]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_4__0 
       (.I0(wait_time_cnt_reg[9]),
        .O(\wait_time_cnt[8]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_5__0 
       (.I0(wait_time_cnt_reg[8]),
        .O(\wait_time_cnt[8]_i_5__0_n_0 ));
  FDRE \wait_time_cnt_reg[0] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_7 ),
        .Q(wait_time_cnt_reg[0]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\wait_time_cnt_reg[0]_i_3__0_n_0 ,\wait_time_cnt_reg[0]_i_3__0_n_1 ,\wait_time_cnt_reg[0]_i_3__0_n_2 ,\wait_time_cnt_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[0]_i_3__0_n_4 ,\wait_time_cnt_reg[0]_i_3__0_n_5 ,\wait_time_cnt_reg[0]_i_3__0_n_6 ,\wait_time_cnt_reg[0]_i_3__0_n_7 }),
        .S({\wait_time_cnt[0]_i_8_n_0 ,\wait_time_cnt[0]_i_9_n_0 ,\wait_time_cnt[0]_i_10_n_0 ,\wait_time_cnt[0]_i_11_n_0 }));
  FDRE \wait_time_cnt_reg[10] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[10]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[11] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[11]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[12] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[12]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[12]_i_1__0 
       (.CI(\wait_time_cnt_reg[8]_i_1__0_n_0 ),
        .CO({\NLW_wait_time_cnt_reg[12]_i_1__0_CO_UNCONNECTED [3],\wait_time_cnt_reg[12]_i_1__0_n_1 ,\wait_time_cnt_reg[12]_i_1__0_n_2 ,\wait_time_cnt_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[12]_i_1__0_n_4 ,\wait_time_cnt_reg[12]_i_1__0_n_5 ,\wait_time_cnt_reg[12]_i_1__0_n_6 ,\wait_time_cnt_reg[12]_i_1__0_n_7 }),
        .S({\wait_time_cnt[12]_i_2__0_n_0 ,\wait_time_cnt[12]_i_3__0_n_0 ,\wait_time_cnt[12]_i_4__0_n_0 ,\wait_time_cnt[12]_i_5__0_n_0 }));
  FDRE \wait_time_cnt_reg[13] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[13]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[14] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[14]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[15] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[15]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[1] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_6 ),
        .Q(wait_time_cnt_reg[1]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[2] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_5 ),
        .Q(wait_time_cnt_reg[2]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[3] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_4 ),
        .Q(wait_time_cnt_reg[3]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[4] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[4]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[4]_i_1__0 
       (.CI(\wait_time_cnt_reg[0]_i_3__0_n_0 ),
        .CO({\wait_time_cnt_reg[4]_i_1__0_n_0 ,\wait_time_cnt_reg[4]_i_1__0_n_1 ,\wait_time_cnt_reg[4]_i_1__0_n_2 ,\wait_time_cnt_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[4]_i_1__0_n_4 ,\wait_time_cnt_reg[4]_i_1__0_n_5 ,\wait_time_cnt_reg[4]_i_1__0_n_6 ,\wait_time_cnt_reg[4]_i_1__0_n_7 }),
        .S({\wait_time_cnt[4]_i_2__0_n_0 ,\wait_time_cnt[4]_i_3__0_n_0 ,\wait_time_cnt[4]_i_4__0_n_0 ,\wait_time_cnt[4]_i_5__0_n_0 }));
  FDSE \wait_time_cnt_reg[5] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[5]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[6] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[6]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[7] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[7]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[8] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[8]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[8]_i_1__0 
       (.CI(\wait_time_cnt_reg[4]_i_1__0_n_0 ),
        .CO({\wait_time_cnt_reg[8]_i_1__0_n_0 ,\wait_time_cnt_reg[8]_i_1__0_n_1 ,\wait_time_cnt_reg[8]_i_1__0_n_2 ,\wait_time_cnt_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[8]_i_1__0_n_4 ,\wait_time_cnt_reg[8]_i_1__0_n_5 ,\wait_time_cnt_reg[8]_i_1__0_n_6 ,\wait_time_cnt_reg[8]_i_1__0_n_7 }),
        .S({\wait_time_cnt[8]_i_2__0_n_0 ,\wait_time_cnt[8]_i_3__0_n_0 ,\wait_time_cnt[8]_i_4__0_n_0 ,\wait_time_cnt[8]_i_5__0_n_0 }));
  FDSE \wait_time_cnt_reg[9] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[9]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_support" *) 
module top_aurora_0_0_aurora_8b10b_0_support
   (s_axi_tx_tdata,
    s_axi_tx_tkeep,
    s_axi_tx_tvalid,
    s_axi_tx_tlast,
    s_axi_tx_tready,
    m_axi_rx_tdata,
    m_axi_rx_tkeep,
    m_axi_rx_tvalid,
    m_axi_rx_tlast,
    rxp,
    rxn,
    txp,
    txn,
    gt_refclk1,
    frame_err,
    hard_err,
    soft_err,
    lane_up,
    channel_up,
    user_clk_out,
    sync_clk_out,
    gt_reset,
    reset,
    power_down,
    loopback,
    tx_lock,
    init_clk_in,
    tx_resetdone_out,
    rx_resetdone_out,
    link_reset_out,
    sys_reset_out,
    gt_reset_out,
    drpclk_in,
    drpaddr_in,
    drpen_in,
    drpdi_in,
    drprdy_out,
    drpdo_out,
    drpwe_in,
    gt0_qplllock_out,
    gt0_qpllrefclklost_out,
    gt_qpllclk_quad1_out,
    gt_qpllrefclk_quad1_out,
    pll_not_locked_out);
  input [0:31]s_axi_tx_tdata;
  input [0:3]s_axi_tx_tkeep;
  input s_axi_tx_tvalid;
  input s_axi_tx_tlast;
  output s_axi_tx_tready;
  output [0:31]m_axi_rx_tdata;
  output [0:3]m_axi_rx_tkeep;
  output m_axi_rx_tvalid;
  output m_axi_rx_tlast;
  input rxp;
  input rxn;
  output txp;
  output txn;
  input gt_refclk1;
  output frame_err;
  output hard_err;
  output soft_err;
  output lane_up;
  output channel_up;
  output user_clk_out;
  output sync_clk_out;
  input gt_reset;
  input reset;
  input power_down;
  input [2:0]loopback;
  output tx_lock;
  input init_clk_in;
  output tx_resetdone_out;
  output rx_resetdone_out;
  output link_reset_out;
  output sys_reset_out;
  output gt_reset_out;
  input drpclk_in;
  input [8:0]drpaddr_in;
  input drpen_in;
  input [15:0]drpdi_in;
  output drprdy_out;
  output [15:0]drpdo_out;
  input drpwe_in;
  output gt0_qplllock_out;
  output gt0_qpllrefclklost_out;
  output gt_qpllclk_quad1_out;
  output gt_qpllrefclk_quad1_out;
  output pll_not_locked_out;

  wire \<const1> ;
  wire channel_up;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire frame_err;
  wire gt0_qplllock_out;
  wire gt0_qpllrefclklost_out;
  wire gt_qpllclk_quad1_out;
  wire gt_qpllrefclk_quad1_out;
  wire gt_refclk1;
  wire gt_reset;
  wire gt_reset_out;
  wire gt_reset_sync_init_clk;
  wire hard_err;
  wire init_clk_in;
  wire lane_up;
  wire link_reset_out;
  wire [2:0]loopback;
  wire [0:31]m_axi_rx_tdata;
  wire [1:3]\^m_axi_rx_tkeep ;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire pll_not_locked_out;
  wire power_down;
  wire reset;
  wire reset_sync_user_clk;
  wire rx_resetdone_out;
  wire rxn;
  wire rxp;
  wire [0:31]s_axi_tx_tdata;
  wire [0:3]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire soft_err;
  wire sys_reset_out;
  wire system_reset_i;
  wire tx_lock;
  wire tx_out_clk_i;
  wire tx_resetdone_out;
  wire txn;
  wire txp;
  wire user_clk_out;

  assign m_axi_rx_tkeep[0] = \<const1> ;
  assign m_axi_rx_tkeep[1:3] = \^m_axi_rx_tkeep [1:3];
  assign sync_clk_out = user_clk_out;
  VCC VCC
       (.P(\<const1> ));
  top_aurora_0_0_aurora_8b10b_0_core aurora_8b10b_0_core_i
       (.channel_up(channel_up),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drpwe_in(drpwe_in),
        .frame_err(frame_err),
        .gt_qpllclk_quad1_out(gt_qpllclk_quad1_out),
        .gt_qpllrefclk_quad1_out(gt_qpllrefclk_quad1_out),
        .gt_refclk1(gt_refclk1),
        .hard_err(hard_err),
        .in0(system_reset_i),
        .init_clk_in(init_clk_in),
        .\init_wait_count_reg[7] (gt_reset_out),
        .lane_up(lane_up),
        .link_reset_out(link_reset_out),
        .loopback(loopback),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tkeep({\^m_axi_rx_tkeep [1],\^m_axi_rx_tkeep [2],\^m_axi_rx_tkeep [3]}),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .pll_not_locked_out(pll_not_locked_out),
        .power_down(power_down),
        .\prepare_count_r_reg[9] (user_clk_out),
        .rx_resetdone_out(rx_resetdone_out),
        .rxn(rxn),
        .rxp(rxp),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .soft_err(soft_err),
        .sys_reset_out(sys_reset_out),
        .tx_lock(tx_lock),
        .tx_out_clk(tx_out_clk_i),
        .tx_resetdone_out(tx_resetdone_out),
        .txn(txn),
        .txp(txp));
  top_aurora_0_0_aurora_8b10b_0_CLOCK_MODULE clock_module_i
       (.init_clk_in(user_clk_out),
        .tx_out_clk(tx_out_clk_i));
  top_aurora_0_0_aurora_8b10b_0_gt_common_wrapper gt_common_support
       (.gt0_qplllock_out(gt0_qplllock_out),
        .gt0_qpllrefclklost_out(gt0_qpllrefclklost_out),
        .gt_qpllclk_quad1_out(gt_qpllclk_quad1_out),
        .gt_qpllrefclk_quad1_out(gt_qpllrefclk_quad1_out),
        .gt_refclk1(gt_refclk1),
        .init_clk_in(init_clk_in));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync gt_reset_cdc_sync
       (.D(gt_reset_sync_init_clk),
        .gt_reset(gt_reset),
        .init_clk_in(init_clk_in));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_4 reset_sync_user_clk_cdc_sync
       (.D(reset_sync_user_clk),
        .reset(reset),
        .s_level_out_d5_reg_0(user_clk_out));
  top_aurora_0_0_aurora_8b10b_0_SUPPORT_RESET_LOGIC support_reset_logic_i
       (.D(reset_sync_user_clk),
        .\debounce_gt_rst_r_reg[0]_0 (gt_reset_sync_init_clk),
        .gt_reset_out(gt_reset_out),
        .in0(system_reset_i),
        .init_clk_in(init_clk_in),
        .s_level_out_d6_reg(user_clk_out));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_0_tx_startup_fsm" *) 
module top_aurora_0_0_aurora_8b10b_0_tx_startup_fsm
   (out,
    gt_tx_reset_i,
    cpll_reset_i,
    gt_txuserrdy_i,
    CPLL_RESET_reg_0,
    s_level_out_d3_reg,
    s_level_out_d1_aurora_8b10b_0_cdc_to_reg,
    init_clk_in,
    s_level_out_d5_reg,
    txfsm_txresetdone_r,
    \init_wait_count_reg[7]_0 ,
    ack_flag);
  output out;
  output gt_tx_reset_i;
  output cpll_reset_i;
  output gt_txuserrdy_i;
  output CPLL_RESET_reg_0;
  output s_level_out_d3_reg;
  input s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  input init_clk_in;
  input s_level_out_d5_reg;
  input txfsm_txresetdone_r;
  input \init_wait_count_reg[7]_0 ;
  input ack_flag;

  wire CPLL_RESET_i_1_n_0;
  wire CPLL_RESET_reg_0;
  wire \FSM_sequential_tx_state[0]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[0]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[1]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[1]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[2]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[2]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_10_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_11_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_12_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_4_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_5_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_6_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_9_n_0 ;
  wire TXUSERRDY_i_1_n_0;
  wire ack_flag;
  wire clear;
  wire cpll_reset_i;
  wire gt_tx_reset_i;
  wire gt_txuserrdy_i;
  wire gttxreset_i_i_1_n_0;
  wire init_clk_in;
  wire init_wait_count;
  wire \init_wait_count[0]_i_1_n_0 ;
  wire \init_wait_count[7]_i_3_n_0 ;
  wire \init_wait_count[7]_i_4_n_0 ;
  wire \init_wait_count_reg[7]_0 ;
  wire [7:0]init_wait_count_reg__0;
  wire init_wait_done_i_1_n_0;
  wire init_wait_done_reg_n_0;
  wire \mmcm_lock_count[9]_i_2_n_0 ;
  wire \mmcm_lock_count[9]_i_4_n_0 ;
  wire [9:0]mmcm_lock_count_reg__0;
  wire mmcm_lock_reclocked;
  wire out;
  wire p_0_in;
  wire [7:1]p_0_in__1;
  wire [9:0]p_0_in__2;
  wire pll_reset_asserted_i_1_n_0;
  wire pll_reset_asserted_reg_n_0;
  wire reset_time_out;
  wire reset_time_out_i_3_n_0;
  wire run_phase_alignment_int;
  wire run_phase_alignment_int_i_1_n_0;
  wire run_phase_alignment_int_s2;
  wire run_phase_alignment_int_s3;
  wire s_level_out_d1_aurora_8b10b_0_cdc_to_reg;
  wire s_level_out_d3_reg;
  wire s_level_out_d5_reg;
  wire sel;
  wire sync_cplllock_cdc_sync_n_0;
  wire sync_cplllock_cdc_sync_n_1;
  wire sync_mmcm_lock_reclocked_cdc_sync_n_0;
  wire sync_mmcm_lock_reclocked_cdc_sync_n_1;
  wire time_out_2ms_i_1__0_n_0;
  wire time_out_2ms_i_2_n_0;
  wire time_out_2ms_i_3_n_0;
  wire time_out_2ms_reg_n_0;
  wire time_out_500us_i_1_n_0;
  wire time_out_500us_i_2_n_0;
  wire time_out_500us_i_3_n_0;
  wire time_out_500us_i_4_n_0;
  wire time_out_500us_reg_n_0;
  wire time_out_counter;
  wire \time_out_counter[0]_i_3_n_0 ;
  wire \time_out_counter[0]_i_4__0_n_0 ;
  wire \time_out_counter[0]_i_5__0_n_0 ;
  wire \time_out_counter[0]_i_6_n_0 ;
  wire [17:0]time_out_counter_reg;
  wire \time_out_counter_reg[0]_i_2_n_0 ;
  wire \time_out_counter_reg[0]_i_2_n_1 ;
  wire \time_out_counter_reg[0]_i_2_n_2 ;
  wire \time_out_counter_reg[0]_i_2_n_3 ;
  wire \time_out_counter_reg[0]_i_2_n_4 ;
  wire \time_out_counter_reg[0]_i_2_n_5 ;
  wire \time_out_counter_reg[0]_i_2_n_6 ;
  wire \time_out_counter_reg[0]_i_2_n_7 ;
  wire \time_out_counter_reg[12]_i_1_n_0 ;
  wire \time_out_counter_reg[12]_i_1_n_1 ;
  wire \time_out_counter_reg[12]_i_1_n_2 ;
  wire \time_out_counter_reg[12]_i_1_n_3 ;
  wire \time_out_counter_reg[12]_i_1_n_4 ;
  wire \time_out_counter_reg[12]_i_1_n_5 ;
  wire \time_out_counter_reg[12]_i_1_n_6 ;
  wire \time_out_counter_reg[12]_i_1_n_7 ;
  wire \time_out_counter_reg[16]_i_1_n_3 ;
  wire \time_out_counter_reg[16]_i_1_n_6 ;
  wire \time_out_counter_reg[16]_i_1_n_7 ;
  wire \time_out_counter_reg[4]_i_1_n_0 ;
  wire \time_out_counter_reg[4]_i_1_n_1 ;
  wire \time_out_counter_reg[4]_i_1_n_2 ;
  wire \time_out_counter_reg[4]_i_1_n_3 ;
  wire \time_out_counter_reg[4]_i_1_n_4 ;
  wire \time_out_counter_reg[4]_i_1_n_5 ;
  wire \time_out_counter_reg[4]_i_1_n_6 ;
  wire \time_out_counter_reg[4]_i_1_n_7 ;
  wire \time_out_counter_reg[8]_i_1_n_0 ;
  wire \time_out_counter_reg[8]_i_1_n_1 ;
  wire \time_out_counter_reg[8]_i_1_n_2 ;
  wire \time_out_counter_reg[8]_i_1_n_3 ;
  wire \time_out_counter_reg[8]_i_1_n_4 ;
  wire \time_out_counter_reg[8]_i_1_n_5 ;
  wire \time_out_counter_reg[8]_i_1_n_6 ;
  wire \time_out_counter_reg[8]_i_1_n_7 ;
  wire time_out_wait_bypass;
  wire time_out_wait_bypass_i_1_n_0;
  wire time_out_wait_bypass_s2;
  wire time_out_wait_bypass_s3;
  wire time_tlock_max_i_1__0_n_0;
  wire time_tlock_max_i_2__0_n_0;
  wire time_tlock_max_i_3__0_n_0;
  wire time_tlock_max_reg_n_0;
  wire tx_fsm_reset_done_int;
  wire tx_fsm_reset_done_int_i_1_n_0;
  wire tx_fsm_reset_done_int_s3;
  wire [3:0]tx_state;
  wire txfsm_txresetdone_r;
  wire txresetdone_s2;
  wire txresetdone_s3;
  wire \wait_bypass_count[0]_i_2_n_0 ;
  wire \wait_bypass_count[0]_i_4_n_0 ;
  wire \wait_bypass_count[0]_i_5_n_0 ;
  wire \wait_bypass_count[0]_i_6_n_0 ;
  wire \wait_bypass_count[0]_i_7_n_0 ;
  wire \wait_bypass_count[0]_i_8_n_0 ;
  wire [16:0]wait_bypass_count_reg;
  wire \wait_bypass_count_reg[0]_i_3_n_0 ;
  wire \wait_bypass_count_reg[0]_i_3_n_1 ;
  wire \wait_bypass_count_reg[0]_i_3_n_2 ;
  wire \wait_bypass_count_reg[0]_i_3_n_3 ;
  wire \wait_bypass_count_reg[0]_i_3_n_4 ;
  wire \wait_bypass_count_reg[0]_i_3_n_5 ;
  wire \wait_bypass_count_reg[0]_i_3_n_6 ;
  wire \wait_bypass_count_reg[0]_i_3_n_7 ;
  wire \wait_bypass_count_reg[12]_i_1_n_0 ;
  wire \wait_bypass_count_reg[12]_i_1_n_1 ;
  wire \wait_bypass_count_reg[12]_i_1_n_2 ;
  wire \wait_bypass_count_reg[12]_i_1_n_3 ;
  wire \wait_bypass_count_reg[12]_i_1_n_4 ;
  wire \wait_bypass_count_reg[12]_i_1_n_5 ;
  wire \wait_bypass_count_reg[12]_i_1_n_6 ;
  wire \wait_bypass_count_reg[12]_i_1_n_7 ;
  wire \wait_bypass_count_reg[16]_i_1_n_7 ;
  wire \wait_bypass_count_reg[4]_i_1_n_0 ;
  wire \wait_bypass_count_reg[4]_i_1_n_1 ;
  wire \wait_bypass_count_reg[4]_i_1_n_2 ;
  wire \wait_bypass_count_reg[4]_i_1_n_3 ;
  wire \wait_bypass_count_reg[4]_i_1_n_4 ;
  wire \wait_bypass_count_reg[4]_i_1_n_5 ;
  wire \wait_bypass_count_reg[4]_i_1_n_6 ;
  wire \wait_bypass_count_reg[4]_i_1_n_7 ;
  wire \wait_bypass_count_reg[8]_i_1_n_0 ;
  wire \wait_bypass_count_reg[8]_i_1_n_1 ;
  wire \wait_bypass_count_reg[8]_i_1_n_2 ;
  wire \wait_bypass_count_reg[8]_i_1_n_3 ;
  wire \wait_bypass_count_reg[8]_i_1_n_4 ;
  wire \wait_bypass_count_reg[8]_i_1_n_5 ;
  wire \wait_bypass_count_reg[8]_i_1_n_6 ;
  wire \wait_bypass_count_reg[8]_i_1_n_7 ;
  wire \wait_time_cnt[0]_i_1__0_n_0 ;
  wire \wait_time_cnt[0]_i_4_n_0 ;
  wire \wait_time_cnt[0]_i_5_n_0 ;
  wire \wait_time_cnt[0]_i_6_n_0 ;
  wire \wait_time_cnt[0]_i_7_n_0 ;
  wire \wait_time_cnt[12]_i_2_n_0 ;
  wire \wait_time_cnt[12]_i_3_n_0 ;
  wire \wait_time_cnt[12]_i_4_n_0 ;
  wire \wait_time_cnt[12]_i_5_n_0 ;
  wire \wait_time_cnt[4]_i_2_n_0 ;
  wire \wait_time_cnt[4]_i_3_n_0 ;
  wire \wait_time_cnt[4]_i_4_n_0 ;
  wire \wait_time_cnt[4]_i_5_n_0 ;
  wire \wait_time_cnt[8]_i_2_n_0 ;
  wire \wait_time_cnt[8]_i_3_n_0 ;
  wire \wait_time_cnt[8]_i_4_n_0 ;
  wire \wait_time_cnt[8]_i_5_n_0 ;
  wire [15:0]wait_time_cnt_reg;
  wire \wait_time_cnt_reg[0]_i_3_n_0 ;
  wire \wait_time_cnt_reg[0]_i_3_n_1 ;
  wire \wait_time_cnt_reg[0]_i_3_n_2 ;
  wire \wait_time_cnt_reg[0]_i_3_n_3 ;
  wire \wait_time_cnt_reg[0]_i_3_n_4 ;
  wire \wait_time_cnt_reg[0]_i_3_n_5 ;
  wire \wait_time_cnt_reg[0]_i_3_n_6 ;
  wire \wait_time_cnt_reg[0]_i_3_n_7 ;
  wire \wait_time_cnt_reg[12]_i_1_n_1 ;
  wire \wait_time_cnt_reg[12]_i_1_n_2 ;
  wire \wait_time_cnt_reg[12]_i_1_n_3 ;
  wire \wait_time_cnt_reg[12]_i_1_n_4 ;
  wire \wait_time_cnt_reg[12]_i_1_n_5 ;
  wire \wait_time_cnt_reg[12]_i_1_n_6 ;
  wire \wait_time_cnt_reg[12]_i_1_n_7 ;
  wire \wait_time_cnt_reg[4]_i_1_n_0 ;
  wire \wait_time_cnt_reg[4]_i_1_n_1 ;
  wire \wait_time_cnt_reg[4]_i_1_n_2 ;
  wire \wait_time_cnt_reg[4]_i_1_n_3 ;
  wire \wait_time_cnt_reg[4]_i_1_n_4 ;
  wire \wait_time_cnt_reg[4]_i_1_n_5 ;
  wire \wait_time_cnt_reg[4]_i_1_n_6 ;
  wire \wait_time_cnt_reg[4]_i_1_n_7 ;
  wire \wait_time_cnt_reg[8]_i_1_n_0 ;
  wire \wait_time_cnt_reg[8]_i_1_n_1 ;
  wire \wait_time_cnt_reg[8]_i_1_n_2 ;
  wire \wait_time_cnt_reg[8]_i_1_n_3 ;
  wire \wait_time_cnt_reg[8]_i_1_n_4 ;
  wire \wait_time_cnt_reg[8]_i_1_n_5 ;
  wire \wait_time_cnt_reg[8]_i_1_n_6 ;
  wire \wait_time_cnt_reg[8]_i_1_n_7 ;
  wire [3:1]\NLW_time_out_counter_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_time_out_counter_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_wait_bypass_count_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_wait_bypass_count_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:3]\NLW_wait_time_cnt_reg[12]_i_1_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hFFFFFFDF00000010)) 
    CPLL_RESET_i_1
       (.I0(pll_reset_asserted_reg_n_0),
        .I1(tx_state[3]),
        .I2(tx_state[0]),
        .I3(tx_state[1]),
        .I4(tx_state[2]),
        .I5(cpll_reset_i),
        .O(CPLL_RESET_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CPLL_RESET_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(CPLL_RESET_i_1_n_0),
        .Q(cpll_reset_i),
        .R(\init_wait_count_reg[7]_0 ));
  LUT6 #(
    .INIT(64'h00000000DDDDD555)) 
    \FSM_sequential_tx_state[0]_i_1 
       (.I0(\FSM_sequential_tx_state[0]_i_2_n_0 ),
        .I1(\FSM_sequential_tx_state[2]_i_2_n_0 ),
        .I2(time_out_2ms_reg_n_0),
        .I3(tx_state[1]),
        .I4(tx_state[2]),
        .I5(\FSM_sequential_tx_state[3]_i_6_n_0 ),
        .O(\FSM_sequential_tx_state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_sequential_tx_state[0]_i_2 
       (.I0(tx_state[0]),
        .I1(tx_state[3]),
        .O(\FSM_sequential_tx_state[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT5 #(
    .INIT(32'h000F0700)) 
    \FSM_sequential_tx_state[1]_i_1 
       (.I0(\FSM_sequential_tx_state[1]_i_2_n_0 ),
        .I1(tx_state[2]),
        .I2(tx_state[3]),
        .I3(tx_state[0]),
        .I4(tx_state[1]),
        .O(\FSM_sequential_tx_state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \FSM_sequential_tx_state[1]_i_2 
       (.I0(mmcm_lock_reclocked),
        .I1(time_tlock_max_reg_n_0),
        .I2(reset_time_out),
        .O(\FSM_sequential_tx_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0414040455555555)) 
    \FSM_sequential_tx_state[2]_i_1 
       (.I0(tx_state[3]),
        .I1(tx_state[2]),
        .I2(tx_state[0]),
        .I3(time_out_2ms_reg_n_0),
        .I4(tx_state[1]),
        .I5(\FSM_sequential_tx_state[2]_i_2_n_0 ),
        .O(\FSM_sequential_tx_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT5 #(
    .INIT(32'hDDDDDFDD)) 
    \FSM_sequential_tx_state[2]_i_2 
       (.I0(tx_state[2]),
        .I1(tx_state[1]),
        .I2(reset_time_out),
        .I3(time_tlock_max_reg_n_0),
        .I4(mmcm_lock_reclocked),
        .O(\FSM_sequential_tx_state[2]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \FSM_sequential_tx_state[3]_i_10 
       (.I0(wait_time_cnt_reg[8]),
        .I1(wait_time_cnt_reg[11]),
        .I2(wait_time_cnt_reg[9]),
        .I3(wait_time_cnt_reg[10]),
        .O(\FSM_sequential_tx_state[3]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_sequential_tx_state[3]_i_11 
       (.I0(wait_time_cnt_reg[0]),
        .I1(wait_time_cnt_reg[1]),
        .I2(wait_time_cnt_reg[2]),
        .I3(wait_time_cnt_reg[3]),
        .O(\FSM_sequential_tx_state[3]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_sequential_tx_state[3]_i_12 
       (.I0(wait_time_cnt_reg[7]),
        .I1(wait_time_cnt_reg[4]),
        .I2(wait_time_cnt_reg[6]),
        .I3(wait_time_cnt_reg[5]),
        .O(\FSM_sequential_tx_state[3]_i_12_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    \FSM_sequential_tx_state[3]_i_2 
       (.I0(\FSM_sequential_tx_state[3]_i_6_n_0 ),
        .I1(time_out_wait_bypass_s3),
        .I2(tx_state[3]),
        .O(\FSM_sequential_tx_state[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_sequential_tx_state[3]_i_4 
       (.I0(tx_state[2]),
        .I1(tx_state[1]),
        .O(\FSM_sequential_tx_state[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \FSM_sequential_tx_state[3]_i_5 
       (.I0(\FSM_sequential_tx_state[3]_i_9_n_0 ),
        .I1(\FSM_sequential_tx_state[3]_i_10_n_0 ),
        .I2(\FSM_sequential_tx_state[3]_i_11_n_0 ),
        .I3(\FSM_sequential_tx_state[3]_i_12_n_0 ),
        .O(\FSM_sequential_tx_state[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00B0000000000000)) 
    \FSM_sequential_tx_state[3]_i_6 
       (.I0(reset_time_out),
        .I1(time_out_500us_reg_n_0),
        .I2(tx_state[0]),
        .I3(tx_state[3]),
        .I4(tx_state[2]),
        .I5(tx_state[1]),
        .O(\FSM_sequential_tx_state[3]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_sequential_tx_state[3]_i_9 
       (.I0(wait_time_cnt_reg[12]),
        .I1(wait_time_cnt_reg[13]),
        .I2(wait_time_cnt_reg[15]),
        .I3(wait_time_cnt_reg[14]),
        .O(\FSM_sequential_tx_state[3]_i_9_n_0 ));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[0] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_tx_state[0]_i_1_n_0 ),
        .Q(tx_state[0]),
        .R(\init_wait_count_reg[7]_0 ));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[1] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_tx_state[1]_i_1_n_0 ),
        .Q(tx_state[1]),
        .R(\init_wait_count_reg[7]_0 ));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[2] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_tx_state[2]_i_1_n_0 ),
        .Q(tx_state[2]),
        .R(\init_wait_count_reg[7]_0 ));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[3] 
       (.C(init_clk_in),
        .CE(sync_cplllock_cdc_sync_n_0),
        .D(\FSM_sequential_tx_state[3]_i_2_n_0 ),
        .Q(tx_state[3]),
        .R(\init_wait_count_reg[7]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT5 #(
    .INIT(32'hFFFB4000)) 
    TXUSERRDY_i_1
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[1]),
        .I3(tx_state[2]),
        .I4(gt_txuserrdy_i),
        .O(TXUSERRDY_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TXUSERRDY_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(TXUSERRDY_i_1_n_0),
        .Q(gt_txuserrdy_i),
        .R(\init_wait_count_reg[7]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    flag2_i_1
       (.I0(cpll_reset_i),
        .I1(ack_flag),
        .O(CPLL_RESET_reg_0));
  LUT5 #(
    .INIT(32'hFEFF0010)) 
    gttxreset_i_i_1
       (.I0(tx_state[1]),
        .I1(tx_state[3]),
        .I2(tx_state[0]),
        .I3(tx_state[2]),
        .I4(gt_tx_reset_i),
        .O(gttxreset_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gttxreset_i_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gttxreset_i_i_1_n_0),
        .Q(gt_tx_reset_i),
        .R(\init_wait_count_reg[7]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \init_wait_count[0]_i_1 
       (.I0(init_wait_count_reg__0[0]),
        .O(\init_wait_count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \init_wait_count[1]_i_1 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \init_wait_count[2]_i_1 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[0]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \init_wait_count[3]_i_1 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[3]),
        .O(p_0_in__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \init_wait_count[4]_i_1 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[2]),
        .I4(init_wait_count_reg__0[3]),
        .O(p_0_in__1[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \init_wait_count[5]_i_1 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[3]),
        .I5(init_wait_count_reg__0[5]),
        .O(p_0_in__1[5]));
  LUT5 #(
    .INIT(32'h9AAAAAAA)) 
    \init_wait_count[6]_i_1 
       (.I0(init_wait_count_reg__0[6]),
        .I1(\init_wait_count[7]_i_4_n_0 ),
        .I2(init_wait_count_reg__0[4]),
        .I3(init_wait_count_reg__0[3]),
        .I4(init_wait_count_reg__0[5]),
        .O(p_0_in__1[6]));
  LUT5 #(
    .INIT(32'hFFFFEFFF)) 
    \init_wait_count[7]_i_1 
       (.I0(\init_wait_count[7]_i_3_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[5]),
        .I4(init_wait_count_reg__0[6]),
        .O(init_wait_count));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAAAAAAA)) 
    \init_wait_count[7]_i_2 
       (.I0(init_wait_count_reg__0[7]),
        .I1(init_wait_count_reg__0[5]),
        .I2(init_wait_count_reg__0[3]),
        .I3(init_wait_count_reg__0[4]),
        .I4(\init_wait_count[7]_i_4_n_0 ),
        .I5(init_wait_count_reg__0[6]),
        .O(p_0_in__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'hFFF7)) 
    \init_wait_count[7]_i_3 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[3]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .O(\init_wait_count[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \init_wait_count[7]_i_4 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[2]),
        .O(\init_wait_count[7]_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[0] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(\init_wait_count[0]_i_1_n_0 ),
        .Q(init_wait_count_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[1] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[1]),
        .Q(init_wait_count_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[2] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[2]),
        .Q(init_wait_count_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[3] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[3]),
        .Q(init_wait_count_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[4] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[4]),
        .Q(init_wait_count_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[5] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[5]),
        .Q(init_wait_count_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[6] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[6]),
        .Q(init_wait_count_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[7] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(p_0_in__1[7]),
        .Q(init_wait_count_reg__0[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    init_wait_done_i_1
       (.I0(\init_wait_count[7]_i_3_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[5]),
        .I4(init_wait_count_reg__0[6]),
        .I5(init_wait_done_reg_n_0),
        .O(init_wait_done_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    init_wait_done_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .CLR(\init_wait_count_reg[7]_0 ),
        .D(init_wait_done_i_1_n_0),
        .Q(init_wait_done_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[0]_i_1 
       (.I0(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \mmcm_lock_count[1]_i_1 
       (.I0(mmcm_lock_count_reg__0[0]),
        .I1(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[2]_i_1 
       (.I0(mmcm_lock_count_reg__0[2]),
        .I1(mmcm_lock_count_reg__0[0]),
        .I2(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[3]_i_1 
       (.I0(mmcm_lock_count_reg__0[3]),
        .I1(mmcm_lock_count_reg__0[1]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[2]),
        .O(p_0_in__2[3]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \mmcm_lock_count[4]_i_1 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .O(p_0_in__2[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \mmcm_lock_count[5]_i_1 
       (.I0(mmcm_lock_count_reg__0[5]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[4]),
        .O(p_0_in__2[5]));
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[6]_i_1 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[9]_i_4_n_0 ),
        .I2(mmcm_lock_count_reg__0[5]),
        .O(p_0_in__2[6]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[7]_i_1 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(mmcm_lock_count_reg__0[5]),
        .I2(\mmcm_lock_count[9]_i_4_n_0 ),
        .I3(mmcm_lock_count_reg__0[6]),
        .O(p_0_in__2[7]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \mmcm_lock_count[8]_i_1 
       (.I0(mmcm_lock_count_reg__0[8]),
        .I1(mmcm_lock_count_reg__0[6]),
        .I2(\mmcm_lock_count[9]_i_4_n_0 ),
        .I3(mmcm_lock_count_reg__0[5]),
        .I4(mmcm_lock_count_reg__0[7]),
        .O(p_0_in__2[8]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \mmcm_lock_count[9]_i_2 
       (.I0(mmcm_lock_count_reg__0[8]),
        .I1(mmcm_lock_count_reg__0[6]),
        .I2(\mmcm_lock_count[9]_i_4_n_0 ),
        .I3(mmcm_lock_count_reg__0[5]),
        .I4(mmcm_lock_count_reg__0[7]),
        .I5(mmcm_lock_count_reg__0[9]),
        .O(\mmcm_lock_count[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \mmcm_lock_count[9]_i_3 
       (.I0(mmcm_lock_count_reg__0[9]),
        .I1(mmcm_lock_count_reg__0[7]),
        .I2(mmcm_lock_count_reg__0[5]),
        .I3(\mmcm_lock_count[9]_i_4_n_0 ),
        .I4(mmcm_lock_count_reg__0[6]),
        .I5(mmcm_lock_count_reg__0[8]),
        .O(p_0_in__2[9]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \mmcm_lock_count[9]_i_4 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[3]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[0]),
        .I4(mmcm_lock_count_reg__0[2]),
        .O(\mmcm_lock_count[9]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[0] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[0]),
        .Q(mmcm_lock_count_reg__0[0]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[1] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[1]),
        .Q(mmcm_lock_count_reg__0[1]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[2] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[2]),
        .Q(mmcm_lock_count_reg__0[2]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[3] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[3]),
        .Q(mmcm_lock_count_reg__0[3]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[4] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[4]),
        .Q(mmcm_lock_count_reg__0[4]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[5] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[5]),
        .Q(mmcm_lock_count_reg__0[5]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[6] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[6]),
        .Q(mmcm_lock_count_reg__0[6]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[7] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[7]),
        .Q(mmcm_lock_count_reg__0[7]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[8] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[8]),
        .Q(mmcm_lock_count_reg__0[8]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[9] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__2[9]),
        .Q(mmcm_lock_count_reg__0[9]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    mmcm_lock_reclocked_i_2
       (.I0(mmcm_lock_count_reg__0[9]),
        .I1(mmcm_lock_count_reg__0[7]),
        .I2(mmcm_lock_count_reg__0[5]),
        .I3(\mmcm_lock_count[9]_i_4_n_0 ),
        .I4(mmcm_lock_count_reg__0[6]),
        .I5(mmcm_lock_count_reg__0[8]),
        .O(p_0_in));
  FDRE #(
    .INIT(1'b0)) 
    mmcm_lock_reclocked_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(sync_mmcm_lock_reclocked_cdc_sync_n_1),
        .Q(mmcm_lock_reclocked),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hAAAAAA3A)) 
    pll_reset_asserted_i_1
       (.I0(pll_reset_asserted_reg_n_0),
        .I1(tx_state[1]),
        .I2(tx_state[0]),
        .I3(tx_state[3]),
        .I4(tx_state[2]),
        .O(pll_reset_asserted_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pll_reset_asserted_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(pll_reset_asserted_i_1_n_0),
        .Q(pll_reset_asserted_reg_n_0),
        .R(\init_wait_count_reg[7]_0 ));
  LUT4 #(
    .INIT(16'hB833)) 
    reset_time_out_i_3
       (.I0(txresetdone_s3),
        .I1(tx_state[1]),
        .I2(mmcm_lock_reclocked),
        .I3(tx_state[2]),
        .O(reset_time_out_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    reset_time_out_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(sync_cplllock_cdc_sync_n_1),
        .Q(reset_time_out),
        .R(\init_wait_count_reg[7]_0 ));
  LUT5 #(
    .INIT(32'hFFEF0100)) 
    run_phase_alignment_int_i_1
       (.I0(tx_state[1]),
        .I1(tx_state[2]),
        .I2(tx_state[0]),
        .I3(tx_state[3]),
        .I4(run_phase_alignment_int),
        .O(run_phase_alignment_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int_i_1_n_0),
        .Q(run_phase_alignment_int),
        .R(\init_wait_count_reg[7]_0 ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_s3_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .D(run_phase_alignment_int_s2),
        .Q(run_phase_alignment_int_s3),
        .R(1'b0));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_7 sync_TXRESETDONE_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(txresetdone_s2),
        .p_level_in_d1_cdc_from_reg_0(s_level_out_d5_reg),
        .txfsm_txresetdone_r(txfsm_txresetdone_r));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_8 sync_cplllock_cdc_sync
       (.E(sync_cplllock_cdc_sync_n_0),
        .\FSM_sequential_tx_state_reg[0] (init_wait_done_reg_n_0),
        .\FSM_sequential_tx_state_reg[0]_0 (\FSM_sequential_tx_state[3]_i_4_n_0 ),
        .\FSM_sequential_tx_state_reg[0]_1 (\FSM_sequential_tx_state[3]_i_5_n_0 ),
        .\FSM_sequential_tx_state_reg[3] (sync_cplllock_cdc_sync_n_1),
        .\FSM_sequential_tx_state_reg[3]_i_3_0 (time_out_500us_reg_n_0),
        .\FSM_sequential_tx_state_reg[3]_i_3_1 (time_out_2ms_reg_n_0),
        .\FSM_sequential_tx_state_reg[3]_i_3_2 (time_tlock_max_reg_n_0),
        .\FSM_sequential_tx_state_reg[3]_i_3_3 (pll_reset_asserted_reg_n_0),
        .Q(tx_state),
        .init_clk_in(init_clk_in),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .reset_time_out(reset_time_out),
        .reset_time_out_reg(reset_time_out_i_3_n_0),
        .s_level_out_d1_aurora_8b10b_0_cdc_to_reg_0(s_level_out_d1_aurora_8b10b_0_cdc_to_reg),
        .txresetdone_s3(txresetdone_s3));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_9 sync_mmcm_lock_reclocked_cdc_sync
       (.SR(sync_mmcm_lock_reclocked_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .mmcm_lock_reclocked_reg(sync_mmcm_lock_reclocked_cdc_sync_n_1),
        .p_0_in(p_0_in));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync_10 sync_qplllock_cdc_sync
       (.init_clk_in(init_clk_in));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_11 sync_run_phase_alignment_int_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(run_phase_alignment_int_s2),
        .run_phase_alignment_int(run_phase_alignment_int),
        .s_level_out_d5_reg_0(s_level_out_d5_reg));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_12 sync_time_out_wait_bypass_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(time_out_wait_bypass_s2),
        .p_level_in_d1_cdc_from_reg_0(s_level_out_d5_reg),
        .time_out_wait_bypass(time_out_wait_bypass));
  top_aurora_0_0_aurora_8b10b_0_cdc_sync__parameterized0_13 sync_tx_fsm_reset_done_int_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(out),
        .s_level_out_d3_reg_0(s_level_out_d3_reg),
        .s_level_out_d5_reg_0(s_level_out_d5_reg),
        .tx_fsm_reset_done_int(tx_fsm_reset_done_int));
  LUT6 #(
    .INIT(64'h00000000AAAAAAAE)) 
    time_out_2ms_i_1__0
       (.I0(time_out_2ms_reg_n_0),
        .I1(time_out_2ms_i_2_n_0),
        .I2(time_out_2ms_i_3_n_0),
        .I3(\time_out_counter[0]_i_5__0_n_0 ),
        .I4(\time_out_counter[0]_i_4__0_n_0 ),
        .I5(reset_time_out),
        .O(time_out_2ms_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    time_out_2ms_i_2
       (.I0(time_out_counter_reg[15]),
        .I1(time_out_counter_reg[14]),
        .I2(time_out_counter_reg[12]),
        .I3(time_out_counter_reg[13]),
        .I4(time_out_counter_reg[0]),
        .I5(time_out_counter_reg[5]),
        .O(time_out_2ms_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFF7)) 
    time_out_2ms_i_3
       (.I0(time_out_counter_reg[8]),
        .I1(time_out_counter_reg[10]),
        .I2(time_out_counter_reg[1]),
        .I3(time_out_counter_reg[2]),
        .O(time_out_2ms_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_2ms_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_2ms_i_1__0_n_0),
        .Q(time_out_2ms_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AAAAAAAE)) 
    time_out_500us_i_1
       (.I0(time_out_500us_reg_n_0),
        .I1(time_out_500us_i_2_n_0),
        .I2(time_out_500us_i_3_n_0),
        .I3(time_out_500us_i_4_n_0),
        .I4(time_tlock_max_i_3__0_n_0),
        .I5(reset_time_out),
        .O(time_out_500us_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    time_out_500us_i_2
       (.I0(time_out_counter_reg[1]),
        .I1(time_out_counter_reg[2]),
        .I2(time_out_counter_reg[9]),
        .I3(time_out_counter_reg[15]),
        .I4(time_out_counter_reg[3]),
        .I5(time_out_counter_reg[4]),
        .O(time_out_500us_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    time_out_500us_i_3
       (.I0(time_out_counter_reg[5]),
        .I1(time_out_counter_reg[0]),
        .I2(time_out_counter_reg[13]),
        .I3(time_out_counter_reg[12]),
        .O(time_out_500us_i_3_n_0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    time_out_500us_i_4
       (.I0(time_out_counter_reg[14]),
        .I1(time_out_counter_reg[10]),
        .I2(time_out_counter_reg[6]),
        .I3(time_out_counter_reg[8]),
        .O(time_out_500us_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_500us_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_500us_i_1_n_0),
        .Q(time_out_500us_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \time_out_counter[0]_i_1__0 
       (.I0(\time_out_counter[0]_i_3_n_0 ),
        .I1(time_out_counter_reg[13]),
        .I2(time_out_counter_reg[12]),
        .I3(\time_out_counter[0]_i_4__0_n_0 ),
        .I4(\time_out_counter[0]_i_5__0_n_0 ),
        .O(time_out_counter));
  LUT5 #(
    .INIT(32'h00000001)) 
    \time_out_counter[0]_i_3 
       (.I0(time_out_2ms_i_3_n_0),
        .I1(time_out_counter_reg[14]),
        .I2(time_out_counter_reg[15]),
        .I3(time_out_counter_reg[0]),
        .I4(time_out_counter_reg[5]),
        .O(\time_out_counter[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \time_out_counter[0]_i_4__0 
       (.I0(time_out_counter_reg[6]),
        .I1(time_out_counter_reg[9]),
        .I2(time_out_counter_reg[11]),
        .I3(time_out_counter_reg[3]),
        .O(\time_out_counter[0]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'hFFDF)) 
    \time_out_counter[0]_i_5__0 
       (.I0(time_out_counter_reg[16]),
        .I1(time_out_counter_reg[7]),
        .I2(time_out_counter_reg[17]),
        .I3(time_out_counter_reg[4]),
        .O(\time_out_counter[0]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_6 
       (.I0(time_out_counter_reg[0]),
        .O(\time_out_counter[0]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[0] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_7 ),
        .Q(time_out_counter_reg[0]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\time_out_counter_reg[0]_i_2_n_0 ,\time_out_counter_reg[0]_i_2_n_1 ,\time_out_counter_reg[0]_i_2_n_2 ,\time_out_counter_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\time_out_counter_reg[0]_i_2_n_4 ,\time_out_counter_reg[0]_i_2_n_5 ,\time_out_counter_reg[0]_i_2_n_6 ,\time_out_counter_reg[0]_i_2_n_7 }),
        .S({time_out_counter_reg[3:1],\time_out_counter[0]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[10] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_5 ),
        .Q(time_out_counter_reg[10]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[11] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_4 ),
        .Q(time_out_counter_reg[11]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[12] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_7 ),
        .Q(time_out_counter_reg[12]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[12]_i_1 
       (.CI(\time_out_counter_reg[8]_i_1_n_0 ),
        .CO({\time_out_counter_reg[12]_i_1_n_0 ,\time_out_counter_reg[12]_i_1_n_1 ,\time_out_counter_reg[12]_i_1_n_2 ,\time_out_counter_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[12]_i_1_n_4 ,\time_out_counter_reg[12]_i_1_n_5 ,\time_out_counter_reg[12]_i_1_n_6 ,\time_out_counter_reg[12]_i_1_n_7 }),
        .S(time_out_counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[13] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_6 ),
        .Q(time_out_counter_reg[13]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[14] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_5 ),
        .Q(time_out_counter_reg[14]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[15] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_4 ),
        .Q(time_out_counter_reg[15]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[16] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_7 ),
        .Q(time_out_counter_reg[16]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[16]_i_1 
       (.CI(\time_out_counter_reg[12]_i_1_n_0 ),
        .CO({\NLW_time_out_counter_reg[16]_i_1_CO_UNCONNECTED [3:1],\time_out_counter_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_time_out_counter_reg[16]_i_1_O_UNCONNECTED [3:2],\time_out_counter_reg[16]_i_1_n_6 ,\time_out_counter_reg[16]_i_1_n_7 }),
        .S({1'b0,1'b0,time_out_counter_reg[17:16]}));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[17] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_6 ),
        .Q(time_out_counter_reg[17]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[1] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_6 ),
        .Q(time_out_counter_reg[1]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[2] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_5 ),
        .Q(time_out_counter_reg[2]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[3] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_4 ),
        .Q(time_out_counter_reg[3]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[4] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_7 ),
        .Q(time_out_counter_reg[4]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[4]_i_1 
       (.CI(\time_out_counter_reg[0]_i_2_n_0 ),
        .CO({\time_out_counter_reg[4]_i_1_n_0 ,\time_out_counter_reg[4]_i_1_n_1 ,\time_out_counter_reg[4]_i_1_n_2 ,\time_out_counter_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[4]_i_1_n_4 ,\time_out_counter_reg[4]_i_1_n_5 ,\time_out_counter_reg[4]_i_1_n_6 ,\time_out_counter_reg[4]_i_1_n_7 }),
        .S(time_out_counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[5] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_6 ),
        .Q(time_out_counter_reg[5]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[6] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_5 ),
        .Q(time_out_counter_reg[6]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[7] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_4 ),
        .Q(time_out_counter_reg[7]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[8] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_7 ),
        .Q(time_out_counter_reg[8]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[8]_i_1 
       (.CI(\time_out_counter_reg[4]_i_1_n_0 ),
        .CO({\time_out_counter_reg[8]_i_1_n_0 ,\time_out_counter_reg[8]_i_1_n_1 ,\time_out_counter_reg[8]_i_1_n_2 ,\time_out_counter_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[8]_i_1_n_4 ,\time_out_counter_reg[8]_i_1_n_5 ,\time_out_counter_reg[8]_i_1_n_6 ,\time_out_counter_reg[8]_i_1_n_7 }),
        .S(time_out_counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[9] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_6 ),
        .Q(time_out_counter_reg[9]),
        .R(reset_time_out));
  LUT4 #(
    .INIT(16'hAB00)) 
    time_out_wait_bypass_i_1
       (.I0(time_out_wait_bypass),
        .I1(tx_fsm_reset_done_int_s3),
        .I2(\wait_bypass_count[0]_i_4_n_0 ),
        .I3(run_phase_alignment_int_s3),
        .O(time_out_wait_bypass_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .D(time_out_wait_bypass_i_1_n_0),
        .Q(time_out_wait_bypass),
        .R(1'b0));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_s3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_wait_bypass_s2),
        .Q(time_out_wait_bypass_s3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0000AAAE)) 
    time_tlock_max_i_1__0
       (.I0(time_tlock_max_reg_n_0),
        .I1(\time_out_counter[0]_i_3_n_0 ),
        .I2(time_tlock_max_i_2__0_n_0),
        .I3(time_tlock_max_i_3__0_n_0),
        .I4(reset_time_out),
        .O(time_tlock_max_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFDFFF)) 
    time_tlock_max_i_2__0
       (.I0(time_out_counter_reg[4]),
        .I1(time_out_counter_reg[3]),
        .I2(time_out_counter_reg[9]),
        .I3(time_out_counter_reg[13]),
        .I4(time_out_counter_reg[6]),
        .I5(time_out_counter_reg[12]),
        .O(time_tlock_max_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    time_tlock_max_i_3__0
       (.I0(time_out_counter_reg[16]),
        .I1(time_out_counter_reg[17]),
        .I2(time_out_counter_reg[7]),
        .I3(time_out_counter_reg[11]),
        .O(time_tlock_max_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_tlock_max_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_tlock_max_i_1__0_n_0),
        .Q(time_tlock_max_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFF0200)) 
    tx_fsm_reset_done_int_i_1
       (.I0(tx_state[0]),
        .I1(tx_state[1]),
        .I2(tx_state[2]),
        .I3(tx_state[3]),
        .I4(tx_fsm_reset_done_int),
        .O(tx_fsm_reset_done_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tx_fsm_reset_done_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int_i_1_n_0),
        .Q(tx_fsm_reset_done_int),
        .R(\init_wait_count_reg[7]_0 ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    tx_fsm_reset_done_int_s3_reg
       (.C(s_level_out_d5_reg),
        .CE(1'b1),
        .D(out),
        .Q(tx_fsm_reset_done_int_s3),
        .R(1'b0));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    txresetdone_s3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(txresetdone_s2),
        .Q(txresetdone_s3),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_1 
       (.I0(run_phase_alignment_int_s3),
        .O(clear));
  LUT2 #(
    .INIT(4'h2)) 
    \wait_bypass_count[0]_i_2 
       (.I0(\wait_bypass_count[0]_i_4_n_0 ),
        .I1(tx_fsm_reset_done_int_s3),
        .O(\wait_bypass_count[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFFFFFFFFFFFFFF)) 
    \wait_bypass_count[0]_i_4 
       (.I0(\wait_bypass_count[0]_i_6_n_0 ),
        .I1(\wait_bypass_count[0]_i_7_n_0 ),
        .I2(wait_bypass_count_reg[2]),
        .I3(wait_bypass_count_reg[12]),
        .I4(wait_bypass_count_reg[9]),
        .I5(\wait_bypass_count[0]_i_8_n_0 ),
        .O(\wait_bypass_count[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_5 
       (.I0(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \wait_bypass_count[0]_i_6 
       (.I0(wait_bypass_count_reg[4]),
        .I1(wait_bypass_count_reg[8]),
        .I2(wait_bypass_count_reg[14]),
        .I3(wait_bypass_count_reg[1]),
        .O(\wait_bypass_count[0]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \wait_bypass_count[0]_i_7 
       (.I0(wait_bypass_count_reg[6]),
        .I1(wait_bypass_count_reg[5]),
        .I2(wait_bypass_count_reg[3]),
        .I3(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    \wait_bypass_count[0]_i_8 
       (.I0(wait_bypass_count_reg[11]),
        .I1(wait_bypass_count_reg[7]),
        .I2(wait_bypass_count_reg[10]),
        .I3(wait_bypass_count_reg[15]),
        .I4(wait_bypass_count_reg[13]),
        .I5(wait_bypass_count_reg[16]),
        .O(\wait_bypass_count[0]_i_8_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[0] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_7 ),
        .Q(wait_bypass_count_reg[0]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\wait_bypass_count_reg[0]_i_3_n_0 ,\wait_bypass_count_reg[0]_i_3_n_1 ,\wait_bypass_count_reg[0]_i_3_n_2 ,\wait_bypass_count_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\wait_bypass_count_reg[0]_i_3_n_4 ,\wait_bypass_count_reg[0]_i_3_n_5 ,\wait_bypass_count_reg[0]_i_3_n_6 ,\wait_bypass_count_reg[0]_i_3_n_7 }),
        .S({wait_bypass_count_reg[3:1],\wait_bypass_count[0]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[10] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[10]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[11] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[11]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[12] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[12]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[12]_i_1 
       (.CI(\wait_bypass_count_reg[8]_i_1_n_0 ),
        .CO({\wait_bypass_count_reg[12]_i_1_n_0 ,\wait_bypass_count_reg[12]_i_1_n_1 ,\wait_bypass_count_reg[12]_i_1_n_2 ,\wait_bypass_count_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[12]_i_1_n_4 ,\wait_bypass_count_reg[12]_i_1_n_5 ,\wait_bypass_count_reg[12]_i_1_n_6 ,\wait_bypass_count_reg[12]_i_1_n_7 }),
        .S(wait_bypass_count_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[13] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[13]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[14] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[14]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[15] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[15]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[16] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[16]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[16]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[16]_i_1 
       (.CI(\wait_bypass_count_reg[12]_i_1_n_0 ),
        .CO(\NLW_wait_bypass_count_reg[16]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_wait_bypass_count_reg[16]_i_1_O_UNCONNECTED [3:1],\wait_bypass_count_reg[16]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,wait_bypass_count_reg[16]}));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[1] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_6 ),
        .Q(wait_bypass_count_reg[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[2] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_5 ),
        .Q(wait_bypass_count_reg[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[3] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_4 ),
        .Q(wait_bypass_count_reg[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[4] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[4]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[4]_i_1 
       (.CI(\wait_bypass_count_reg[0]_i_3_n_0 ),
        .CO({\wait_bypass_count_reg[4]_i_1_n_0 ,\wait_bypass_count_reg[4]_i_1_n_1 ,\wait_bypass_count_reg[4]_i_1_n_2 ,\wait_bypass_count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[4]_i_1_n_4 ,\wait_bypass_count_reg[4]_i_1_n_5 ,\wait_bypass_count_reg[4]_i_1_n_6 ,\wait_bypass_count_reg[4]_i_1_n_7 }),
        .S(wait_bypass_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[5] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[5]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[6] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[6]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[7] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[7]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[8] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[8]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[8]_i_1 
       (.CI(\wait_bypass_count_reg[4]_i_1_n_0 ),
        .CO({\wait_bypass_count_reg[8]_i_1_n_0 ,\wait_bypass_count_reg[8]_i_1_n_1 ,\wait_bypass_count_reg[8]_i_1_n_2 ,\wait_bypass_count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[8]_i_1_n_4 ,\wait_bypass_count_reg[8]_i_1_n_5 ,\wait_bypass_count_reg[8]_i_1_n_6 ,\wait_bypass_count_reg[8]_i_1_n_7 }),
        .S(wait_bypass_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[9] 
       (.C(s_level_out_d5_reg),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[9]),
        .R(clear));
  LUT4 #(
    .INIT(16'h0444)) 
    \wait_time_cnt[0]_i_1__0 
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[1]),
        .I3(tx_state[2]),
        .O(\wait_time_cnt[0]_i_1__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_2 
       (.I0(\FSM_sequential_tx_state[3]_i_5_n_0 ),
        .O(sel));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_4 
       (.I0(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_5 
       (.I0(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_6 
       (.I0(wait_time_cnt_reg[1]),
        .O(\wait_time_cnt[0]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_7 
       (.I0(wait_time_cnt_reg[0]),
        .O(\wait_time_cnt[0]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_2 
       (.I0(wait_time_cnt_reg[15]),
        .O(\wait_time_cnt[12]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_3 
       (.I0(wait_time_cnt_reg[14]),
        .O(\wait_time_cnt[12]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_4 
       (.I0(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[12]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_5 
       (.I0(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[12]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_2 
       (.I0(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[4]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_3 
       (.I0(wait_time_cnt_reg[6]),
        .O(\wait_time_cnt[4]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_4 
       (.I0(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[4]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_5 
       (.I0(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[4]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_2 
       (.I0(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[8]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_3 
       (.I0(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[8]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_4 
       (.I0(wait_time_cnt_reg[9]),
        .O(\wait_time_cnt[8]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_5 
       (.I0(wait_time_cnt_reg[8]),
        .O(\wait_time_cnt[8]_i_5_n_0 ));
  FDRE \wait_time_cnt_reg[0] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_7 ),
        .Q(wait_time_cnt_reg[0]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\wait_time_cnt_reg[0]_i_3_n_0 ,\wait_time_cnt_reg[0]_i_3_n_1 ,\wait_time_cnt_reg[0]_i_3_n_2 ,\wait_time_cnt_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[0]_i_3_n_4 ,\wait_time_cnt_reg[0]_i_3_n_5 ,\wait_time_cnt_reg[0]_i_3_n_6 ,\wait_time_cnt_reg[0]_i_3_n_7 }),
        .S({\wait_time_cnt[0]_i_4_n_0 ,\wait_time_cnt[0]_i_5_n_0 ,\wait_time_cnt[0]_i_6_n_0 ,\wait_time_cnt[0]_i_7_n_0 }));
  FDRE \wait_time_cnt_reg[10] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[10]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[11] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[11]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[12] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[12]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[12]_i_1 
       (.CI(\wait_time_cnt_reg[8]_i_1_n_0 ),
        .CO({\NLW_wait_time_cnt_reg[12]_i_1_CO_UNCONNECTED [3],\wait_time_cnt_reg[12]_i_1_n_1 ,\wait_time_cnt_reg[12]_i_1_n_2 ,\wait_time_cnt_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[12]_i_1_n_4 ,\wait_time_cnt_reg[12]_i_1_n_5 ,\wait_time_cnt_reg[12]_i_1_n_6 ,\wait_time_cnt_reg[12]_i_1_n_7 }),
        .S({\wait_time_cnt[12]_i_2_n_0 ,\wait_time_cnt[12]_i_3_n_0 ,\wait_time_cnt[12]_i_4_n_0 ,\wait_time_cnt[12]_i_5_n_0 }));
  FDRE \wait_time_cnt_reg[13] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[13]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[14] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[14]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[15] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[15]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[1] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_6 ),
        .Q(wait_time_cnt_reg[1]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[2] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_5 ),
        .Q(wait_time_cnt_reg[2]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[3] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_4 ),
        .Q(wait_time_cnt_reg[3]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[4] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[4]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[4]_i_1 
       (.CI(\wait_time_cnt_reg[0]_i_3_n_0 ),
        .CO({\wait_time_cnt_reg[4]_i_1_n_0 ,\wait_time_cnt_reg[4]_i_1_n_1 ,\wait_time_cnt_reg[4]_i_1_n_2 ,\wait_time_cnt_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[4]_i_1_n_4 ,\wait_time_cnt_reg[4]_i_1_n_5 ,\wait_time_cnt_reg[4]_i_1_n_6 ,\wait_time_cnt_reg[4]_i_1_n_7 }),
        .S({\wait_time_cnt[4]_i_2_n_0 ,\wait_time_cnt[4]_i_3_n_0 ,\wait_time_cnt[4]_i_4_n_0 ,\wait_time_cnt[4]_i_5_n_0 }));
  FDSE \wait_time_cnt_reg[5] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[5]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[6] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[6]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[7] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[7]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[8] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[8]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[8]_i_1 
       (.CI(\wait_time_cnt_reg[4]_i_1_n_0 ),
        .CO({\wait_time_cnt_reg[8]_i_1_n_0 ,\wait_time_cnt_reg[8]_i_1_n_1 ,\wait_time_cnt_reg[8]_i_1_n_2 ,\wait_time_cnt_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[8]_i_1_n_4 ,\wait_time_cnt_reg[8]_i_1_n_5 ,\wait_time_cnt_reg[8]_i_1_n_6 ,\wait_time_cnt_reg[8]_i_1_n_7 }),
        .S({\wait_time_cnt[8]_i_2_n_0 ,\wait_time_cnt[8]_i_3_n_0 ,\wait_time_cnt[8]_i_4_n_0 ,\wait_time_cnt[8]_i_5_n_0 }));
  FDSE \wait_time_cnt_reg[9] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[9]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
endmodule

(* CHECK_LICENSE_TYPE = "fifo_loop,fifo_generator_v13_2_3,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "fifo_loop" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_3,Vivado 2018.3" *) 
module top_aurora_0_0_fifo_loop
   (wr_rst_busy,
    rd_rst_busy,
    s_aclk,
    s_aresetn,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tlast,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tlast);
  output wr_rst_busy;
  output rd_rst_busy;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 slave_aclk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME slave_aclk, ASSOCIATED_BUSIF S_AXIS:S_AXI, ASSOCIATED_RESET s_aresetn, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input s_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 slave_aresetn RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME slave_aresetn, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input s_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TVALID" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME S_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, FREQ_HZ 100000000, PHASE 0.000, LAYERED_METADATA undef, INSERT_VIP 0" *) input s_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TREADY" *) output s_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TDATA" *) input [31:0]s_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TLAST" *) input s_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TVALID" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME M_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 1, FREQ_HZ 100000000, PHASE 0.000, LAYERED_METADATA undef, INSERT_VIP 0" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TREADY" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TDATA" *) output [31:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TLAST" *) output m_axis_tlast;

  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire rd_rst_busy;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_empty_UNCONNECTED;
  wire NLW_U0_full_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [17:0]NLW_U0_dout_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "1" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "32" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "1" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "18" *) 
  (* C_DIN_WIDTH_AXIS = "33" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "18" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "1" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "virtex7" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "1" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "2" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "2" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "2" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "1" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "4kx4" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "14" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "14" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "14" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  top_aurora_0_0_fifo_generator_v13_2_3 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dout(NLW_U0_dout_UNCONNECTED[17:0]),
        .empty(NLW_U0_empty_UNCONNECTED),
        .full(NLW_U0_full_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[0]),
        .m_axis_tvalid(m_axis_tvalid),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(1'b0),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(s_aclk),
        .s_aclk_en(1'b0),
        .s_aresetn(s_aresetn),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser(1'b0),
        .s_axis_tvalid(s_axis_tvalid),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(1'b0),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "post" *) 
module top_aurora_0_0_post
   (m_axis_tdata,
    sys_reset_out,
    user_clk_out,
    m_axi_rx_tlast,
    m_axi_rx_tvalid,
    m_axi_rx_tdata);
  output [31:0]m_axis_tdata;
  input sys_reset_out;
  input user_clk_out;
  input m_axi_rx_tlast;
  input m_axi_rx_tvalid;
  input [0:31]m_axi_rx_tdata;

  wire [0:31]m_axi_rx_tdata;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire [31:0]m_axis_tdata;
  wire stat_cnt_pkts_rdy_i_i_1_n_0;
  wire stat_cnt_pkts_rdy_i_reg_n_0;
  wire state_cnt_pkts;
  wire state_cnt_pkts_i_1_n_0;
  wire sys_reset_out;
  wire user_clk_out;

  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[0]_INST_0 
       (.I0(m_axi_rx_tdata[31]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[0]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[10]_INST_0 
       (.I0(m_axi_rx_tdata[21]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[10]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[11]_INST_0 
       (.I0(m_axi_rx_tdata[20]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[11]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[12]_INST_0 
       (.I0(m_axi_rx_tdata[19]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[12]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[13]_INST_0 
       (.I0(m_axi_rx_tdata[18]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[13]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[14]_INST_0 
       (.I0(m_axi_rx_tdata[17]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[14]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[15]_INST_0 
       (.I0(m_axi_rx_tdata[16]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[15]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[16]_INST_0 
       (.I0(m_axi_rx_tdata[15]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[16]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[17]_INST_0 
       (.I0(m_axi_rx_tdata[14]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[17]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[18]_INST_0 
       (.I0(m_axi_rx_tdata[13]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[18]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[19]_INST_0 
       (.I0(m_axi_rx_tdata[12]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[19]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[1]_INST_0 
       (.I0(m_axi_rx_tdata[30]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[1]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[20]_INST_0 
       (.I0(m_axi_rx_tdata[11]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[20]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[21]_INST_0 
       (.I0(m_axi_rx_tdata[10]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[21]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[22]_INST_0 
       (.I0(m_axi_rx_tdata[9]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[22]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[23]_INST_0 
       (.I0(m_axi_rx_tdata[8]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[23]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[24]_INST_0 
       (.I0(m_axi_rx_tdata[7]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[24]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[25]_INST_0 
       (.I0(m_axi_rx_tdata[6]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[25]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[26]_INST_0 
       (.I0(m_axi_rx_tdata[5]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[26]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[27]_INST_0 
       (.I0(m_axi_rx_tdata[4]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[27]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[28]_INST_0 
       (.I0(m_axi_rx_tdata[3]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[28]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[29]_INST_0 
       (.I0(m_axi_rx_tdata[2]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[29]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[2]_INST_0 
       (.I0(m_axi_rx_tdata[29]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[2]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[30]_INST_0 
       (.I0(m_axi_rx_tdata[1]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[30]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[31]_INST_0 
       (.I0(m_axi_rx_tdata[0]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[31]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[3]_INST_0 
       (.I0(m_axi_rx_tdata[28]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[3]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[4]_INST_0 
       (.I0(m_axi_rx_tdata[27]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[4]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[5]_INST_0 
       (.I0(m_axi_rx_tdata[26]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[5]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[6]_INST_0 
       (.I0(m_axi_rx_tdata[25]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[6]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[7]_INST_0 
       (.I0(m_axi_rx_tdata[24]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[7]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[8]_INST_0 
       (.I0(m_axi_rx_tdata[23]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[8]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \m_axis_tdata[9]_INST_0 
       (.I0(m_axi_rx_tdata[22]),
        .I1(m_axi_rx_tlast),
        .I2(stat_cnt_pkts_rdy_i_reg_n_0),
        .I3(m_axi_rx_tvalid),
        .O(m_axis_tdata[9]));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    stat_cnt_pkts_rdy_i_i_1
       (.I0(state_cnt_pkts),
        .I1(m_axi_rx_tlast),
        .I2(m_axi_rx_tvalid),
        .O(stat_cnt_pkts_rdy_i_i_1_n_0));
  FDRE stat_cnt_pkts_rdy_i_reg
       (.C(user_clk_out),
        .CE(1'b1),
        .D(stat_cnt_pkts_rdy_i_i_1_n_0),
        .Q(stat_cnt_pkts_rdy_i_reg_n_0),
        .R(sys_reset_out));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h62)) 
    state_cnt_pkts_i_1
       (.I0(state_cnt_pkts),
        .I1(m_axi_rx_tvalid),
        .I2(m_axi_rx_tlast),
        .O(state_cnt_pkts_i_1_n_0));
  FDRE state_cnt_pkts_reg
       (.C(user_clk_out),
        .CE(1'b1),
        .D(state_cnt_pkts_i_1_n_0),
        .Q(state_cnt_pkts),
        .R(sys_reset_out));
endmodule

(* ORIG_REF_NAME = "pre" *) 
module top_aurora_0_0_pre
   (passthrough_reg_0,
    s_axi_tx_tvalid,
    s_axi_tx_tlast,
    s_axi_tx_tdata,
    sys_reset_out,
    user_clk_out,
    m_axis_tvalid,
    \storage_r_reg[15] ,
    s_axis_tvalid,
    m_axis_tlast,
    s_axis_tlast,
    m_axis_tdata,
    s_axis_tdata);
  output passthrough_reg_0;
  output s_axi_tx_tvalid;
  output s_axi_tx_tlast;
  output [0:31]s_axi_tx_tdata;
  input sys_reset_out;
  input user_clk_out;
  input m_axis_tvalid;
  input \storage_r_reg[15] ;
  input s_axis_tvalid;
  input m_axis_tlast;
  input s_axis_tlast;
  input [31:0]m_axis_tdata;
  input [31:0]s_axis_tdata;

  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tvalid;
  wire passthrough_i_1_n_0;
  wire passthrough_reg_0;
  wire [0:31]s_axi_tx_tdata;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tvalid;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;
  wire \seq_ctr[0]_i_1_n_0 ;
  wire \seq_ctr[0]_i_3_n_0 ;
  wire [15:0]seq_ctr_reg;
  wire \seq_ctr_reg[0]_i_2_n_0 ;
  wire \seq_ctr_reg[0]_i_2_n_1 ;
  wire \seq_ctr_reg[0]_i_2_n_2 ;
  wire \seq_ctr_reg[0]_i_2_n_3 ;
  wire \seq_ctr_reg[0]_i_2_n_4 ;
  wire \seq_ctr_reg[0]_i_2_n_5 ;
  wire \seq_ctr_reg[0]_i_2_n_6 ;
  wire \seq_ctr_reg[0]_i_2_n_7 ;
  wire \seq_ctr_reg[12]_i_1_n_1 ;
  wire \seq_ctr_reg[12]_i_1_n_2 ;
  wire \seq_ctr_reg[12]_i_1_n_3 ;
  wire \seq_ctr_reg[12]_i_1_n_4 ;
  wire \seq_ctr_reg[12]_i_1_n_5 ;
  wire \seq_ctr_reg[12]_i_1_n_6 ;
  wire \seq_ctr_reg[12]_i_1_n_7 ;
  wire \seq_ctr_reg[4]_i_1_n_0 ;
  wire \seq_ctr_reg[4]_i_1_n_1 ;
  wire \seq_ctr_reg[4]_i_1_n_2 ;
  wire \seq_ctr_reg[4]_i_1_n_3 ;
  wire \seq_ctr_reg[4]_i_1_n_4 ;
  wire \seq_ctr_reg[4]_i_1_n_5 ;
  wire \seq_ctr_reg[4]_i_1_n_6 ;
  wire \seq_ctr_reg[4]_i_1_n_7 ;
  wire \seq_ctr_reg[8]_i_1_n_0 ;
  wire \seq_ctr_reg[8]_i_1_n_1 ;
  wire \seq_ctr_reg[8]_i_1_n_2 ;
  wire \seq_ctr_reg[8]_i_1_n_3 ;
  wire \seq_ctr_reg[8]_i_1_n_4 ;
  wire \seq_ctr_reg[8]_i_1_n_5 ;
  wire \seq_ctr_reg[8]_i_1_n_6 ;
  wire \seq_ctr_reg[8]_i_1_n_7 ;
  wire state_i_1_n_0;
  wire state_reg_n_0;
  wire \storage_r_reg[15] ;
  wire sys_reset_out;
  wire user_clk_out;
  wire [3:3]\NLW_seq_ctr_reg[12]_i_1_CO_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_1
       (.I0(m_axis_tdata[31]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[31]),
        .O(s_axi_tx_tdata[0]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_10
       (.I0(m_axis_tdata[22]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[22]),
        .O(s_axi_tx_tdata[9]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_11
       (.I0(m_axis_tdata[21]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[21]),
        .O(s_axi_tx_tdata[10]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_12
       (.I0(m_axis_tdata[20]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[20]),
        .O(s_axi_tx_tdata[11]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_13
       (.I0(m_axis_tdata[19]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[19]),
        .O(s_axi_tx_tdata[12]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_14
       (.I0(m_axis_tdata[18]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[18]),
        .O(s_axi_tx_tdata[13]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_15
       (.I0(m_axis_tdata[17]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[17]),
        .O(s_axi_tx_tdata[14]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_16
       (.I0(m_axis_tdata[16]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[16]),
        .O(s_axi_tx_tdata[15]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_17
       (.I0(m_axis_tdata[15]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[15]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[15]),
        .O(s_axi_tx_tdata[16]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_18
       (.I0(m_axis_tdata[14]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[14]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[14]),
        .O(s_axi_tx_tdata[17]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_19
       (.I0(m_axis_tdata[13]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[13]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[13]),
        .O(s_axi_tx_tdata[18]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_2
       (.I0(m_axis_tdata[30]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[30]),
        .O(s_axi_tx_tdata[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_20
       (.I0(m_axis_tdata[12]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[12]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[12]),
        .O(s_axi_tx_tdata[19]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_21
       (.I0(m_axis_tdata[11]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[11]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[11]),
        .O(s_axi_tx_tdata[20]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_22
       (.I0(m_axis_tdata[10]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[10]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[10]),
        .O(s_axi_tx_tdata[21]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_23
       (.I0(m_axis_tdata[9]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[9]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[9]),
        .O(s_axi_tx_tdata[22]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_24
       (.I0(m_axis_tdata[8]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[8]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[8]),
        .O(s_axi_tx_tdata[23]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_25
       (.I0(m_axis_tdata[7]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[7]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[7]),
        .O(s_axi_tx_tdata[24]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_26
       (.I0(m_axis_tdata[6]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[6]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[6]),
        .O(s_axi_tx_tdata[25]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_27
       (.I0(m_axis_tdata[5]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[5]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[5]),
        .O(s_axi_tx_tdata[26]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_28
       (.I0(m_axis_tdata[4]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[4]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[4]),
        .O(s_axi_tx_tdata[27]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_29
       (.I0(m_axis_tdata[3]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[3]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[3]),
        .O(s_axi_tx_tdata[28]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_3
       (.I0(m_axis_tdata[29]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[29]),
        .O(s_axi_tx_tdata[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_30
       (.I0(m_axis_tdata[2]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[2]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[2]),
        .O(s_axi_tx_tdata[29]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_31
       (.I0(m_axis_tdata[1]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[1]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[1]),
        .O(s_axi_tx_tdata[30]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    aurora_0_i_32
       (.I0(m_axis_tdata[0]),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tdata[0]),
        .I3(passthrough_reg_0),
        .I4(seq_ctr_reg[0]),
        .O(s_axi_tx_tdata[31]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'hB8BB)) 
    aurora_0_i_33
       (.I0(m_axis_tvalid),
        .I1(\storage_r_reg[15] ),
        .I2(s_axis_tvalid),
        .I3(passthrough_reg_0),
        .O(s_axi_tx_tvalid));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    aurora_0_i_34
       (.I0(m_axis_tlast),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .O(s_axi_tx_tlast));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_4
       (.I0(m_axis_tdata[28]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[28]),
        .O(s_axi_tx_tdata[3]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_5
       (.I0(m_axis_tdata[27]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[27]),
        .O(s_axi_tx_tdata[4]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_6
       (.I0(m_axis_tdata[26]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[26]),
        .O(s_axi_tx_tdata[5]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_7
       (.I0(m_axis_tdata[25]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[25]),
        .O(s_axi_tx_tdata[6]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_8
       (.I0(m_axis_tdata[24]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[24]),
        .O(s_axi_tx_tdata[7]));
  LUT4 #(
    .INIT(16'hB888)) 
    aurora_0_i_9
       (.I0(m_axis_tdata[23]),
        .I1(\storage_r_reg[15] ),
        .I2(passthrough_reg_0),
        .I3(s_axis_tdata[23]),
        .O(s_axi_tx_tdata[8]));
  LUT4 #(
    .INIT(16'hBFAA)) 
    passthrough_i_1
       (.I0(state_reg_n_0),
        .I1(s_axis_tlast),
        .I2(s_axis_tvalid),
        .I3(passthrough_reg_0),
        .O(passthrough_i_1_n_0));
  FDSE passthrough_reg
       (.C(user_clk_out),
        .CE(1'b1),
        .D(passthrough_i_1_n_0),
        .Q(passthrough_reg_0),
        .S(sys_reset_out));
  LUT3 #(
    .INIT(8'h08)) 
    \seq_ctr[0]_i_1 
       (.I0(s_axis_tlast),
        .I1(s_axis_tvalid),
        .I2(state_reg_n_0),
        .O(\seq_ctr[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \seq_ctr[0]_i_3 
       (.I0(seq_ctr_reg[0]),
        .O(\seq_ctr[0]_i_3_n_0 ));
  FDSE \seq_ctr_reg[0] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[0]_i_2_n_7 ),
        .Q(seq_ctr_reg[0]),
        .S(sys_reset_out));
  CARRY4 \seq_ctr_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\seq_ctr_reg[0]_i_2_n_0 ,\seq_ctr_reg[0]_i_2_n_1 ,\seq_ctr_reg[0]_i_2_n_2 ,\seq_ctr_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\seq_ctr_reg[0]_i_2_n_4 ,\seq_ctr_reg[0]_i_2_n_5 ,\seq_ctr_reg[0]_i_2_n_6 ,\seq_ctr_reg[0]_i_2_n_7 }),
        .S({seq_ctr_reg[3:1],\seq_ctr[0]_i_3_n_0 }));
  FDRE \seq_ctr_reg[10] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[8]_i_1_n_5 ),
        .Q(seq_ctr_reg[10]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[11] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[8]_i_1_n_4 ),
        .Q(seq_ctr_reg[11]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[12] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[12]_i_1_n_7 ),
        .Q(seq_ctr_reg[12]),
        .R(sys_reset_out));
  CARRY4 \seq_ctr_reg[12]_i_1 
       (.CI(\seq_ctr_reg[8]_i_1_n_0 ),
        .CO({\NLW_seq_ctr_reg[12]_i_1_CO_UNCONNECTED [3],\seq_ctr_reg[12]_i_1_n_1 ,\seq_ctr_reg[12]_i_1_n_2 ,\seq_ctr_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\seq_ctr_reg[12]_i_1_n_4 ,\seq_ctr_reg[12]_i_1_n_5 ,\seq_ctr_reg[12]_i_1_n_6 ,\seq_ctr_reg[12]_i_1_n_7 }),
        .S(seq_ctr_reg[15:12]));
  FDRE \seq_ctr_reg[13] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[12]_i_1_n_6 ),
        .Q(seq_ctr_reg[13]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[14] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[12]_i_1_n_5 ),
        .Q(seq_ctr_reg[14]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[15] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[12]_i_1_n_4 ),
        .Q(seq_ctr_reg[15]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[1] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[0]_i_2_n_6 ),
        .Q(seq_ctr_reg[1]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[2] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[0]_i_2_n_5 ),
        .Q(seq_ctr_reg[2]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[3] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[0]_i_2_n_4 ),
        .Q(seq_ctr_reg[3]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[4] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[4]_i_1_n_7 ),
        .Q(seq_ctr_reg[4]),
        .R(sys_reset_out));
  CARRY4 \seq_ctr_reg[4]_i_1 
       (.CI(\seq_ctr_reg[0]_i_2_n_0 ),
        .CO({\seq_ctr_reg[4]_i_1_n_0 ,\seq_ctr_reg[4]_i_1_n_1 ,\seq_ctr_reg[4]_i_1_n_2 ,\seq_ctr_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\seq_ctr_reg[4]_i_1_n_4 ,\seq_ctr_reg[4]_i_1_n_5 ,\seq_ctr_reg[4]_i_1_n_6 ,\seq_ctr_reg[4]_i_1_n_7 }),
        .S(seq_ctr_reg[7:4]));
  FDRE \seq_ctr_reg[5] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[4]_i_1_n_6 ),
        .Q(seq_ctr_reg[5]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[6] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[4]_i_1_n_5 ),
        .Q(seq_ctr_reg[6]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[7] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[4]_i_1_n_4 ),
        .Q(seq_ctr_reg[7]),
        .R(sys_reset_out));
  FDRE \seq_ctr_reg[8] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[8]_i_1_n_7 ),
        .Q(seq_ctr_reg[8]),
        .R(sys_reset_out));
  CARRY4 \seq_ctr_reg[8]_i_1 
       (.CI(\seq_ctr_reg[4]_i_1_n_0 ),
        .CO({\seq_ctr_reg[8]_i_1_n_0 ,\seq_ctr_reg[8]_i_1_n_1 ,\seq_ctr_reg[8]_i_1_n_2 ,\seq_ctr_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\seq_ctr_reg[8]_i_1_n_4 ,\seq_ctr_reg[8]_i_1_n_5 ,\seq_ctr_reg[8]_i_1_n_6 ,\seq_ctr_reg[8]_i_1_n_7 }),
        .S(seq_ctr_reg[11:8]));
  FDRE \seq_ctr_reg[9] 
       (.C(user_clk_out),
        .CE(\seq_ctr[0]_i_1_n_0 ),
        .D(\seq_ctr_reg[8]_i_1_n_6 ),
        .Q(seq_ctr_reg[9]),
        .R(sys_reset_out));
  LUT3 #(
    .INIT(8'h40)) 
    state_i_1
       (.I0(state_reg_n_0),
        .I1(s_axis_tlast),
        .I2(s_axis_tvalid),
        .O(state_i_1_n_0));
  FDRE state_reg
       (.C(user_clk_out),
        .CE(1'b1),
        .D(state_i_1_n_0),
        .Q(state_reg_n_0),
        .R(sys_reset_out));
endmodule

(* CHECK_LICENSE_TYPE = "vio_aurora,vio,{}" *) (* ORIG_REF_NAME = "vio_aurora" *) (* X_CORE_INFO = "vio,Vivado 2018.3" *) 
module top_aurora_0_0_vio_aurora
   (clk,
    probe_in0,
    probe_out0);
  input clk;
  input [31:0]probe_in0;
  output [31:0]probe_out0;

  wire clk;
  wire [31:0]probe_in0;
  wire [31:0]probe_out0;
  wire [0:0]NLW_inst_probe_out1_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out10_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out100_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out101_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out102_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out103_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out104_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out105_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out106_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out107_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out108_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out109_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out11_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out110_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out111_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out112_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out113_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out114_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out115_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out116_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out117_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out118_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out119_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out12_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out120_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out121_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out122_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out123_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out124_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out125_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out126_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out127_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out128_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out129_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out13_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out130_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out131_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out132_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out133_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out134_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out135_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out136_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out137_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out138_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out139_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out14_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out140_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out141_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out142_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out143_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out144_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out145_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out146_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out147_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out148_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out149_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out15_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out150_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out151_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out152_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out153_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out154_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out155_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out156_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out157_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out158_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out159_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out16_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out160_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out161_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out162_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out163_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out164_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out165_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out166_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out167_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out168_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out169_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out17_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out170_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out171_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out172_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out173_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out174_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out175_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out176_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out177_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out178_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out179_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out18_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out180_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out181_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out182_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out183_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out184_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out185_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out186_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out187_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out188_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out189_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out19_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out190_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out191_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out192_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out193_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out194_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out195_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out196_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out197_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out198_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out199_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out2_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out20_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out200_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out201_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out202_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out203_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out204_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out205_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out206_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out207_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out208_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out209_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out21_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out210_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out211_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out212_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out213_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out214_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out215_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out216_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out217_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out218_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out219_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out22_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out220_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out221_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out222_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out223_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out224_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out225_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out226_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out227_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out228_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out229_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out23_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out230_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out231_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out232_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out233_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out234_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out235_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out236_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out237_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out238_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out239_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out24_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out240_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out241_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out242_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out243_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out244_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out245_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out246_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out247_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out248_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out249_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out25_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out250_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out251_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out252_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out253_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out254_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out255_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out26_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out27_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out28_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out29_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out3_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out30_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out31_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out32_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out33_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out34_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out35_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out36_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out37_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out38_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out39_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out4_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out40_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out41_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out42_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out43_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out44_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out45_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out46_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out47_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out48_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out49_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out5_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out50_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out51_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out52_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out53_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out54_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out55_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out56_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out57_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out58_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out59_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out6_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out60_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out61_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out62_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out63_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out64_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out65_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out66_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out67_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out68_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out69_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out7_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out70_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out71_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out72_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out73_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out74_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out75_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out76_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out77_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out78_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out79_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out8_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out80_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out81_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out82_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out83_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out84_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out85_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out86_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out87_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out88_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out89_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out9_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out90_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out91_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out92_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out93_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out94_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out95_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out96_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out97_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out98_UNCONNECTED;
  wire [0:0]NLW_inst_probe_out99_UNCONNECTED;
  wire [16:0]NLW_inst_sl_oport0_UNCONNECTED;

  (* C_BUILD_REVISION = "0" *) 
  (* C_BUS_ADDR_WIDTH = "17" *) 
  (* C_BUS_DATA_WIDTH = "16" *) 
  (* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_MAJOR_VER = "2" *) 
  (* C_CORE_MINOR_ALPHA_VER = "97" *) 
  (* C_CORE_MINOR_VER = "0" *) 
  (* C_CORE_TYPE = "2" *) 
  (* C_CSE_DRV_VER = "1" *) 
  (* C_EN_PROBE_IN_ACTIVITY = "1" *) 
  (* C_EN_SYNCHRONIZATION = "1" *) 
  (* C_MAJOR_VERSION = "2013" *) 
  (* C_MAX_NUM_PROBE = "256" *) 
  (* C_MAX_WIDTH_PER_PROBE = "256" *) 
  (* C_MINOR_VERSION = "1" *) 
  (* C_NEXT_SLAVE = "0" *) 
  (* C_NUM_PROBE_IN = "1" *) 
  (* C_NUM_PROBE_OUT = "1" *) 
  (* C_PIPE_IFACE = "0" *) 
  (* C_PROBE_IN0_WIDTH = "32" *) 
  (* C_PROBE_IN100_WIDTH = "1" *) 
  (* C_PROBE_IN101_WIDTH = "1" *) 
  (* C_PROBE_IN102_WIDTH = "1" *) 
  (* C_PROBE_IN103_WIDTH = "1" *) 
  (* C_PROBE_IN104_WIDTH = "1" *) 
  (* C_PROBE_IN105_WIDTH = "1" *) 
  (* C_PROBE_IN106_WIDTH = "1" *) 
  (* C_PROBE_IN107_WIDTH = "1" *) 
  (* C_PROBE_IN108_WIDTH = "1" *) 
  (* C_PROBE_IN109_WIDTH = "1" *) 
  (* C_PROBE_IN10_WIDTH = "1" *) 
  (* C_PROBE_IN110_WIDTH = "1" *) 
  (* C_PROBE_IN111_WIDTH = "1" *) 
  (* C_PROBE_IN112_WIDTH = "1" *) 
  (* C_PROBE_IN113_WIDTH = "1" *) 
  (* C_PROBE_IN114_WIDTH = "1" *) 
  (* C_PROBE_IN115_WIDTH = "1" *) 
  (* C_PROBE_IN116_WIDTH = "1" *) 
  (* C_PROBE_IN117_WIDTH = "1" *) 
  (* C_PROBE_IN118_WIDTH = "1" *) 
  (* C_PROBE_IN119_WIDTH = "1" *) 
  (* C_PROBE_IN11_WIDTH = "1" *) 
  (* C_PROBE_IN120_WIDTH = "1" *) 
  (* C_PROBE_IN121_WIDTH = "1" *) 
  (* C_PROBE_IN122_WIDTH = "1" *) 
  (* C_PROBE_IN123_WIDTH = "1" *) 
  (* C_PROBE_IN124_WIDTH = "1" *) 
  (* C_PROBE_IN125_WIDTH = "1" *) 
  (* C_PROBE_IN126_WIDTH = "1" *) 
  (* C_PROBE_IN127_WIDTH = "1" *) 
  (* C_PROBE_IN128_WIDTH = "1" *) 
  (* C_PROBE_IN129_WIDTH = "1" *) 
  (* C_PROBE_IN12_WIDTH = "1" *) 
  (* C_PROBE_IN130_WIDTH = "1" *) 
  (* C_PROBE_IN131_WIDTH = "1" *) 
  (* C_PROBE_IN132_WIDTH = "1" *) 
  (* C_PROBE_IN133_WIDTH = "1" *) 
  (* C_PROBE_IN134_WIDTH = "1" *) 
  (* C_PROBE_IN135_WIDTH = "1" *) 
  (* C_PROBE_IN136_WIDTH = "1" *) 
  (* C_PROBE_IN137_WIDTH = "1" *) 
  (* C_PROBE_IN138_WIDTH = "1" *) 
  (* C_PROBE_IN139_WIDTH = "1" *) 
  (* C_PROBE_IN13_WIDTH = "1" *) 
  (* C_PROBE_IN140_WIDTH = "1" *) 
  (* C_PROBE_IN141_WIDTH = "1" *) 
  (* C_PROBE_IN142_WIDTH = "1" *) 
  (* C_PROBE_IN143_WIDTH = "1" *) 
  (* C_PROBE_IN144_WIDTH = "1" *) 
  (* C_PROBE_IN145_WIDTH = "1" *) 
  (* C_PROBE_IN146_WIDTH = "1" *) 
  (* C_PROBE_IN147_WIDTH = "1" *) 
  (* C_PROBE_IN148_WIDTH = "1" *) 
  (* C_PROBE_IN149_WIDTH = "1" *) 
  (* C_PROBE_IN14_WIDTH = "1" *) 
  (* C_PROBE_IN150_WIDTH = "1" *) 
  (* C_PROBE_IN151_WIDTH = "1" *) 
  (* C_PROBE_IN152_WIDTH = "1" *) 
  (* C_PROBE_IN153_WIDTH = "1" *) 
  (* C_PROBE_IN154_WIDTH = "1" *) 
  (* C_PROBE_IN155_WIDTH = "1" *) 
  (* C_PROBE_IN156_WIDTH = "1" *) 
  (* C_PROBE_IN157_WIDTH = "1" *) 
  (* C_PROBE_IN158_WIDTH = "1" *) 
  (* C_PROBE_IN159_WIDTH = "1" *) 
  (* C_PROBE_IN15_WIDTH = "1" *) 
  (* C_PROBE_IN160_WIDTH = "1" *) 
  (* C_PROBE_IN161_WIDTH = "1" *) 
  (* C_PROBE_IN162_WIDTH = "1" *) 
  (* C_PROBE_IN163_WIDTH = "1" *) 
  (* C_PROBE_IN164_WIDTH = "1" *) 
  (* C_PROBE_IN165_WIDTH = "1" *) 
  (* C_PROBE_IN166_WIDTH = "1" *) 
  (* C_PROBE_IN167_WIDTH = "1" *) 
  (* C_PROBE_IN168_WIDTH = "1" *) 
  (* C_PROBE_IN169_WIDTH = "1" *) 
  (* C_PROBE_IN16_WIDTH = "1" *) 
  (* C_PROBE_IN170_WIDTH = "1" *) 
  (* C_PROBE_IN171_WIDTH = "1" *) 
  (* C_PROBE_IN172_WIDTH = "1" *) 
  (* C_PROBE_IN173_WIDTH = "1" *) 
  (* C_PROBE_IN174_WIDTH = "1" *) 
  (* C_PROBE_IN175_WIDTH = "1" *) 
  (* C_PROBE_IN176_WIDTH = "1" *) 
  (* C_PROBE_IN177_WIDTH = "1" *) 
  (* C_PROBE_IN178_WIDTH = "1" *) 
  (* C_PROBE_IN179_WIDTH = "1" *) 
  (* C_PROBE_IN17_WIDTH = "1" *) 
  (* C_PROBE_IN180_WIDTH = "1" *) 
  (* C_PROBE_IN181_WIDTH = "1" *) 
  (* C_PROBE_IN182_WIDTH = "1" *) 
  (* C_PROBE_IN183_WIDTH = "1" *) 
  (* C_PROBE_IN184_WIDTH = "1" *) 
  (* C_PROBE_IN185_WIDTH = "1" *) 
  (* C_PROBE_IN186_WIDTH = "1" *) 
  (* C_PROBE_IN187_WIDTH = "1" *) 
  (* C_PROBE_IN188_WIDTH = "1" *) 
  (* C_PROBE_IN189_WIDTH = "1" *) 
  (* C_PROBE_IN18_WIDTH = "1" *) 
  (* C_PROBE_IN190_WIDTH = "1" *) 
  (* C_PROBE_IN191_WIDTH = "1" *) 
  (* C_PROBE_IN192_WIDTH = "1" *) 
  (* C_PROBE_IN193_WIDTH = "1" *) 
  (* C_PROBE_IN194_WIDTH = "1" *) 
  (* C_PROBE_IN195_WIDTH = "1" *) 
  (* C_PROBE_IN196_WIDTH = "1" *) 
  (* C_PROBE_IN197_WIDTH = "1" *) 
  (* C_PROBE_IN198_WIDTH = "1" *) 
  (* C_PROBE_IN199_WIDTH = "1" *) 
  (* C_PROBE_IN19_WIDTH = "1" *) 
  (* C_PROBE_IN1_WIDTH = "1" *) 
  (* C_PROBE_IN200_WIDTH = "1" *) 
  (* C_PROBE_IN201_WIDTH = "1" *) 
  (* C_PROBE_IN202_WIDTH = "1" *) 
  (* C_PROBE_IN203_WIDTH = "1" *) 
  (* C_PROBE_IN204_WIDTH = "1" *) 
  (* C_PROBE_IN205_WIDTH = "1" *) 
  (* C_PROBE_IN206_WIDTH = "1" *) 
  (* C_PROBE_IN207_WIDTH = "1" *) 
  (* C_PROBE_IN208_WIDTH = "1" *) 
  (* C_PROBE_IN209_WIDTH = "1" *) 
  (* C_PROBE_IN20_WIDTH = "1" *) 
  (* C_PROBE_IN210_WIDTH = "1" *) 
  (* C_PROBE_IN211_WIDTH = "1" *) 
  (* C_PROBE_IN212_WIDTH = "1" *) 
  (* C_PROBE_IN213_WIDTH = "1" *) 
  (* C_PROBE_IN214_WIDTH = "1" *) 
  (* C_PROBE_IN215_WIDTH = "1" *) 
  (* C_PROBE_IN216_WIDTH = "1" *) 
  (* C_PROBE_IN217_WIDTH = "1" *) 
  (* C_PROBE_IN218_WIDTH = "1" *) 
  (* C_PROBE_IN219_WIDTH = "1" *) 
  (* C_PROBE_IN21_WIDTH = "1" *) 
  (* C_PROBE_IN220_WIDTH = "1" *) 
  (* C_PROBE_IN221_WIDTH = "1" *) 
  (* C_PROBE_IN222_WIDTH = "1" *) 
  (* C_PROBE_IN223_WIDTH = "1" *) 
  (* C_PROBE_IN224_WIDTH = "1" *) 
  (* C_PROBE_IN225_WIDTH = "1" *) 
  (* C_PROBE_IN226_WIDTH = "1" *) 
  (* C_PROBE_IN227_WIDTH = "1" *) 
  (* C_PROBE_IN228_WIDTH = "1" *) 
  (* C_PROBE_IN229_WIDTH = "1" *) 
  (* C_PROBE_IN22_WIDTH = "1" *) 
  (* C_PROBE_IN230_WIDTH = "1" *) 
  (* C_PROBE_IN231_WIDTH = "1" *) 
  (* C_PROBE_IN232_WIDTH = "1" *) 
  (* C_PROBE_IN233_WIDTH = "1" *) 
  (* C_PROBE_IN234_WIDTH = "1" *) 
  (* C_PROBE_IN235_WIDTH = "1" *) 
  (* C_PROBE_IN236_WIDTH = "1" *) 
  (* C_PROBE_IN237_WIDTH = "1" *) 
  (* C_PROBE_IN238_WIDTH = "1" *) 
  (* C_PROBE_IN239_WIDTH = "1" *) 
  (* C_PROBE_IN23_WIDTH = "1" *) 
  (* C_PROBE_IN240_WIDTH = "1" *) 
  (* C_PROBE_IN241_WIDTH = "1" *) 
  (* C_PROBE_IN242_WIDTH = "1" *) 
  (* C_PROBE_IN243_WIDTH = "1" *) 
  (* C_PROBE_IN244_WIDTH = "1" *) 
  (* C_PROBE_IN245_WIDTH = "1" *) 
  (* C_PROBE_IN246_WIDTH = "1" *) 
  (* C_PROBE_IN247_WIDTH = "1" *) 
  (* C_PROBE_IN248_WIDTH = "1" *) 
  (* C_PROBE_IN249_WIDTH = "1" *) 
  (* C_PROBE_IN24_WIDTH = "1" *) 
  (* C_PROBE_IN250_WIDTH = "1" *) 
  (* C_PROBE_IN251_WIDTH = "1" *) 
  (* C_PROBE_IN252_WIDTH = "1" *) 
  (* C_PROBE_IN253_WIDTH = "1" *) 
  (* C_PROBE_IN254_WIDTH = "1" *) 
  (* C_PROBE_IN255_WIDTH = "1" *) 
  (* C_PROBE_IN25_WIDTH = "1" *) 
  (* C_PROBE_IN26_WIDTH = "1" *) 
  (* C_PROBE_IN27_WIDTH = "1" *) 
  (* C_PROBE_IN28_WIDTH = "1" *) 
  (* C_PROBE_IN29_WIDTH = "1" *) 
  (* C_PROBE_IN2_WIDTH = "1" *) 
  (* C_PROBE_IN30_WIDTH = "1" *) 
  (* C_PROBE_IN31_WIDTH = "1" *) 
  (* C_PROBE_IN32_WIDTH = "1" *) 
  (* C_PROBE_IN33_WIDTH = "1" *) 
  (* C_PROBE_IN34_WIDTH = "1" *) 
  (* C_PROBE_IN35_WIDTH = "1" *) 
  (* C_PROBE_IN36_WIDTH = "1" *) 
  (* C_PROBE_IN37_WIDTH = "1" *) 
  (* C_PROBE_IN38_WIDTH = "1" *) 
  (* C_PROBE_IN39_WIDTH = "1" *) 
  (* C_PROBE_IN3_WIDTH = "1" *) 
  (* C_PROBE_IN40_WIDTH = "1" *) 
  (* C_PROBE_IN41_WIDTH = "1" *) 
  (* C_PROBE_IN42_WIDTH = "1" *) 
  (* C_PROBE_IN43_WIDTH = "1" *) 
  (* C_PROBE_IN44_WIDTH = "1" *) 
  (* C_PROBE_IN45_WIDTH = "1" *) 
  (* C_PROBE_IN46_WIDTH = "1" *) 
  (* C_PROBE_IN47_WIDTH = "1" *) 
  (* C_PROBE_IN48_WIDTH = "1" *) 
  (* C_PROBE_IN49_WIDTH = "1" *) 
  (* C_PROBE_IN4_WIDTH = "1" *) 
  (* C_PROBE_IN50_WIDTH = "1" *) 
  (* C_PROBE_IN51_WIDTH = "1" *) 
  (* C_PROBE_IN52_WIDTH = "1" *) 
  (* C_PROBE_IN53_WIDTH = "1" *) 
  (* C_PROBE_IN54_WIDTH = "1" *) 
  (* C_PROBE_IN55_WIDTH = "1" *) 
  (* C_PROBE_IN56_WIDTH = "1" *) 
  (* C_PROBE_IN57_WIDTH = "1" *) 
  (* C_PROBE_IN58_WIDTH = "1" *) 
  (* C_PROBE_IN59_WIDTH = "1" *) 
  (* C_PROBE_IN5_WIDTH = "1" *) 
  (* C_PROBE_IN60_WIDTH = "1" *) 
  (* C_PROBE_IN61_WIDTH = "1" *) 
  (* C_PROBE_IN62_WIDTH = "1" *) 
  (* C_PROBE_IN63_WIDTH = "1" *) 
  (* C_PROBE_IN64_WIDTH = "1" *) 
  (* C_PROBE_IN65_WIDTH = "1" *) 
  (* C_PROBE_IN66_WIDTH = "1" *) 
  (* C_PROBE_IN67_WIDTH = "1" *) 
  (* C_PROBE_IN68_WIDTH = "1" *) 
  (* C_PROBE_IN69_WIDTH = "1" *) 
  (* C_PROBE_IN6_WIDTH = "1" *) 
  (* C_PROBE_IN70_WIDTH = "1" *) 
  (* C_PROBE_IN71_WIDTH = "1" *) 
  (* C_PROBE_IN72_WIDTH = "1" *) 
  (* C_PROBE_IN73_WIDTH = "1" *) 
  (* C_PROBE_IN74_WIDTH = "1" *) 
  (* C_PROBE_IN75_WIDTH = "1" *) 
  (* C_PROBE_IN76_WIDTH = "1" *) 
  (* C_PROBE_IN77_WIDTH = "1" *) 
  (* C_PROBE_IN78_WIDTH = "1" *) 
  (* C_PROBE_IN79_WIDTH = "1" *) 
  (* C_PROBE_IN7_WIDTH = "1" *) 
  (* C_PROBE_IN80_WIDTH = "1" *) 
  (* C_PROBE_IN81_WIDTH = "1" *) 
  (* C_PROBE_IN82_WIDTH = "1" *) 
  (* C_PROBE_IN83_WIDTH = "1" *) 
  (* C_PROBE_IN84_WIDTH = "1" *) 
  (* C_PROBE_IN85_WIDTH = "1" *) 
  (* C_PROBE_IN86_WIDTH = "1" *) 
  (* C_PROBE_IN87_WIDTH = "1" *) 
  (* C_PROBE_IN88_WIDTH = "1" *) 
  (* C_PROBE_IN89_WIDTH = "1" *) 
  (* C_PROBE_IN8_WIDTH = "1" *) 
  (* C_PROBE_IN90_WIDTH = "1" *) 
  (* C_PROBE_IN91_WIDTH = "1" *) 
  (* C_PROBE_IN92_WIDTH = "1" *) 
  (* C_PROBE_IN93_WIDTH = "1" *) 
  (* C_PROBE_IN94_WIDTH = "1" *) 
  (* C_PROBE_IN95_WIDTH = "1" *) 
  (* C_PROBE_IN96_WIDTH = "1" *) 
  (* C_PROBE_IN97_WIDTH = "1" *) 
  (* C_PROBE_IN98_WIDTH = "1" *) 
  (* C_PROBE_IN99_WIDTH = "1" *) 
  (* C_PROBE_IN9_WIDTH = "1" *) 
  (* C_PROBE_OUT0_INIT_VAL = "32'b00000000000000000000000000000000" *) 
  (* C_PROBE_OUT0_WIDTH = "32" *) 
  (* C_PROBE_OUT100_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT100_WIDTH = "1" *) 
  (* C_PROBE_OUT101_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT101_WIDTH = "1" *) 
  (* C_PROBE_OUT102_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT102_WIDTH = "1" *) 
  (* C_PROBE_OUT103_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT103_WIDTH = "1" *) 
  (* C_PROBE_OUT104_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT104_WIDTH = "1" *) 
  (* C_PROBE_OUT105_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT105_WIDTH = "1" *) 
  (* C_PROBE_OUT106_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT106_WIDTH = "1" *) 
  (* C_PROBE_OUT107_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT107_WIDTH = "1" *) 
  (* C_PROBE_OUT108_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT108_WIDTH = "1" *) 
  (* C_PROBE_OUT109_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT109_WIDTH = "1" *) 
  (* C_PROBE_OUT10_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT10_WIDTH = "1" *) 
  (* C_PROBE_OUT110_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT110_WIDTH = "1" *) 
  (* C_PROBE_OUT111_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT111_WIDTH = "1" *) 
  (* C_PROBE_OUT112_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT112_WIDTH = "1" *) 
  (* C_PROBE_OUT113_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT113_WIDTH = "1" *) 
  (* C_PROBE_OUT114_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT114_WIDTH = "1" *) 
  (* C_PROBE_OUT115_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT115_WIDTH = "1" *) 
  (* C_PROBE_OUT116_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT116_WIDTH = "1" *) 
  (* C_PROBE_OUT117_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT117_WIDTH = "1" *) 
  (* C_PROBE_OUT118_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT118_WIDTH = "1" *) 
  (* C_PROBE_OUT119_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT119_WIDTH = "1" *) 
  (* C_PROBE_OUT11_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT11_WIDTH = "1" *) 
  (* C_PROBE_OUT120_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT120_WIDTH = "1" *) 
  (* C_PROBE_OUT121_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT121_WIDTH = "1" *) 
  (* C_PROBE_OUT122_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT122_WIDTH = "1" *) 
  (* C_PROBE_OUT123_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT123_WIDTH = "1" *) 
  (* C_PROBE_OUT124_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT124_WIDTH = "1" *) 
  (* C_PROBE_OUT125_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT125_WIDTH = "1" *) 
  (* C_PROBE_OUT126_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT126_WIDTH = "1" *) 
  (* C_PROBE_OUT127_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT127_WIDTH = "1" *) 
  (* C_PROBE_OUT128_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT128_WIDTH = "1" *) 
  (* C_PROBE_OUT129_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT129_WIDTH = "1" *) 
  (* C_PROBE_OUT12_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT12_WIDTH = "1" *) 
  (* C_PROBE_OUT130_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT130_WIDTH = "1" *) 
  (* C_PROBE_OUT131_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT131_WIDTH = "1" *) 
  (* C_PROBE_OUT132_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT132_WIDTH = "1" *) 
  (* C_PROBE_OUT133_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT133_WIDTH = "1" *) 
  (* C_PROBE_OUT134_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT134_WIDTH = "1" *) 
  (* C_PROBE_OUT135_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT135_WIDTH = "1" *) 
  (* C_PROBE_OUT136_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT136_WIDTH = "1" *) 
  (* C_PROBE_OUT137_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT137_WIDTH = "1" *) 
  (* C_PROBE_OUT138_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT138_WIDTH = "1" *) 
  (* C_PROBE_OUT139_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT139_WIDTH = "1" *) 
  (* C_PROBE_OUT13_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT13_WIDTH = "1" *) 
  (* C_PROBE_OUT140_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT140_WIDTH = "1" *) 
  (* C_PROBE_OUT141_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT141_WIDTH = "1" *) 
  (* C_PROBE_OUT142_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT142_WIDTH = "1" *) 
  (* C_PROBE_OUT143_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT143_WIDTH = "1" *) 
  (* C_PROBE_OUT144_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT144_WIDTH = "1" *) 
  (* C_PROBE_OUT145_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT145_WIDTH = "1" *) 
  (* C_PROBE_OUT146_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT146_WIDTH = "1" *) 
  (* C_PROBE_OUT147_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT147_WIDTH = "1" *) 
  (* C_PROBE_OUT148_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT148_WIDTH = "1" *) 
  (* C_PROBE_OUT149_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT149_WIDTH = "1" *) 
  (* C_PROBE_OUT14_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT14_WIDTH = "1" *) 
  (* C_PROBE_OUT150_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT150_WIDTH = "1" *) 
  (* C_PROBE_OUT151_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT151_WIDTH = "1" *) 
  (* C_PROBE_OUT152_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT152_WIDTH = "1" *) 
  (* C_PROBE_OUT153_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT153_WIDTH = "1" *) 
  (* C_PROBE_OUT154_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT154_WIDTH = "1" *) 
  (* C_PROBE_OUT155_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT155_WIDTH = "1" *) 
  (* C_PROBE_OUT156_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT156_WIDTH = "1" *) 
  (* C_PROBE_OUT157_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT157_WIDTH = "1" *) 
  (* C_PROBE_OUT158_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT158_WIDTH = "1" *) 
  (* C_PROBE_OUT159_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT159_WIDTH = "1" *) 
  (* C_PROBE_OUT15_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT15_WIDTH = "1" *) 
  (* C_PROBE_OUT160_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT160_WIDTH = "1" *) 
  (* C_PROBE_OUT161_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT161_WIDTH = "1" *) 
  (* C_PROBE_OUT162_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT162_WIDTH = "1" *) 
  (* C_PROBE_OUT163_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT163_WIDTH = "1" *) 
  (* C_PROBE_OUT164_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT164_WIDTH = "1" *) 
  (* C_PROBE_OUT165_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT165_WIDTH = "1" *) 
  (* C_PROBE_OUT166_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT166_WIDTH = "1" *) 
  (* C_PROBE_OUT167_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT167_WIDTH = "1" *) 
  (* C_PROBE_OUT168_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT168_WIDTH = "1" *) 
  (* C_PROBE_OUT169_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT169_WIDTH = "1" *) 
  (* C_PROBE_OUT16_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT16_WIDTH = "1" *) 
  (* C_PROBE_OUT170_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT170_WIDTH = "1" *) 
  (* C_PROBE_OUT171_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT171_WIDTH = "1" *) 
  (* C_PROBE_OUT172_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT172_WIDTH = "1" *) 
  (* C_PROBE_OUT173_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT173_WIDTH = "1" *) 
  (* C_PROBE_OUT174_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT174_WIDTH = "1" *) 
  (* C_PROBE_OUT175_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT175_WIDTH = "1" *) 
  (* C_PROBE_OUT176_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT176_WIDTH = "1" *) 
  (* C_PROBE_OUT177_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT177_WIDTH = "1" *) 
  (* C_PROBE_OUT178_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT178_WIDTH = "1" *) 
  (* C_PROBE_OUT179_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT179_WIDTH = "1" *) 
  (* C_PROBE_OUT17_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT17_WIDTH = "1" *) 
  (* C_PROBE_OUT180_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT180_WIDTH = "1" *) 
  (* C_PROBE_OUT181_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT181_WIDTH = "1" *) 
  (* C_PROBE_OUT182_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT182_WIDTH = "1" *) 
  (* C_PROBE_OUT183_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT183_WIDTH = "1" *) 
  (* C_PROBE_OUT184_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT184_WIDTH = "1" *) 
  (* C_PROBE_OUT185_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT185_WIDTH = "1" *) 
  (* C_PROBE_OUT186_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT186_WIDTH = "1" *) 
  (* C_PROBE_OUT187_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT187_WIDTH = "1" *) 
  (* C_PROBE_OUT188_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT188_WIDTH = "1" *) 
  (* C_PROBE_OUT189_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT189_WIDTH = "1" *) 
  (* C_PROBE_OUT18_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT18_WIDTH = "1" *) 
  (* C_PROBE_OUT190_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT190_WIDTH = "1" *) 
  (* C_PROBE_OUT191_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT191_WIDTH = "1" *) 
  (* C_PROBE_OUT192_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT192_WIDTH = "1" *) 
  (* C_PROBE_OUT193_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT193_WIDTH = "1" *) 
  (* C_PROBE_OUT194_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT194_WIDTH = "1" *) 
  (* C_PROBE_OUT195_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT195_WIDTH = "1" *) 
  (* C_PROBE_OUT196_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT196_WIDTH = "1" *) 
  (* C_PROBE_OUT197_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT197_WIDTH = "1" *) 
  (* C_PROBE_OUT198_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT198_WIDTH = "1" *) 
  (* C_PROBE_OUT199_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT199_WIDTH = "1" *) 
  (* C_PROBE_OUT19_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT19_WIDTH = "1" *) 
  (* C_PROBE_OUT1_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT1_WIDTH = "1" *) 
  (* C_PROBE_OUT200_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT200_WIDTH = "1" *) 
  (* C_PROBE_OUT201_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT201_WIDTH = "1" *) 
  (* C_PROBE_OUT202_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT202_WIDTH = "1" *) 
  (* C_PROBE_OUT203_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT203_WIDTH = "1" *) 
  (* C_PROBE_OUT204_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT204_WIDTH = "1" *) 
  (* C_PROBE_OUT205_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT205_WIDTH = "1" *) 
  (* C_PROBE_OUT206_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT206_WIDTH = "1" *) 
  (* C_PROBE_OUT207_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT207_WIDTH = "1" *) 
  (* C_PROBE_OUT208_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT208_WIDTH = "1" *) 
  (* C_PROBE_OUT209_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT209_WIDTH = "1" *) 
  (* C_PROBE_OUT20_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT20_WIDTH = "1" *) 
  (* C_PROBE_OUT210_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT210_WIDTH = "1" *) 
  (* C_PROBE_OUT211_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT211_WIDTH = "1" *) 
  (* C_PROBE_OUT212_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT212_WIDTH = "1" *) 
  (* C_PROBE_OUT213_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT213_WIDTH = "1" *) 
  (* C_PROBE_OUT214_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT214_WIDTH = "1" *) 
  (* C_PROBE_OUT215_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT215_WIDTH = "1" *) 
  (* C_PROBE_OUT216_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT216_WIDTH = "1" *) 
  (* C_PROBE_OUT217_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT217_WIDTH = "1" *) 
  (* C_PROBE_OUT218_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT218_WIDTH = "1" *) 
  (* C_PROBE_OUT219_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT219_WIDTH = "1" *) 
  (* C_PROBE_OUT21_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT21_WIDTH = "1" *) 
  (* C_PROBE_OUT220_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT220_WIDTH = "1" *) 
  (* C_PROBE_OUT221_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT221_WIDTH = "1" *) 
  (* C_PROBE_OUT222_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT222_WIDTH = "1" *) 
  (* C_PROBE_OUT223_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT223_WIDTH = "1" *) 
  (* C_PROBE_OUT224_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT224_WIDTH = "1" *) 
  (* C_PROBE_OUT225_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT225_WIDTH = "1" *) 
  (* C_PROBE_OUT226_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT226_WIDTH = "1" *) 
  (* C_PROBE_OUT227_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT227_WIDTH = "1" *) 
  (* C_PROBE_OUT228_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT228_WIDTH = "1" *) 
  (* C_PROBE_OUT229_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT229_WIDTH = "1" *) 
  (* C_PROBE_OUT22_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT22_WIDTH = "1" *) 
  (* C_PROBE_OUT230_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT230_WIDTH = "1" *) 
  (* C_PROBE_OUT231_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT231_WIDTH = "1" *) 
  (* C_PROBE_OUT232_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT232_WIDTH = "1" *) 
  (* C_PROBE_OUT233_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT233_WIDTH = "1" *) 
  (* C_PROBE_OUT234_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT234_WIDTH = "1" *) 
  (* C_PROBE_OUT235_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT235_WIDTH = "1" *) 
  (* C_PROBE_OUT236_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT236_WIDTH = "1" *) 
  (* C_PROBE_OUT237_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT237_WIDTH = "1" *) 
  (* C_PROBE_OUT238_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT238_WIDTH = "1" *) 
  (* C_PROBE_OUT239_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT239_WIDTH = "1" *) 
  (* C_PROBE_OUT23_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT23_WIDTH = "1" *) 
  (* C_PROBE_OUT240_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT240_WIDTH = "1" *) 
  (* C_PROBE_OUT241_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT241_WIDTH = "1" *) 
  (* C_PROBE_OUT242_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT242_WIDTH = "1" *) 
  (* C_PROBE_OUT243_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT243_WIDTH = "1" *) 
  (* C_PROBE_OUT244_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT244_WIDTH = "1" *) 
  (* C_PROBE_OUT245_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT245_WIDTH = "1" *) 
  (* C_PROBE_OUT246_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT246_WIDTH = "1" *) 
  (* C_PROBE_OUT247_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT247_WIDTH = "1" *) 
  (* C_PROBE_OUT248_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT248_WIDTH = "1" *) 
  (* C_PROBE_OUT249_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT249_WIDTH = "1" *) 
  (* C_PROBE_OUT24_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT24_WIDTH = "1" *) 
  (* C_PROBE_OUT250_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT250_WIDTH = "1" *) 
  (* C_PROBE_OUT251_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT251_WIDTH = "1" *) 
  (* C_PROBE_OUT252_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT252_WIDTH = "1" *) 
  (* C_PROBE_OUT253_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT253_WIDTH = "1" *) 
  (* C_PROBE_OUT254_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT254_WIDTH = "1" *) 
  (* C_PROBE_OUT255_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT255_WIDTH = "1" *) 
  (* C_PROBE_OUT25_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT25_WIDTH = "1" *) 
  (* C_PROBE_OUT26_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT26_WIDTH = "1" *) 
  (* C_PROBE_OUT27_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT27_WIDTH = "1" *) 
  (* C_PROBE_OUT28_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT28_WIDTH = "1" *) 
  (* C_PROBE_OUT29_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT29_WIDTH = "1" *) 
  (* C_PROBE_OUT2_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT2_WIDTH = "1" *) 
  (* C_PROBE_OUT30_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT30_WIDTH = "1" *) 
  (* C_PROBE_OUT31_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT31_WIDTH = "1" *) 
  (* C_PROBE_OUT32_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT32_WIDTH = "1" *) 
  (* C_PROBE_OUT33_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT33_WIDTH = "1" *) 
  (* C_PROBE_OUT34_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT34_WIDTH = "1" *) 
  (* C_PROBE_OUT35_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT35_WIDTH = "1" *) 
  (* C_PROBE_OUT36_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT36_WIDTH = "1" *) 
  (* C_PROBE_OUT37_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT37_WIDTH = "1" *) 
  (* C_PROBE_OUT38_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT38_WIDTH = "1" *) 
  (* C_PROBE_OUT39_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT39_WIDTH = "1" *) 
  (* C_PROBE_OUT3_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT3_WIDTH = "1" *) 
  (* C_PROBE_OUT40_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT40_WIDTH = "1" *) 
  (* C_PROBE_OUT41_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT41_WIDTH = "1" *) 
  (* C_PROBE_OUT42_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT42_WIDTH = "1" *) 
  (* C_PROBE_OUT43_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT43_WIDTH = "1" *) 
  (* C_PROBE_OUT44_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT44_WIDTH = "1" *) 
  (* C_PROBE_OUT45_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT45_WIDTH = "1" *) 
  (* C_PROBE_OUT46_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT46_WIDTH = "1" *) 
  (* C_PROBE_OUT47_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT47_WIDTH = "1" *) 
  (* C_PROBE_OUT48_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT48_WIDTH = "1" *) 
  (* C_PROBE_OUT49_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT49_WIDTH = "1" *) 
  (* C_PROBE_OUT4_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT4_WIDTH = "1" *) 
  (* C_PROBE_OUT50_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT50_WIDTH = "1" *) 
  (* C_PROBE_OUT51_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT51_WIDTH = "1" *) 
  (* C_PROBE_OUT52_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT52_WIDTH = "1" *) 
  (* C_PROBE_OUT53_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT53_WIDTH = "1" *) 
  (* C_PROBE_OUT54_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT54_WIDTH = "1" *) 
  (* C_PROBE_OUT55_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT55_WIDTH = "1" *) 
  (* C_PROBE_OUT56_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT56_WIDTH = "1" *) 
  (* C_PROBE_OUT57_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT57_WIDTH = "1" *) 
  (* C_PROBE_OUT58_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT58_WIDTH = "1" *) 
  (* C_PROBE_OUT59_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT59_WIDTH = "1" *) 
  (* C_PROBE_OUT5_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT5_WIDTH = "1" *) 
  (* C_PROBE_OUT60_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT60_WIDTH = "1" *) 
  (* C_PROBE_OUT61_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT61_WIDTH = "1" *) 
  (* C_PROBE_OUT62_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT62_WIDTH = "1" *) 
  (* C_PROBE_OUT63_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT63_WIDTH = "1" *) 
  (* C_PROBE_OUT64_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT64_WIDTH = "1" *) 
  (* C_PROBE_OUT65_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT65_WIDTH = "1" *) 
  (* C_PROBE_OUT66_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT66_WIDTH = "1" *) 
  (* C_PROBE_OUT67_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT67_WIDTH = "1" *) 
  (* C_PROBE_OUT68_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT68_WIDTH = "1" *) 
  (* C_PROBE_OUT69_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT69_WIDTH = "1" *) 
  (* C_PROBE_OUT6_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT6_WIDTH = "1" *) 
  (* C_PROBE_OUT70_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT70_WIDTH = "1" *) 
  (* C_PROBE_OUT71_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT71_WIDTH = "1" *) 
  (* C_PROBE_OUT72_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT72_WIDTH = "1" *) 
  (* C_PROBE_OUT73_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT73_WIDTH = "1" *) 
  (* C_PROBE_OUT74_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT74_WIDTH = "1" *) 
  (* C_PROBE_OUT75_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT75_WIDTH = "1" *) 
  (* C_PROBE_OUT76_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT76_WIDTH = "1" *) 
  (* C_PROBE_OUT77_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT77_WIDTH = "1" *) 
  (* C_PROBE_OUT78_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT78_WIDTH = "1" *) 
  (* C_PROBE_OUT79_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT79_WIDTH = "1" *) 
  (* C_PROBE_OUT7_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT7_WIDTH = "1" *) 
  (* C_PROBE_OUT80_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT80_WIDTH = "1" *) 
  (* C_PROBE_OUT81_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT81_WIDTH = "1" *) 
  (* C_PROBE_OUT82_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT82_WIDTH = "1" *) 
  (* C_PROBE_OUT83_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT83_WIDTH = "1" *) 
  (* C_PROBE_OUT84_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT84_WIDTH = "1" *) 
  (* C_PROBE_OUT85_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT85_WIDTH = "1" *) 
  (* C_PROBE_OUT86_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT86_WIDTH = "1" *) 
  (* C_PROBE_OUT87_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT87_WIDTH = "1" *) 
  (* C_PROBE_OUT88_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT88_WIDTH = "1" *) 
  (* C_PROBE_OUT89_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT89_WIDTH = "1" *) 
  (* C_PROBE_OUT8_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT8_WIDTH = "1" *) 
  (* C_PROBE_OUT90_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT90_WIDTH = "1" *) 
  (* C_PROBE_OUT91_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT91_WIDTH = "1" *) 
  (* C_PROBE_OUT92_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT92_WIDTH = "1" *) 
  (* C_PROBE_OUT93_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT93_WIDTH = "1" *) 
  (* C_PROBE_OUT94_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT94_WIDTH = "1" *) 
  (* C_PROBE_OUT95_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT95_WIDTH = "1" *) 
  (* C_PROBE_OUT96_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT96_WIDTH = "1" *) 
  (* C_PROBE_OUT97_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT97_WIDTH = "1" *) 
  (* C_PROBE_OUT98_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT98_WIDTH = "1" *) 
  (* C_PROBE_OUT99_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT99_WIDTH = "1" *) 
  (* C_PROBE_OUT9_INIT_VAL = "1'b0" *) 
  (* C_PROBE_OUT9_WIDTH = "1" *) 
  (* C_USE_TEST_REG = "1" *) 
  (* C_XDEVICEFAMILY = "virtex7" *) 
  (* C_XLNX_HW_PROBE_INFO = "DEFAULT" *) 
  (* C_XSDB_SLAVE_TYPE = "33" *) 
  (* DONT_TOUCH *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT0 = "16'b0000000000011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT1 = "16'b0000000000100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT10 = "16'b0000000000101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT100 = "16'b0000000010000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT101 = "16'b0000000010000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT102 = "16'b0000000010000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT103 = "16'b0000000010000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT104 = "16'b0000000010000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT105 = "16'b0000000010001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT106 = "16'b0000000010001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT107 = "16'b0000000010001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT108 = "16'b0000000010001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT109 = "16'b0000000010001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT11 = "16'b0000000000101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT110 = "16'b0000000010001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT111 = "16'b0000000010001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT112 = "16'b0000000010001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT113 = "16'b0000000010010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT114 = "16'b0000000010010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT115 = "16'b0000000010010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT116 = "16'b0000000010010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT117 = "16'b0000000010010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT118 = "16'b0000000010010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT119 = "16'b0000000010010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT12 = "16'b0000000000101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT120 = "16'b0000000010010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT121 = "16'b0000000010011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT122 = "16'b0000000010011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT123 = "16'b0000000010011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT124 = "16'b0000000010011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT125 = "16'b0000000010011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT126 = "16'b0000000010011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT127 = "16'b0000000010011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT128 = "16'b0000000010011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT129 = "16'b0000000010100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT13 = "16'b0000000000101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT130 = "16'b0000000010100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT131 = "16'b0000000010100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT132 = "16'b0000000010100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT133 = "16'b0000000010100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT134 = "16'b0000000010100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT135 = "16'b0000000010100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT136 = "16'b0000000010100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT137 = "16'b0000000010101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT138 = "16'b0000000010101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT139 = "16'b0000000010101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT14 = "16'b0000000000101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT140 = "16'b0000000010101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT141 = "16'b0000000010101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT142 = "16'b0000000010101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT143 = "16'b0000000010101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT144 = "16'b0000000010101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT145 = "16'b0000000010110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT146 = "16'b0000000010110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT147 = "16'b0000000010110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT148 = "16'b0000000010110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT149 = "16'b0000000010110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT15 = "16'b0000000000101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT150 = "16'b0000000010110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT151 = "16'b0000000010110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT152 = "16'b0000000010110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT153 = "16'b0000000010111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT154 = "16'b0000000010111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT155 = "16'b0000000010111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT156 = "16'b0000000010111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT157 = "16'b0000000010111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT158 = "16'b0000000010111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT159 = "16'b0000000010111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT16 = "16'b0000000000101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT160 = "16'b0000000010111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT161 = "16'b0000000011000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT162 = "16'b0000000011000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT163 = "16'b0000000011000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT164 = "16'b0000000011000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT165 = "16'b0000000011000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT166 = "16'b0000000011000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT167 = "16'b0000000011000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT168 = "16'b0000000011000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT169 = "16'b0000000011001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT17 = "16'b0000000000110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT170 = "16'b0000000011001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT171 = "16'b0000000011001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT172 = "16'b0000000011001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT173 = "16'b0000000011001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT174 = "16'b0000000011001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT175 = "16'b0000000011001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT176 = "16'b0000000011001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT177 = "16'b0000000011010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT178 = "16'b0000000011010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT179 = "16'b0000000011010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT18 = "16'b0000000000110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT180 = "16'b0000000011010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT181 = "16'b0000000011010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT182 = "16'b0000000011010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT183 = "16'b0000000011010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT184 = "16'b0000000011010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT185 = "16'b0000000011011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT186 = "16'b0000000011011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT187 = "16'b0000000011011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT188 = "16'b0000000011011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT189 = "16'b0000000011011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT19 = "16'b0000000000110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT190 = "16'b0000000011011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT191 = "16'b0000000011011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT192 = "16'b0000000011011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT193 = "16'b0000000011100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT194 = "16'b0000000011100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT195 = "16'b0000000011100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT196 = "16'b0000000011100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT197 = "16'b0000000011100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT198 = "16'b0000000011100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT199 = "16'b0000000011100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT2 = "16'b0000000000100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT20 = "16'b0000000000110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT200 = "16'b0000000011100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT201 = "16'b0000000011101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT202 = "16'b0000000011101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT203 = "16'b0000000011101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT204 = "16'b0000000011101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT205 = "16'b0000000011101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT206 = "16'b0000000011101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT207 = "16'b0000000011101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT208 = "16'b0000000011101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT209 = "16'b0000000011110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT21 = "16'b0000000000110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT210 = "16'b0000000011110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT211 = "16'b0000000011110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT212 = "16'b0000000011110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT213 = "16'b0000000011110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT214 = "16'b0000000011110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT215 = "16'b0000000011110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT216 = "16'b0000000011110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT217 = "16'b0000000011111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT218 = "16'b0000000011111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT219 = "16'b0000000011111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT22 = "16'b0000000000110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT220 = "16'b0000000011111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT221 = "16'b0000000011111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT222 = "16'b0000000011111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT223 = "16'b0000000011111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT224 = "16'b0000000011111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT225 = "16'b0000000100000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT226 = "16'b0000000100000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT227 = "16'b0000000100000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT228 = "16'b0000000100000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT229 = "16'b0000000100000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT23 = "16'b0000000000110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT230 = "16'b0000000100000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT231 = "16'b0000000100000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT232 = "16'b0000000100000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT233 = "16'b0000000100001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT234 = "16'b0000000100001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT235 = "16'b0000000100001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT236 = "16'b0000000100001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT237 = "16'b0000000100001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT238 = "16'b0000000100001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT239 = "16'b0000000100001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT24 = "16'b0000000000110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT240 = "16'b0000000100001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT241 = "16'b0000000100010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT242 = "16'b0000000100010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT243 = "16'b0000000100010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT244 = "16'b0000000100010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT245 = "16'b0000000100010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT246 = "16'b0000000100010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT247 = "16'b0000000100010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT248 = "16'b0000000100010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT249 = "16'b0000000100011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT25 = "16'b0000000000111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT250 = "16'b0000000100011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT251 = "16'b0000000100011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT252 = "16'b0000000100011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT253 = "16'b0000000100011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT254 = "16'b0000000100011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT255 = "16'b0000000100011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT26 = "16'b0000000000111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT27 = "16'b0000000000111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT28 = "16'b0000000000111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT29 = "16'b0000000000111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT3 = "16'b0000000000100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT30 = "16'b0000000000111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT31 = "16'b0000000000111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT32 = "16'b0000000000111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT33 = "16'b0000000001000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT34 = "16'b0000000001000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT35 = "16'b0000000001000010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT36 = "16'b0000000001000011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT37 = "16'b0000000001000100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT38 = "16'b0000000001000101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT39 = "16'b0000000001000110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT4 = "16'b0000000000100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT40 = "16'b0000000001000111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT41 = "16'b0000000001001000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT42 = "16'b0000000001001001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT43 = "16'b0000000001001010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT44 = "16'b0000000001001011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT45 = "16'b0000000001001100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT46 = "16'b0000000001001101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT47 = "16'b0000000001001110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT48 = "16'b0000000001001111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT49 = "16'b0000000001010000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT5 = "16'b0000000000100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT50 = "16'b0000000001010001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT51 = "16'b0000000001010010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT52 = "16'b0000000001010011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT53 = "16'b0000000001010100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT54 = "16'b0000000001010101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT55 = "16'b0000000001010110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT56 = "16'b0000000001010111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT57 = "16'b0000000001011000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT58 = "16'b0000000001011001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT59 = "16'b0000000001011010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT6 = "16'b0000000000100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT60 = "16'b0000000001011011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT61 = "16'b0000000001011100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT62 = "16'b0000000001011101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT63 = "16'b0000000001011110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT64 = "16'b0000000001011111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT65 = "16'b0000000001100000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT66 = "16'b0000000001100001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT67 = "16'b0000000001100010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT68 = "16'b0000000001100011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT69 = "16'b0000000001100100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT7 = "16'b0000000000100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT70 = "16'b0000000001100101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT71 = "16'b0000000001100110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT72 = "16'b0000000001100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT73 = "16'b0000000001101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT74 = "16'b0000000001101001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT75 = "16'b0000000001101010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT76 = "16'b0000000001101011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT77 = "16'b0000000001101100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT78 = "16'b0000000001101101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT79 = "16'b0000000001101110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT8 = "16'b0000000000100111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT80 = "16'b0000000001101111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT81 = "16'b0000000001110000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT82 = "16'b0000000001110001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT83 = "16'b0000000001110010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT84 = "16'b0000000001110011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT85 = "16'b0000000001110100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT86 = "16'b0000000001110101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT87 = "16'b0000000001110110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT88 = "16'b0000000001110111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT89 = "16'b0000000001111000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT9 = "16'b0000000000101000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT90 = "16'b0000000001111001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT91 = "16'b0000000001111010" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT92 = "16'b0000000001111011" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT93 = "16'b0000000001111100" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT94 = "16'b0000000001111101" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT95 = "16'b0000000001111110" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT96 = "16'b0000000001111111" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT97 = "16'b0000000010000000" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT98 = "16'b0000000010000001" *) 
  (* LC_HIGH_BIT_POS_PROBE_OUT99 = "16'b0000000010000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT0 = "16'b0000000000000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT1 = "16'b0000000000100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT10 = "16'b0000000000101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT100 = "16'b0000000010000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT101 = "16'b0000000010000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT102 = "16'b0000000010000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT103 = "16'b0000000010000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT104 = "16'b0000000010000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT105 = "16'b0000000010001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT106 = "16'b0000000010001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT107 = "16'b0000000010001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT108 = "16'b0000000010001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT109 = "16'b0000000010001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT11 = "16'b0000000000101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT110 = "16'b0000000010001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT111 = "16'b0000000010001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT112 = "16'b0000000010001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT113 = "16'b0000000010010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT114 = "16'b0000000010010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT115 = "16'b0000000010010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT116 = "16'b0000000010010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT117 = "16'b0000000010010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT118 = "16'b0000000010010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT119 = "16'b0000000010010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT12 = "16'b0000000000101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT120 = "16'b0000000010010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT121 = "16'b0000000010011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT122 = "16'b0000000010011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT123 = "16'b0000000010011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT124 = "16'b0000000010011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT125 = "16'b0000000010011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT126 = "16'b0000000010011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT127 = "16'b0000000010011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT128 = "16'b0000000010011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT129 = "16'b0000000010100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT13 = "16'b0000000000101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT130 = "16'b0000000010100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT131 = "16'b0000000010100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT132 = "16'b0000000010100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT133 = "16'b0000000010100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT134 = "16'b0000000010100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT135 = "16'b0000000010100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT136 = "16'b0000000010100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT137 = "16'b0000000010101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT138 = "16'b0000000010101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT139 = "16'b0000000010101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT14 = "16'b0000000000101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT140 = "16'b0000000010101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT141 = "16'b0000000010101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT142 = "16'b0000000010101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT143 = "16'b0000000010101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT144 = "16'b0000000010101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT145 = "16'b0000000010110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT146 = "16'b0000000010110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT147 = "16'b0000000010110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT148 = "16'b0000000010110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT149 = "16'b0000000010110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT15 = "16'b0000000000101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT150 = "16'b0000000010110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT151 = "16'b0000000010110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT152 = "16'b0000000010110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT153 = "16'b0000000010111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT154 = "16'b0000000010111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT155 = "16'b0000000010111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT156 = "16'b0000000010111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT157 = "16'b0000000010111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT158 = "16'b0000000010111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT159 = "16'b0000000010111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT16 = "16'b0000000000101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT160 = "16'b0000000010111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT161 = "16'b0000000011000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT162 = "16'b0000000011000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT163 = "16'b0000000011000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT164 = "16'b0000000011000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT165 = "16'b0000000011000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT166 = "16'b0000000011000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT167 = "16'b0000000011000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT168 = "16'b0000000011000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT169 = "16'b0000000011001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT17 = "16'b0000000000110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT170 = "16'b0000000011001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT171 = "16'b0000000011001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT172 = "16'b0000000011001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT173 = "16'b0000000011001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT174 = "16'b0000000011001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT175 = "16'b0000000011001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT176 = "16'b0000000011001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT177 = "16'b0000000011010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT178 = "16'b0000000011010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT179 = "16'b0000000011010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT18 = "16'b0000000000110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT180 = "16'b0000000011010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT181 = "16'b0000000011010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT182 = "16'b0000000011010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT183 = "16'b0000000011010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT184 = "16'b0000000011010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT185 = "16'b0000000011011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT186 = "16'b0000000011011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT187 = "16'b0000000011011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT188 = "16'b0000000011011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT189 = "16'b0000000011011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT19 = "16'b0000000000110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT190 = "16'b0000000011011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT191 = "16'b0000000011011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT192 = "16'b0000000011011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT193 = "16'b0000000011100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT194 = "16'b0000000011100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT195 = "16'b0000000011100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT196 = "16'b0000000011100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT197 = "16'b0000000011100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT198 = "16'b0000000011100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT199 = "16'b0000000011100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT2 = "16'b0000000000100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT20 = "16'b0000000000110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT200 = "16'b0000000011100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT201 = "16'b0000000011101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT202 = "16'b0000000011101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT203 = "16'b0000000011101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT204 = "16'b0000000011101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT205 = "16'b0000000011101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT206 = "16'b0000000011101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT207 = "16'b0000000011101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT208 = "16'b0000000011101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT209 = "16'b0000000011110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT21 = "16'b0000000000110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT210 = "16'b0000000011110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT211 = "16'b0000000011110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT212 = "16'b0000000011110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT213 = "16'b0000000011110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT214 = "16'b0000000011110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT215 = "16'b0000000011110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT216 = "16'b0000000011110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT217 = "16'b0000000011111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT218 = "16'b0000000011111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT219 = "16'b0000000011111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT22 = "16'b0000000000110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT220 = "16'b0000000011111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT221 = "16'b0000000011111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT222 = "16'b0000000011111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT223 = "16'b0000000011111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT224 = "16'b0000000011111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT225 = "16'b0000000100000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT226 = "16'b0000000100000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT227 = "16'b0000000100000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT228 = "16'b0000000100000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT229 = "16'b0000000100000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT23 = "16'b0000000000110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT230 = "16'b0000000100000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT231 = "16'b0000000100000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT232 = "16'b0000000100000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT233 = "16'b0000000100001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT234 = "16'b0000000100001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT235 = "16'b0000000100001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT236 = "16'b0000000100001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT237 = "16'b0000000100001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT238 = "16'b0000000100001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT239 = "16'b0000000100001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT24 = "16'b0000000000110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT240 = "16'b0000000100001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT241 = "16'b0000000100010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT242 = "16'b0000000100010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT243 = "16'b0000000100010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT244 = "16'b0000000100010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT245 = "16'b0000000100010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT246 = "16'b0000000100010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT247 = "16'b0000000100010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT248 = "16'b0000000100010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT249 = "16'b0000000100011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT25 = "16'b0000000000111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT250 = "16'b0000000100011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT251 = "16'b0000000100011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT252 = "16'b0000000100011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT253 = "16'b0000000100011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT254 = "16'b0000000100011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT255 = "16'b0000000100011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT26 = "16'b0000000000111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT27 = "16'b0000000000111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT28 = "16'b0000000000111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT29 = "16'b0000000000111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT3 = "16'b0000000000100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT30 = "16'b0000000000111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT31 = "16'b0000000000111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT32 = "16'b0000000000111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT33 = "16'b0000000001000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT34 = "16'b0000000001000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT35 = "16'b0000000001000010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT36 = "16'b0000000001000011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT37 = "16'b0000000001000100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT38 = "16'b0000000001000101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT39 = "16'b0000000001000110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT4 = "16'b0000000000100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT40 = "16'b0000000001000111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT41 = "16'b0000000001001000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT42 = "16'b0000000001001001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT43 = "16'b0000000001001010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT44 = "16'b0000000001001011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT45 = "16'b0000000001001100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT46 = "16'b0000000001001101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT47 = "16'b0000000001001110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT48 = "16'b0000000001001111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT49 = "16'b0000000001010000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT5 = "16'b0000000000100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT50 = "16'b0000000001010001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT51 = "16'b0000000001010010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT52 = "16'b0000000001010011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT53 = "16'b0000000001010100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT54 = "16'b0000000001010101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT55 = "16'b0000000001010110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT56 = "16'b0000000001010111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT57 = "16'b0000000001011000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT58 = "16'b0000000001011001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT59 = "16'b0000000001011010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT6 = "16'b0000000000100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT60 = "16'b0000000001011011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT61 = "16'b0000000001011100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT62 = "16'b0000000001011101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT63 = "16'b0000000001011110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT64 = "16'b0000000001011111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT65 = "16'b0000000001100000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT66 = "16'b0000000001100001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT67 = "16'b0000000001100010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT68 = "16'b0000000001100011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT69 = "16'b0000000001100100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT7 = "16'b0000000000100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT70 = "16'b0000000001100101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT71 = "16'b0000000001100110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT72 = "16'b0000000001100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT73 = "16'b0000000001101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT74 = "16'b0000000001101001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT75 = "16'b0000000001101010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT76 = "16'b0000000001101011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT77 = "16'b0000000001101100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT78 = "16'b0000000001101101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT79 = "16'b0000000001101110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT8 = "16'b0000000000100111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT80 = "16'b0000000001101111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT81 = "16'b0000000001110000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT82 = "16'b0000000001110001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT83 = "16'b0000000001110010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT84 = "16'b0000000001110011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT85 = "16'b0000000001110100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT86 = "16'b0000000001110101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT87 = "16'b0000000001110110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT88 = "16'b0000000001110111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT89 = "16'b0000000001111000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT9 = "16'b0000000000101000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT90 = "16'b0000000001111001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT91 = "16'b0000000001111010" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT92 = "16'b0000000001111011" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT93 = "16'b0000000001111100" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT94 = "16'b0000000001111101" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT95 = "16'b0000000001111110" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT96 = "16'b0000000001111111" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT97 = "16'b0000000010000000" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT98 = "16'b0000000010000001" *) 
  (* LC_LOW_BIT_POS_PROBE_OUT99 = "16'b0000000010000010" *) 
  (* LC_PROBE_IN_WIDTH_STRING = "2048'b
  (* LC_PROBE_OUT_HIGH_BIT_POS_STRING = "4096'b
  (* LC_PROBE_OUT_INIT_VAL_STRING = "287'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* LC_PROBE_OUT_LOW_BIT_POS_STRING = "4096'b
  (* LC_PROBE_OUT_WIDTH_STRING = "2048'b
  (* LC_TOTAL_PROBE_IN_WIDTH = "32" *) 
  (* LC_TOTAL_PROBE_OUT_WIDTH = "32" *) 
  (* syn_noprune = "1" *) 
  top_aurora_0_0_vio_v3_0_19_vio inst
       (.clk(clk),
        .probe_in0(probe_in0),
        .probe_in1(1'b0),
        .probe_in10(1'b0),
        .probe_in100(1'b0),
        .probe_in101(1'b0),
        .probe_in102(1'b0),
        .probe_in103(1'b0),
        .probe_in104(1'b0),
        .probe_in105(1'b0),
        .probe_in106(1'b0),
        .probe_in107(1'b0),
        .probe_in108(1'b0),
        .probe_in109(1'b0),
        .probe_in11(1'b0),
        .probe_in110(1'b0),
        .probe_in111(1'b0),
        .probe_in112(1'b0),
        .probe_in113(1'b0),
        .probe_in114(1'b0),
        .probe_in115(1'b0),
        .probe_in116(1'b0),
        .probe_in117(1'b0),
        .probe_in118(1'b0),
        .probe_in119(1'b0),
        .probe_in12(1'b0),
        .probe_in120(1'b0),
        .probe_in121(1'b0),
        .probe_in122(1'b0),
        .probe_in123(1'b0),
        .probe_in124(1'b0),
        .probe_in125(1'b0),
        .probe_in126(1'b0),
        .probe_in127(1'b0),
        .probe_in128(1'b0),
        .probe_in129(1'b0),
        .probe_in13(1'b0),
        .probe_in130(1'b0),
        .probe_in131(1'b0),
        .probe_in132(1'b0),
        .probe_in133(1'b0),
        .probe_in134(1'b0),
        .probe_in135(1'b0),
        .probe_in136(1'b0),
        .probe_in137(1'b0),
        .probe_in138(1'b0),
        .probe_in139(1'b0),
        .probe_in14(1'b0),
        .probe_in140(1'b0),
        .probe_in141(1'b0),
        .probe_in142(1'b0),
        .probe_in143(1'b0),
        .probe_in144(1'b0),
        .probe_in145(1'b0),
        .probe_in146(1'b0),
        .probe_in147(1'b0),
        .probe_in148(1'b0),
        .probe_in149(1'b0),
        .probe_in15(1'b0),
        .probe_in150(1'b0),
        .probe_in151(1'b0),
        .probe_in152(1'b0),
        .probe_in153(1'b0),
        .probe_in154(1'b0),
        .probe_in155(1'b0),
        .probe_in156(1'b0),
        .probe_in157(1'b0),
        .probe_in158(1'b0),
        .probe_in159(1'b0),
        .probe_in16(1'b0),
        .probe_in160(1'b0),
        .probe_in161(1'b0),
        .probe_in162(1'b0),
        .probe_in163(1'b0),
        .probe_in164(1'b0),
        .probe_in165(1'b0),
        .probe_in166(1'b0),
        .probe_in167(1'b0),
        .probe_in168(1'b0),
        .probe_in169(1'b0),
        .probe_in17(1'b0),
        .probe_in170(1'b0),
        .probe_in171(1'b0),
        .probe_in172(1'b0),
        .probe_in173(1'b0),
        .probe_in174(1'b0),
        .probe_in175(1'b0),
        .probe_in176(1'b0),
        .probe_in177(1'b0),
        .probe_in178(1'b0),
        .probe_in179(1'b0),
        .probe_in18(1'b0),
        .probe_in180(1'b0),
        .probe_in181(1'b0),
        .probe_in182(1'b0),
        .probe_in183(1'b0),
        .probe_in184(1'b0),
        .probe_in185(1'b0),
        .probe_in186(1'b0),
        .probe_in187(1'b0),
        .probe_in188(1'b0),
        .probe_in189(1'b0),
        .probe_in19(1'b0),
        .probe_in190(1'b0),
        .probe_in191(1'b0),
        .probe_in192(1'b0),
        .probe_in193(1'b0),
        .probe_in194(1'b0),
        .probe_in195(1'b0),
        .probe_in196(1'b0),
        .probe_in197(1'b0),
        .probe_in198(1'b0),
        .probe_in199(1'b0),
        .probe_in2(1'b0),
        .probe_in20(1'b0),
        .probe_in200(1'b0),
        .probe_in201(1'b0),
        .probe_in202(1'b0),
        .probe_in203(1'b0),
        .probe_in204(1'b0),
        .probe_in205(1'b0),
        .probe_in206(1'b0),
        .probe_in207(1'b0),
        .probe_in208(1'b0),
        .probe_in209(1'b0),
        .probe_in21(1'b0),
        .probe_in210(1'b0),
        .probe_in211(1'b0),
        .probe_in212(1'b0),
        .probe_in213(1'b0),
        .probe_in214(1'b0),
        .probe_in215(1'b0),
        .probe_in216(1'b0),
        .probe_in217(1'b0),
        .probe_in218(1'b0),
        .probe_in219(1'b0),
        .probe_in22(1'b0),
        .probe_in220(1'b0),
        .probe_in221(1'b0),
        .probe_in222(1'b0),
        .probe_in223(1'b0),
        .probe_in224(1'b0),
        .probe_in225(1'b0),
        .probe_in226(1'b0),
        .probe_in227(1'b0),
        .probe_in228(1'b0),
        .probe_in229(1'b0),
        .probe_in23(1'b0),
        .probe_in230(1'b0),
        .probe_in231(1'b0),
        .probe_in232(1'b0),
        .probe_in233(1'b0),
        .probe_in234(1'b0),
        .probe_in235(1'b0),
        .probe_in236(1'b0),
        .probe_in237(1'b0),
        .probe_in238(1'b0),
        .probe_in239(1'b0),
        .probe_in24(1'b0),
        .probe_in240(1'b0),
        .probe_in241(1'b0),
        .probe_in242(1'b0),
        .probe_in243(1'b0),
        .probe_in244(1'b0),
        .probe_in245(1'b0),
        .probe_in246(1'b0),
        .probe_in247(1'b0),
        .probe_in248(1'b0),
        .probe_in249(1'b0),
        .probe_in25(1'b0),
        .probe_in250(1'b0),
        .probe_in251(1'b0),
        .probe_in252(1'b0),
        .probe_in253(1'b0),
        .probe_in254(1'b0),
        .probe_in255(1'b0),
        .probe_in26(1'b0),
        .probe_in27(1'b0),
        .probe_in28(1'b0),
        .probe_in29(1'b0),
        .probe_in3(1'b0),
        .probe_in30(1'b0),
        .probe_in31(1'b0),
        .probe_in32(1'b0),
        .probe_in33(1'b0),
        .probe_in34(1'b0),
        .probe_in35(1'b0),
        .probe_in36(1'b0),
        .probe_in37(1'b0),
        .probe_in38(1'b0),
        .probe_in39(1'b0),
        .probe_in4(1'b0),
        .probe_in40(1'b0),
        .probe_in41(1'b0),
        .probe_in42(1'b0),
        .probe_in43(1'b0),
        .probe_in44(1'b0),
        .probe_in45(1'b0),
        .probe_in46(1'b0),
        .probe_in47(1'b0),
        .probe_in48(1'b0),
        .probe_in49(1'b0),
        .probe_in5(1'b0),
        .probe_in50(1'b0),
        .probe_in51(1'b0),
        .probe_in52(1'b0),
        .probe_in53(1'b0),
        .probe_in54(1'b0),
        .probe_in55(1'b0),
        .probe_in56(1'b0),
        .probe_in57(1'b0),
        .probe_in58(1'b0),
        .probe_in59(1'b0),
        .probe_in6(1'b0),
        .probe_in60(1'b0),
        .probe_in61(1'b0),
        .probe_in62(1'b0),
        .probe_in63(1'b0),
        .probe_in64(1'b0),
        .probe_in65(1'b0),
        .probe_in66(1'b0),
        .probe_in67(1'b0),
        .probe_in68(1'b0),
        .probe_in69(1'b0),
        .probe_in7(1'b0),
        .probe_in70(1'b0),
        .probe_in71(1'b0),
        .probe_in72(1'b0),
        .probe_in73(1'b0),
        .probe_in74(1'b0),
        .probe_in75(1'b0),
        .probe_in76(1'b0),
        .probe_in77(1'b0),
        .probe_in78(1'b0),
        .probe_in79(1'b0),
        .probe_in8(1'b0),
        .probe_in80(1'b0),
        .probe_in81(1'b0),
        .probe_in82(1'b0),
        .probe_in83(1'b0),
        .probe_in84(1'b0),
        .probe_in85(1'b0),
        .probe_in86(1'b0),
        .probe_in87(1'b0),
        .probe_in88(1'b0),
        .probe_in89(1'b0),
        .probe_in9(1'b0),
        .probe_in90(1'b0),
        .probe_in91(1'b0),
        .probe_in92(1'b0),
        .probe_in93(1'b0),
        .probe_in94(1'b0),
        .probe_in95(1'b0),
        .probe_in96(1'b0),
        .probe_in97(1'b0),
        .probe_in98(1'b0),
        .probe_in99(1'b0),
        .probe_out0(probe_out0),
        .probe_out1(NLW_inst_probe_out1_UNCONNECTED[0]),
        .probe_out10(NLW_inst_probe_out10_UNCONNECTED[0]),
        .probe_out100(NLW_inst_probe_out100_UNCONNECTED[0]),
        .probe_out101(NLW_inst_probe_out101_UNCONNECTED[0]),
        .probe_out102(NLW_inst_probe_out102_UNCONNECTED[0]),
        .probe_out103(NLW_inst_probe_out103_UNCONNECTED[0]),
        .probe_out104(NLW_inst_probe_out104_UNCONNECTED[0]),
        .probe_out105(NLW_inst_probe_out105_UNCONNECTED[0]),
        .probe_out106(NLW_inst_probe_out106_UNCONNECTED[0]),
        .probe_out107(NLW_inst_probe_out107_UNCONNECTED[0]),
        .probe_out108(NLW_inst_probe_out108_UNCONNECTED[0]),
        .probe_out109(NLW_inst_probe_out109_UNCONNECTED[0]),
        .probe_out11(NLW_inst_probe_out11_UNCONNECTED[0]),
        .probe_out110(NLW_inst_probe_out110_UNCONNECTED[0]),
        .probe_out111(NLW_inst_probe_out111_UNCONNECTED[0]),
        .probe_out112(NLW_inst_probe_out112_UNCONNECTED[0]),
        .probe_out113(NLW_inst_probe_out113_UNCONNECTED[0]),
        .probe_out114(NLW_inst_probe_out114_UNCONNECTED[0]),
        .probe_out115(NLW_inst_probe_out115_UNCONNECTED[0]),
        .probe_out116(NLW_inst_probe_out116_UNCONNECTED[0]),
        .probe_out117(NLW_inst_probe_out117_UNCONNECTED[0]),
        .probe_out118(NLW_inst_probe_out118_UNCONNECTED[0]),
        .probe_out119(NLW_inst_probe_out119_UNCONNECTED[0]),
        .probe_out12(NLW_inst_probe_out12_UNCONNECTED[0]),
        .probe_out120(NLW_inst_probe_out120_UNCONNECTED[0]),
        .probe_out121(NLW_inst_probe_out121_UNCONNECTED[0]),
        .probe_out122(NLW_inst_probe_out122_UNCONNECTED[0]),
        .probe_out123(NLW_inst_probe_out123_UNCONNECTED[0]),
        .probe_out124(NLW_inst_probe_out124_UNCONNECTED[0]),
        .probe_out125(NLW_inst_probe_out125_UNCONNECTED[0]),
        .probe_out126(NLW_inst_probe_out126_UNCONNECTED[0]),
        .probe_out127(NLW_inst_probe_out127_UNCONNECTED[0]),
        .probe_out128(NLW_inst_probe_out128_UNCONNECTED[0]),
        .probe_out129(NLW_inst_probe_out129_UNCONNECTED[0]),
        .probe_out13(NLW_inst_probe_out13_UNCONNECTED[0]),
        .probe_out130(NLW_inst_probe_out130_UNCONNECTED[0]),
        .probe_out131(NLW_inst_probe_out131_UNCONNECTED[0]),
        .probe_out132(NLW_inst_probe_out132_UNCONNECTED[0]),
        .probe_out133(NLW_inst_probe_out133_UNCONNECTED[0]),
        .probe_out134(NLW_inst_probe_out134_UNCONNECTED[0]),
        .probe_out135(NLW_inst_probe_out135_UNCONNECTED[0]),
        .probe_out136(NLW_inst_probe_out136_UNCONNECTED[0]),
        .probe_out137(NLW_inst_probe_out137_UNCONNECTED[0]),
        .probe_out138(NLW_inst_probe_out138_UNCONNECTED[0]),
        .probe_out139(NLW_inst_probe_out139_UNCONNECTED[0]),
        .probe_out14(NLW_inst_probe_out14_UNCONNECTED[0]),
        .probe_out140(NLW_inst_probe_out140_UNCONNECTED[0]),
        .probe_out141(NLW_inst_probe_out141_UNCONNECTED[0]),
        .probe_out142(NLW_inst_probe_out142_UNCONNECTED[0]),
        .probe_out143(NLW_inst_probe_out143_UNCONNECTED[0]),
        .probe_out144(NLW_inst_probe_out144_UNCONNECTED[0]),
        .probe_out145(NLW_inst_probe_out145_UNCONNECTED[0]),
        .probe_out146(NLW_inst_probe_out146_UNCONNECTED[0]),
        .probe_out147(NLW_inst_probe_out147_UNCONNECTED[0]),
        .probe_out148(NLW_inst_probe_out148_UNCONNECTED[0]),
        .probe_out149(NLW_inst_probe_out149_UNCONNECTED[0]),
        .probe_out15(NLW_inst_probe_out15_UNCONNECTED[0]),
        .probe_out150(NLW_inst_probe_out150_UNCONNECTED[0]),
        .probe_out151(NLW_inst_probe_out151_UNCONNECTED[0]),
        .probe_out152(NLW_inst_probe_out152_UNCONNECTED[0]),
        .probe_out153(NLW_inst_probe_out153_UNCONNECTED[0]),
        .probe_out154(NLW_inst_probe_out154_UNCONNECTED[0]),
        .probe_out155(NLW_inst_probe_out155_UNCONNECTED[0]),
        .probe_out156(NLW_inst_probe_out156_UNCONNECTED[0]),
        .probe_out157(NLW_inst_probe_out157_UNCONNECTED[0]),
        .probe_out158(NLW_inst_probe_out158_UNCONNECTED[0]),
        .probe_out159(NLW_inst_probe_out159_UNCONNECTED[0]),
        .probe_out16(NLW_inst_probe_out16_UNCONNECTED[0]),
        .probe_out160(NLW_inst_probe_out160_UNCONNECTED[0]),
        .probe_out161(NLW_inst_probe_out161_UNCONNECTED[0]),
        .probe_out162(NLW_inst_probe_out162_UNCONNECTED[0]),
        .probe_out163(NLW_inst_probe_out163_UNCONNECTED[0]),
        .probe_out164(NLW_inst_probe_out164_UNCONNECTED[0]),
        .probe_out165(NLW_inst_probe_out165_UNCONNECTED[0]),
        .probe_out166(NLW_inst_probe_out166_UNCONNECTED[0]),
        .probe_out167(NLW_inst_probe_out167_UNCONNECTED[0]),
        .probe_out168(NLW_inst_probe_out168_UNCONNECTED[0]),
        .probe_out169(NLW_inst_probe_out169_UNCONNECTED[0]),
        .probe_out17(NLW_inst_probe_out17_UNCONNECTED[0]),
        .probe_out170(NLW_inst_probe_out170_UNCONNECTED[0]),
        .probe_out171(NLW_inst_probe_out171_UNCONNECTED[0]),
        .probe_out172(NLW_inst_probe_out172_UNCONNECTED[0]),
        .probe_out173(NLW_inst_probe_out173_UNCONNECTED[0]),
        .probe_out174(NLW_inst_probe_out174_UNCONNECTED[0]),
        .probe_out175(NLW_inst_probe_out175_UNCONNECTED[0]),
        .probe_out176(NLW_inst_probe_out176_UNCONNECTED[0]),
        .probe_out177(NLW_inst_probe_out177_UNCONNECTED[0]),
        .probe_out178(NLW_inst_probe_out178_UNCONNECTED[0]),
        .probe_out179(NLW_inst_probe_out179_UNCONNECTED[0]),
        .probe_out18(NLW_inst_probe_out18_UNCONNECTED[0]),
        .probe_out180(NLW_inst_probe_out180_UNCONNECTED[0]),
        .probe_out181(NLW_inst_probe_out181_UNCONNECTED[0]),
        .probe_out182(NLW_inst_probe_out182_UNCONNECTED[0]),
        .probe_out183(NLW_inst_probe_out183_UNCONNECTED[0]),
        .probe_out184(NLW_inst_probe_out184_UNCONNECTED[0]),
        .probe_out185(NLW_inst_probe_out185_UNCONNECTED[0]),
        .probe_out186(NLW_inst_probe_out186_UNCONNECTED[0]),
        .probe_out187(NLW_inst_probe_out187_UNCONNECTED[0]),
        .probe_out188(NLW_inst_probe_out188_UNCONNECTED[0]),
        .probe_out189(NLW_inst_probe_out189_UNCONNECTED[0]),
        .probe_out19(NLW_inst_probe_out19_UNCONNECTED[0]),
        .probe_out190(NLW_inst_probe_out190_UNCONNECTED[0]),
        .probe_out191(NLW_inst_probe_out191_UNCONNECTED[0]),
        .probe_out192(NLW_inst_probe_out192_UNCONNECTED[0]),
        .probe_out193(NLW_inst_probe_out193_UNCONNECTED[0]),
        .probe_out194(NLW_inst_probe_out194_UNCONNECTED[0]),
        .probe_out195(NLW_inst_probe_out195_UNCONNECTED[0]),
        .probe_out196(NLW_inst_probe_out196_UNCONNECTED[0]),
        .probe_out197(NLW_inst_probe_out197_UNCONNECTED[0]),
        .probe_out198(NLW_inst_probe_out198_UNCONNECTED[0]),
        .probe_out199(NLW_inst_probe_out199_UNCONNECTED[0]),
        .probe_out2(NLW_inst_probe_out2_UNCONNECTED[0]),
        .probe_out20(NLW_inst_probe_out20_UNCONNECTED[0]),
        .probe_out200(NLW_inst_probe_out200_UNCONNECTED[0]),
        .probe_out201(NLW_inst_probe_out201_UNCONNECTED[0]),
        .probe_out202(NLW_inst_probe_out202_UNCONNECTED[0]),
        .probe_out203(NLW_inst_probe_out203_UNCONNECTED[0]),
        .probe_out204(NLW_inst_probe_out204_UNCONNECTED[0]),
        .probe_out205(NLW_inst_probe_out205_UNCONNECTED[0]),
        .probe_out206(NLW_inst_probe_out206_UNCONNECTED[0]),
        .probe_out207(NLW_inst_probe_out207_UNCONNECTED[0]),
        .probe_out208(NLW_inst_probe_out208_UNCONNECTED[0]),
        .probe_out209(NLW_inst_probe_out209_UNCONNECTED[0]),
        .probe_out21(NLW_inst_probe_out21_UNCONNECTED[0]),
        .probe_out210(NLW_inst_probe_out210_UNCONNECTED[0]),
        .probe_out211(NLW_inst_probe_out211_UNCONNECTED[0]),
        .probe_out212(NLW_inst_probe_out212_UNCONNECTED[0]),
        .probe_out213(NLW_inst_probe_out213_UNCONNECTED[0]),
        .probe_out214(NLW_inst_probe_out214_UNCONNECTED[0]),
        .probe_out215(NLW_inst_probe_out215_UNCONNECTED[0]),
        .probe_out216(NLW_inst_probe_out216_UNCONNECTED[0]),
        .probe_out217(NLW_inst_probe_out217_UNCONNECTED[0]),
        .probe_out218(NLW_inst_probe_out218_UNCONNECTED[0]),
        .probe_out219(NLW_inst_probe_out219_UNCONNECTED[0]),
        .probe_out22(NLW_inst_probe_out22_UNCONNECTED[0]),
        .probe_out220(NLW_inst_probe_out220_UNCONNECTED[0]),
        .probe_out221(NLW_inst_probe_out221_UNCONNECTED[0]),
        .probe_out222(NLW_inst_probe_out222_UNCONNECTED[0]),
        .probe_out223(NLW_inst_probe_out223_UNCONNECTED[0]),
        .probe_out224(NLW_inst_probe_out224_UNCONNECTED[0]),
        .probe_out225(NLW_inst_probe_out225_UNCONNECTED[0]),
        .probe_out226(NLW_inst_probe_out226_UNCONNECTED[0]),
        .probe_out227(NLW_inst_probe_out227_UNCONNECTED[0]),
        .probe_out228(NLW_inst_probe_out228_UNCONNECTED[0]),
        .probe_out229(NLW_inst_probe_out229_UNCONNECTED[0]),
        .probe_out23(NLW_inst_probe_out23_UNCONNECTED[0]),
        .probe_out230(NLW_inst_probe_out230_UNCONNECTED[0]),
        .probe_out231(NLW_inst_probe_out231_UNCONNECTED[0]),
        .probe_out232(NLW_inst_probe_out232_UNCONNECTED[0]),
        .probe_out233(NLW_inst_probe_out233_UNCONNECTED[0]),
        .probe_out234(NLW_inst_probe_out234_UNCONNECTED[0]),
        .probe_out235(NLW_inst_probe_out235_UNCONNECTED[0]),
        .probe_out236(NLW_inst_probe_out236_UNCONNECTED[0]),
        .probe_out237(NLW_inst_probe_out237_UNCONNECTED[0]),
        .probe_out238(NLW_inst_probe_out238_UNCONNECTED[0]),
        .probe_out239(NLW_inst_probe_out239_UNCONNECTED[0]),
        .probe_out24(NLW_inst_probe_out24_UNCONNECTED[0]),
        .probe_out240(NLW_inst_probe_out240_UNCONNECTED[0]),
        .probe_out241(NLW_inst_probe_out241_UNCONNECTED[0]),
        .probe_out242(NLW_inst_probe_out242_UNCONNECTED[0]),
        .probe_out243(NLW_inst_probe_out243_UNCONNECTED[0]),
        .probe_out244(NLW_inst_probe_out244_UNCONNECTED[0]),
        .probe_out245(NLW_inst_probe_out245_UNCONNECTED[0]),
        .probe_out246(NLW_inst_probe_out246_UNCONNECTED[0]),
        .probe_out247(NLW_inst_probe_out247_UNCONNECTED[0]),
        .probe_out248(NLW_inst_probe_out248_UNCONNECTED[0]),
        .probe_out249(NLW_inst_probe_out249_UNCONNECTED[0]),
        .probe_out25(NLW_inst_probe_out25_UNCONNECTED[0]),
        .probe_out250(NLW_inst_probe_out250_UNCONNECTED[0]),
        .probe_out251(NLW_inst_probe_out251_UNCONNECTED[0]),
        .probe_out252(NLW_inst_probe_out252_UNCONNECTED[0]),
        .probe_out253(NLW_inst_probe_out253_UNCONNECTED[0]),
        .probe_out254(NLW_inst_probe_out254_UNCONNECTED[0]),
        .probe_out255(NLW_inst_probe_out255_UNCONNECTED[0]),
        .probe_out26(NLW_inst_probe_out26_UNCONNECTED[0]),
        .probe_out27(NLW_inst_probe_out27_UNCONNECTED[0]),
        .probe_out28(NLW_inst_probe_out28_UNCONNECTED[0]),
        .probe_out29(NLW_inst_probe_out29_UNCONNECTED[0]),
        .probe_out3(NLW_inst_probe_out3_UNCONNECTED[0]),
        .probe_out30(NLW_inst_probe_out30_UNCONNECTED[0]),
        .probe_out31(NLW_inst_probe_out31_UNCONNECTED[0]),
        .probe_out32(NLW_inst_probe_out32_UNCONNECTED[0]),
        .probe_out33(NLW_inst_probe_out33_UNCONNECTED[0]),
        .probe_out34(NLW_inst_probe_out34_UNCONNECTED[0]),
        .probe_out35(NLW_inst_probe_out35_UNCONNECTED[0]),
        .probe_out36(NLW_inst_probe_out36_UNCONNECTED[0]),
        .probe_out37(NLW_inst_probe_out37_UNCONNECTED[0]),
        .probe_out38(NLW_inst_probe_out38_UNCONNECTED[0]),
        .probe_out39(NLW_inst_probe_out39_UNCONNECTED[0]),
        .probe_out4(NLW_inst_probe_out4_UNCONNECTED[0]),
        .probe_out40(NLW_inst_probe_out40_UNCONNECTED[0]),
        .probe_out41(NLW_inst_probe_out41_UNCONNECTED[0]),
        .probe_out42(NLW_inst_probe_out42_UNCONNECTED[0]),
        .probe_out43(NLW_inst_probe_out43_UNCONNECTED[0]),
        .probe_out44(NLW_inst_probe_out44_UNCONNECTED[0]),
        .probe_out45(NLW_inst_probe_out45_UNCONNECTED[0]),
        .probe_out46(NLW_inst_probe_out46_UNCONNECTED[0]),
        .probe_out47(NLW_inst_probe_out47_UNCONNECTED[0]),
        .probe_out48(NLW_inst_probe_out48_UNCONNECTED[0]),
        .probe_out49(NLW_inst_probe_out49_UNCONNECTED[0]),
        .probe_out5(NLW_inst_probe_out5_UNCONNECTED[0]),
        .probe_out50(NLW_inst_probe_out50_UNCONNECTED[0]),
        .probe_out51(NLW_inst_probe_out51_UNCONNECTED[0]),
        .probe_out52(NLW_inst_probe_out52_UNCONNECTED[0]),
        .probe_out53(NLW_inst_probe_out53_UNCONNECTED[0]),
        .probe_out54(NLW_inst_probe_out54_UNCONNECTED[0]),
        .probe_out55(NLW_inst_probe_out55_UNCONNECTED[0]),
        .probe_out56(NLW_inst_probe_out56_UNCONNECTED[0]),
        .probe_out57(NLW_inst_probe_out57_UNCONNECTED[0]),
        .probe_out58(NLW_inst_probe_out58_UNCONNECTED[0]),
        .probe_out59(NLW_inst_probe_out59_UNCONNECTED[0]),
        .probe_out6(NLW_inst_probe_out6_UNCONNECTED[0]),
        .probe_out60(NLW_inst_probe_out60_UNCONNECTED[0]),
        .probe_out61(NLW_inst_probe_out61_UNCONNECTED[0]),
        .probe_out62(NLW_inst_probe_out62_UNCONNECTED[0]),
        .probe_out63(NLW_inst_probe_out63_UNCONNECTED[0]),
        .probe_out64(NLW_inst_probe_out64_UNCONNECTED[0]),
        .probe_out65(NLW_inst_probe_out65_UNCONNECTED[0]),
        .probe_out66(NLW_inst_probe_out66_UNCONNECTED[0]),
        .probe_out67(NLW_inst_probe_out67_UNCONNECTED[0]),
        .probe_out68(NLW_inst_probe_out68_UNCONNECTED[0]),
        .probe_out69(NLW_inst_probe_out69_UNCONNECTED[0]),
        .probe_out7(NLW_inst_probe_out7_UNCONNECTED[0]),
        .probe_out70(NLW_inst_probe_out70_UNCONNECTED[0]),
        .probe_out71(NLW_inst_probe_out71_UNCONNECTED[0]),
        .probe_out72(NLW_inst_probe_out72_UNCONNECTED[0]),
        .probe_out73(NLW_inst_probe_out73_UNCONNECTED[0]),
        .probe_out74(NLW_inst_probe_out74_UNCONNECTED[0]),
        .probe_out75(NLW_inst_probe_out75_UNCONNECTED[0]),
        .probe_out76(NLW_inst_probe_out76_UNCONNECTED[0]),
        .probe_out77(NLW_inst_probe_out77_UNCONNECTED[0]),
        .probe_out78(NLW_inst_probe_out78_UNCONNECTED[0]),
        .probe_out79(NLW_inst_probe_out79_UNCONNECTED[0]),
        .probe_out8(NLW_inst_probe_out8_UNCONNECTED[0]),
        .probe_out80(NLW_inst_probe_out80_UNCONNECTED[0]),
        .probe_out81(NLW_inst_probe_out81_UNCONNECTED[0]),
        .probe_out82(NLW_inst_probe_out82_UNCONNECTED[0]),
        .probe_out83(NLW_inst_probe_out83_UNCONNECTED[0]),
        .probe_out84(NLW_inst_probe_out84_UNCONNECTED[0]),
        .probe_out85(NLW_inst_probe_out85_UNCONNECTED[0]),
        .probe_out86(NLW_inst_probe_out86_UNCONNECTED[0]),
        .probe_out87(NLW_inst_probe_out87_UNCONNECTED[0]),
        .probe_out88(NLW_inst_probe_out88_UNCONNECTED[0]),
        .probe_out89(NLW_inst_probe_out89_UNCONNECTED[0]),
        .probe_out9(NLW_inst_probe_out9_UNCONNECTED[0]),
        .probe_out90(NLW_inst_probe_out90_UNCONNECTED[0]),
        .probe_out91(NLW_inst_probe_out91_UNCONNECTED[0]),
        .probe_out92(NLW_inst_probe_out92_UNCONNECTED[0]),
        .probe_out93(NLW_inst_probe_out93_UNCONNECTED[0]),
        .probe_out94(NLW_inst_probe_out94_UNCONNECTED[0]),
        .probe_out95(NLW_inst_probe_out95_UNCONNECTED[0]),
        .probe_out96(NLW_inst_probe_out96_UNCONNECTED[0]),
        .probe_out97(NLW_inst_probe_out97_UNCONNECTED[0]),
        .probe_out98(NLW_inst_probe_out98_UNCONNECTED[0]),
        .probe_out99(NLW_inst_probe_out99_UNCONNECTED[0]),
        .sl_iport0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .sl_oport0(NLW_inst_sl_oport0_UNCONNECTED[16:0]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module top_aurora_0_0_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module top_aurora_0_0_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module top_aurora_0_0_blk_mem_gen_generic_cstr
   (D,
    ENA_dly_D,
    s_aclk,
    ENB_I,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    s_axis_tvalid,
    out);
  output [32:0]D;
  output ENA_dly_D;
  input s_aclk;
  input ENB_I;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input s_axis_tvalid;
  input out;

  wire [32:0]D;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;

  top_aurora_0_0_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module top_aurora_0_0_blk_mem_gen_prim_width
   (D,
    ENA_dly_D,
    s_aclk,
    ENB_I,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    s_axis_tvalid,
    out);
  output [32:0]D;
  output ENA_dly_D;
  input s_aclk;
  input ENB_I;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input s_axis_tvalid;
  input out;

  wire [32:0]D;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [0:0]E;
  wire ENA_dly;
  wire ENA_dly_D;
  wire ENB_I;
  wire POR_A;
  wire [4:0]RSTA_SHFT_REG;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire out;
  wire p_3_out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(ENA_dly),
        .Q(ENA_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(POR_A),
        .Q(ENA_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_A_i_1 
       (.I0(RSTA_SHFT_REG[0]),
        .I1(RSTA_SHFT_REG[4]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_A_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(POR_A),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "inst/fifo_loop_0/U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "inst/fifo_loop_0/U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(s_aclk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  top_aurora_0_0_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .POR_A(POR_A),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module top_aurora_0_0_blk_mem_gen_prim_wrapper
   (D,
    s_aclk,
    ENB_I,
    POR_A,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    ENA_dly_D,
    s_axis_tvalid,
    out);
  output [32:0]D;
  input s_aclk;
  input ENB_I;
  input POR_A;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input ENA_dly_D;
  input s_axis_tvalid;
  input out;

  wire [32:0]D;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_72 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_73 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_74 ;
  wire [0:0]E;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire POR_A;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_1 ,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(s_aclk),
        .CLKBWRCLK(s_aclk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({s_axis_tdata[31:8],s_axis_tdata[6:0],s_axis_tlast}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,s_axis_tdata[7]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({D[32:9],D[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_72 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_73 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_74 ,D[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA_I),
        .ENBWREN(ENB_I),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(POR_A),
        .RSTRAMB(POR_A),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({E,E,E,E}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
  LUT3 #(
    .INIT(8'hAE)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1 
       (.I0(ENA_dly_D),
        .I1(s_axis_tvalid),
        .I2(out),
        .O(ENA_I));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module top_aurora_0_0_blk_mem_gen_top
   (D,
    ENA_dly_D,
    s_aclk,
    ENB_I,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    s_axis_tvalid,
    out);
  output [32:0]D;
  output ENA_dly_D;
  input s_aclk;
  input ENB_I;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input s_axis_tvalid;
  input out;

  wire [32:0]D;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;

  top_aurora_0_0_blk_mem_gen_generic_cstr \valid.cstr 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_2" *) 
module top_aurora_0_0_blk_mem_gen_v8_4_2
   (D,
    ENA_dly_D,
    s_aclk,
    ENB_I,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    s_axis_tvalid,
    out);
  output [32:0]D;
  output ENA_dly_D;
  input s_aclk;
  input ENB_I;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input s_axis_tvalid;
  input out;

  wire [32:0]D;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;

  top_aurora_0_0_blk_mem_gen_v8_4_2_synth inst_blk_mem_gen
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_2_synth" *) 
module top_aurora_0_0_blk_mem_gen_v8_4_2_synth
   (D,
    ENA_dly_D,
    s_aclk,
    ENB_I,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    s_axis_tvalid,
    out);
  output [32:0]D;
  output ENA_dly_D;
  input s_aclk;
  input ENB_I;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input s_axis_tvalid;
  input out;

  wire [32:0]D;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;

  top_aurora_0_0_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module top_aurora_0_0_compare
   (\grstd1.grst_full.grst_f.rst_d3_reg ,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    ram_full_i_reg,
    ram_full_i_reg_0,
    ram_full_i_reg_1,
    comp1,
    s_axis_tvalid,
    out);
  output \grstd1.grst_full.grst_f.rst_d3_reg ;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input ram_full_i_reg;
  input ram_full_i_reg_0;
  input ram_full_i_reg_1;
  input comp1;
  input s_axis_tvalid;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp0;
  wire comp1;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire out;
  wire ram_full_i_reg;
  wire ram_full_i_reg_0;
  wire ram_full_i_reg_1;
  wire s_axis_tvalid;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\gmux.gm[4].gms.ms_0 ,\gmux.gm[3].gms.ms_0 ,\gmux.gm[2].gms.ms_0 ,\gmux.gm[1].gms.ms_0 }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],ram_full_i_reg}));
  LUT6 #(
    .INIT(64'h31313131F0000000)) 
    ram_full_fb_i_i_1
       (.I0(comp0),
        .I1(ram_full_i_reg_0),
        .I2(ram_full_i_reg_1),
        .I3(comp1),
        .I4(s_axis_tvalid),
        .I5(out),
        .O(\grstd1.grst_full.grst_f.rst_d3_reg ));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module top_aurora_0_0_compare_0
   (comp1,
    p_2_out,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    \gaf.gaf0.ram_afull_i_reg ,
    out,
    \gaf.gaf0.ram_afull_i_reg_0 ,
    \gaf.gaf0.ram_afull_i_reg_1 ,
    p_0_in,
    \gaf.gaf0.ram_afull_i_reg_2 );
  output comp1;
  output p_2_out;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input \gaf.gaf0.ram_afull_i_reg ;
  input out;
  input \gaf.gaf0.ram_afull_i_reg_0 ;
  input \gaf.gaf0.ram_afull_i_reg_1 ;
  input p_0_in;
  input \gaf.gaf0.ram_afull_i_reg_2 ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire \gaf.gaf0.ram_afull_i_reg ;
  wire \gaf.gaf0.ram_afull_i_reg_0 ;
  wire \gaf.gaf0.ram_afull_i_reg_1 ;
  wire \gaf.gaf0.ram_afull_i_reg_2 ;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire out;
  wire p_0_in;
  wire p_2_out;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0C040C04FF0C0C0C)) 
    \gaf.gaf0.ram_afull_i_i_1 
       (.I0(comp1),
        .I1(out),
        .I2(\gaf.gaf0.ram_afull_i_reg_0 ),
        .I3(\gaf.gaf0.ram_afull_i_reg_1 ),
        .I4(p_0_in),
        .I5(\gaf.gaf0.ram_afull_i_reg_2 ),
        .O(p_2_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\gmux.gm[4].gms.ms_0 ,\gmux.gm[3].gms.ms_0 ,\gmux.gm[2].gms.ms_0 ,\gmux.gm[1].gms.ms_0 }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gaf.gaf0.ram_afull_i_reg }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module top_aurora_0_0_compare_1
   (p_0_in,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    \gaf.gaf0.ram_afull_i_reg );
  output p_0_in;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input \gaf.gaf0.ram_afull_i_reg ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire \gaf.gaf0.ram_afull_i_reg ;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire p_0_in;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\gmux.gm[4].gms.ms_0 ,\gmux.gm[3].gms.ms_0 ,\gmux.gm[2].gms.ms_0 ,\gmux.gm[1].gms.ms_0 }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],p_0_in}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gaf.gaf0.ram_afull_i_reg }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module top_aurora_0_0_compare_2
   (comp0,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    ram_empty_i_reg);
  output comp0;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input ram_empty_i_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp0;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire ram_empty_i_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\gmux.gm[4].gms.ms_0 ,\gmux.gm[3].gms.ms_0 ,\gmux.gm[2].gms.ms_0 ,\gmux.gm[1].gms.ms_0 }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],ram_empty_i_reg}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module top_aurora_0_0_compare_3
   (ram_empty_fb_i_reg,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    out,
    comp0);
  output ram_empty_fb_i_reg;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input ram_empty_i_reg;
  input ram_empty_i_reg_0;
  input ram_empty_i_reg_1;
  input ram_empty_i_reg_2;
  input out;
  input comp0;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp0;
  wire comp1;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\gmux.gm[4].gms.ms_0 ,\gmux.gm[3].gms.ms_0 ,\gmux.gm[2].gms.ms_0 ,\gmux.gm[1].gms.ms_0 }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],ram_empty_i_reg}));
  LUT6 #(
    .INIT(64'hFFCCFF80FFFFFF80)) 
    ram_empty_fb_i_i_1
       (.I0(comp1),
        .I1(ram_empty_i_reg_0),
        .I2(ram_empty_i_reg_1),
        .I3(ram_empty_i_reg_2),
        .I4(out),
        .I5(comp0),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module top_aurora_0_0_fifo_generator_ramfifo
   (src_rst,
    wr_rst_busy,
    SR,
    \goreg_bm.dout_i_reg[32] ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ,
    axis_wr_eop,
    E,
    m_axis_tvalid,
    D,
    s_axis_tready,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    Q,
    axis_wr_eop_d1,
    m_axis_tready,
    axis_pkt_read,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ,
    s_axis_tvalid,
    DI,
    S,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ,
    s_aresetn);
  output src_rst;
  output wr_rst_busy;
  output [0:0]SR;
  output [32:0]\goreg_bm.dout_i_reg[32] ;
  output \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ;
  output axis_wr_eop;
  output [0:0]E;
  output m_axis_tvalid;
  output [9:0]D;
  output s_axis_tready;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [8:0]Q;
  input axis_wr_eop_d1;
  input m_axis_tready;
  input axis_pkt_read;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  input s_axis_tvalid;
  input [0:0]DI;
  input [2:0]S;
  input [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  input [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  input s_aresetn;

  wire [9:0]D;
  wire [0:0]DI;
  wire [0:0]E;
  wire [8:0]Q;
  wire [2:0]S;
  wire [0:0]SR;
  wire axis_pkt_read;
  wire axis_wr_eop;
  wire axis_wr_eop_d1;
  wire dout_i;
  wire empty_fb_axis;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ;
  wire [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  wire [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ;
  wire \gntv_or_sync_fifo.gl0.rd_n_14 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_15 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_16 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_17 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_18 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_19 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_2 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_20 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_21 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_22 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_23 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_24 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_25 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_26 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_27 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_3 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_14 ;
  wire [32:0]\goreg_bm.dout_i_reg[32] ;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire p_0_in;
  wire [9:0]p_0_out;
  wire p_10_out;
  wire [9:0]p_12_out;
  wire [9:0]p_13_out;
  wire p_19_out;
  wire rst_full_gen_i;
  wire rstblk_n_4;
  wire rstblk_n_5;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire src_rst;
  wire [9:0]wr_pntr_plus2;
  wire wr_rst_busy;

  top_aurora_0_0_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.D(D),
        .DI(DI),
        .E(dout_i),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .Q(Q),
        .S(S),
        .axis_pkt_read(axis_pkt_read),
        .axis_wr_eop_d1(axis_wr_eop_d1),
        .empty_fwft_fb_o_i_reg(empty_fb_axis),
        .empty_fwft_i_reg({rstblk_n_4,rstblk_n_5}),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] (\goreg_bm.dout_i_reg[32] [0]),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg (E),
        .\gc0.count_d1_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_17 ),
        .\gc0.count_d1_reg[0]_0 (\gntv_or_sync_fifo.gl0.rd_n_22 ),
        .\gc0.count_d1_reg[0]_1 (\gntv_or_sync_fifo.gl0.rd_n_27 ),
        .\gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.rd_n_16 ),
        .\gc0.count_d1_reg[2]_0 (\gntv_or_sync_fifo.gl0.rd_n_21 ),
        .\gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.rd_n_26 ),
        .\gc0.count_d1_reg[4] (\gntv_or_sync_fifo.gl0.rd_n_15 ),
        .\gc0.count_d1_reg[4]_0 (\gntv_or_sync_fifo.gl0.rd_n_20 ),
        .\gc0.count_d1_reg[5] (\gntv_or_sync_fifo.gl0.rd_n_25 ),
        .\gc0.count_d1_reg[6] (\gntv_or_sync_fifo.gl0.rd_n_14 ),
        .\gc0.count_d1_reg[6]_0 (\gntv_or_sync_fifo.gl0.rd_n_19 ),
        .\gc0.count_d1_reg[6]_1 (\gntv_or_sync_fifo.gl0.rd_n_24 ),
        .\gc0.count_d1_reg[8] (\gntv_or_sync_fifo.gl0.rd_n_18 ),
        .\gc0.count_d1_reg[9] (\gntv_or_sync_fifo.gl0.rd_n_3 ),
        .\gc0.count_d1_reg[9]_0 (p_0_out),
        .\gc0.count_d1_reg[9]_1 (\gntv_or_sync_fifo.gl0.rd_n_23 ),
        .\gc0.count_reg[0] (SR),
        .\gmux.gm[4].gms.ms (p_12_out),
        .\gmux.gm[4].gms.ms_0 (p_13_out),
        .\gmux.gm[4].gms.ms_1 (wr_pntr_plus2),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .out(p_10_out),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .s_aclk(s_aclk));
  top_aurora_0_0_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.E(p_19_out),
        .Q(wr_pntr_plus2),
        .axis_wr_eop(axis_wr_eop),
        .\gaf.gaf0.ram_afull_i_reg (\gntv_or_sync_fifo.gl0.wr_n_14 ),
        .\gaf.gaf0.ram_afull_i_reg_0 (\gntv_or_sync_fifo.gl0.rd_n_18 ),
        .\gaf.gaf0.ram_afull_i_reg_1 (\gntv_or_sync_fifo.gl0.rd_n_23 ),
        .\gaf.gaf0.ram_afull_i_reg_2 (rst_full_gen_i),
        .\gaf.gaf0.ram_afull_i_reg_3 (\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg (p_10_out),
        .\gcc0.gc1.gsym.count_d1_reg[9] (p_13_out),
        .\gcc0.gc1.gsym.count_d2_reg[9] (p_12_out),
        .\gcc0.gc1.gsym.count_reg[0] (SR),
        .\gmux.gm[1].gms.ms (\gntv_or_sync_fifo.gl0.rd_n_17 ),
        .\gmux.gm[1].gms.ms_0 (\gntv_or_sync_fifo.gl0.rd_n_22 ),
        .\gmux.gm[1].gms.ms_1 (\gntv_or_sync_fifo.gl0.rd_n_27 ),
        .\gmux.gm[2].gms.ms (\gntv_or_sync_fifo.gl0.rd_n_16 ),
        .\gmux.gm[2].gms.ms_0 (\gntv_or_sync_fifo.gl0.rd_n_21 ),
        .\gmux.gm[2].gms.ms_1 (\gntv_or_sync_fifo.gl0.rd_n_26 ),
        .\gmux.gm[3].gms.ms (\gntv_or_sync_fifo.gl0.rd_n_15 ),
        .\gmux.gm[3].gms.ms_0 (\gntv_or_sync_fifo.gl0.rd_n_20 ),
        .\gmux.gm[3].gms.ms_1 (\gntv_or_sync_fifo.gl0.rd_n_25 ),
        .\gmux.gm[4].gms.ms (\gntv_or_sync_fifo.gl0.rd_n_14 ),
        .\gmux.gm[4].gms.ms_0 (\gntv_or_sync_fifo.gl0.rd_n_19 ),
        .\gmux.gm[4].gms.ms_1 (\gntv_or_sync_fifo.gl0.rd_n_24 ),
        .out(p_0_in),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gl0.rd_n_3 ),
        .s_aclk(s_aclk),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
  top_aurora_0_0_memory \gntv_or_sync_fifo.mem 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_12_out),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (p_0_out),
        .E(p_19_out),
        .ENA_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENA_dly_D ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .Q(Q[0]),
        .axis_pkt_read(axis_pkt_read),
        .axis_wr_eop_d1(axis_wr_eop_d1),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_0 (\gntv_or_sync_fifo.gl0.wr_n_14 ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_1 (SR),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_2 (empty_fb_axis),
        .\goreg_bm.dout_i_reg[32]_0 (\goreg_bm.dout_i_reg[32] ),
        .\goreg_bm.dout_i_reg[32]_1 (dout_i),
        .m_axis_tready(m_axis_tready),
        .out(p_0_in),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
  top_aurora_0_0_reset_blk_ramfifo__parameterized0 rstblk
       (.Q({rstblk_n_4,rstblk_n_5}),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0]_0 (SR),
        .out(rst_full_gen_i),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .src_rst(src_rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module top_aurora_0_0_fifo_generator_top
   (src_rst,
    wr_rst_busy,
    sckt_wr_rst_o_axis,
    \goreg_bm.dout_i_reg[32] ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ,
    axis_wr_eop,
    E,
    m_axis_tvalid,
    D,
    s_axis_tready,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    Q,
    axis_wr_eop_d1,
    m_axis_tready,
    axis_pkt_read,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ,
    s_axis_tvalid,
    DI,
    S,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ,
    s_aresetn);
  output src_rst;
  output wr_rst_busy;
  output sckt_wr_rst_o_axis;
  output [32:0]\goreg_bm.dout_i_reg[32] ;
  output \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ;
  output axis_wr_eop;
  output [0:0]E;
  output m_axis_tvalid;
  output [9:0]D;
  output s_axis_tready;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [8:0]Q;
  input axis_wr_eop_d1;
  input m_axis_tready;
  input axis_pkt_read;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  input s_axis_tvalid;
  input [0:0]DI;
  input [2:0]S;
  input [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  input [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  input s_aresetn;

  wire [9:0]D;
  wire [0:0]DI;
  wire [0:0]E;
  wire [8:0]Q;
  wire [2:0]S;
  wire axis_pkt_read;
  wire axis_wr_eop;
  wire axis_wr_eop_d1;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ;
  wire [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  wire [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  wire [32:0]\goreg_bm.dout_i_reg[32] ;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire sckt_wr_rst_o_axis;
  wire src_rst;
  wire wr_rst_busy;

  top_aurora_0_0_fifo_generator_ramfifo \grf.rf 
       (.D(D),
        .DI(DI),
        .E(E),
        .Q(Q),
        .S(S),
        .SR(sckt_wr_rst_o_axis),
        .axis_pkt_read(axis_pkt_read),
        .axis_wr_eop(axis_wr_eop),
        .axis_wr_eop_d1(axis_wr_eop_d1),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ),
        .\goreg_bm.dout_i_reg[32] (\goreg_bm.dout_i_reg[32] ),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .src_rst(src_rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "1" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "32" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "1" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "18" *) 
(* C_DIN_WIDTH_AXIS = "33" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "18" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "1" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "virtex7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "1" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "2" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "2" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "2" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "1" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "4kx4" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "14" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "14" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "14" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_3" *) 
module top_aurora_0_0_fifo_generator_v13_2_3
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [17:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [17:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [31:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [0:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [0:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  assign almost_empty = \<const1> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const0> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[17] = \<const0> ;
  assign dout[16] = \<const0> ;
  assign dout[15] = \<const0> ;
  assign dout[14] = \<const0> ;
  assign dout[13] = \<const0> ;
  assign dout[12] = \<const0> ;
  assign dout[11] = \<const0> ;
  assign dout[10] = \<const0> ;
  assign dout[9] = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7] = \<const0> ;
  assign dout[6] = \<const0> ;
  assign dout[5] = \<const0> ;
  assign dout[4] = \<const0> ;
  assign dout[3] = \<const0> ;
  assign dout[2] = \<const0> ;
  assign dout[1] = \<const0> ;
  assign dout[0] = \<const0> ;
  assign empty = \<const1> ;
  assign full = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const1> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  top_aurora_0_0_fifo_generator_v13_2_3_synth inst_fifo_gen
       (.Q({m_axis_tdata,m_axis_tlast}),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_3_synth" *) 
module top_aurora_0_0_fifo_generator_v13_2_3_synth
   (Q,
    wr_rst_busy,
    m_axis_tvalid,
    s_axis_tready,
    s_aclk,
    m_axis_tready,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tvalid,
    s_aresetn);
  output [32:0]Q;
  output wr_rst_busy;
  output m_axis_tvalid;
  output s_axis_tready;
  input s_aclk;
  input m_axis_tready;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input s_axis_tvalid;
  input s_aresetn;

  wire [32:0]Q;
  wire axis_pkt_read;
  wire axis_wr_eop;
  wire axis_wr_eop_d1;
  wire \gaxis_fifo.gaxisf.axisf_n_36 ;
  wire \gaxis_fifo.gaxisf.axisf_n_38 ;
  wire \gaxis_fifo.gaxisf.axisf_n_40 ;
  wire \gaxis_fifo.gaxisf.axisf_n_41 ;
  wire \gaxis_fifo.gaxisf.axisf_n_42 ;
  wire \gaxis_fifo.gaxisf.axisf_n_43 ;
  wire \gaxis_fifo.gaxisf.axisf_n_44 ;
  wire \gaxis_fifo.gaxisf.axisf_n_45 ;
  wire \gaxis_fifo.gaxisf.axisf_n_46 ;
  wire \gaxis_fifo.gaxisf.axisf_n_47 ;
  wire \gaxis_fifo.gaxisf.axisf_n_48 ;
  wire \gaxis_fifo.gaxisf.axisf_n_49 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[0]_i_1_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_3_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_4_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_2_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_3_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_4_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_5_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_2_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_3_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_4_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_5_n_0 ;
  wire [10:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_3_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_5_n_0 ;
  wire inverted_reset;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire sckt_wr_rst_o_axis;
  wire wr_rst_busy;

  top_aurora_0_0_fifo_generator_top \gaxis_fifo.gaxisf.axisf 
       (.D({\gaxis_fifo.gaxisf.axisf_n_40 ,\gaxis_fifo.gaxisf.axisf_n_41 ,\gaxis_fifo.gaxisf.axisf_n_42 ,\gaxis_fifo.gaxisf.axisf_n_43 ,\gaxis_fifo.gaxisf.axisf_n_44 ,\gaxis_fifo.gaxisf.axisf_n_45 ,\gaxis_fifo.gaxisf.axisf_n_46 ,\gaxis_fifo.gaxisf.axisf_n_47 ,\gaxis_fifo.gaxisf.axisf_n_48 ,\gaxis_fifo.gaxisf.axisf_n_49 }),
        .DI(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_2_n_0 ),
        .E(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [8:0]),
        .S({\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_3_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_4_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_5_n_0 }),
        .axis_pkt_read(axis_pkt_read),
        .axis_wr_eop(axis_wr_eop),
        .axis_wr_eop_d1(axis_wr_eop_d1),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] (\gaxis_fifo.gaxisf.axisf_n_36 ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ({\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_3_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_4_n_0 }),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ({\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_2_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_3_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_4_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_5_n_0 }),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_3_n_0 ),
        .\goreg_bm.dout_i_reg[32] (Q),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .sckt_wr_rst_o_axis(sckt_wr_rst_o_axis),
        .src_rst(inverted_reset),
        .wr_rst_busy(wr_rst_busy));
  LUT1 #(
    .INIT(2'h1)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[0]_i_1 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [0]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_3 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [9]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [10]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_4 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [8]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [9]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_2 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [1]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_3 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [3]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [4]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_4 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [2]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [3]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_5 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [1]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [2]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_2 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [7]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [8]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_3 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [6]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [7]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_4 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [5]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [6]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_5 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [4]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [5]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[8]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[0]_i_1_n_0 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [0]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_40 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [10]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[1] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_49 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [1]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[2] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_48 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [2]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[3] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_47 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [3]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_46 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [4]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[5] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_45 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [5]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[6] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_44 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [6]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[7] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_43 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [7]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_42 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [8]),
        .R(sckt_wr_rst_o_axis));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[9] 
       (.C(s_aclk),
        .CE(\gaxis_fifo.gaxisf.axisf_n_38 ),
        .D(\gaxis_fifo.gaxisf.axisf_n_41 ),
        .Q(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [9]),
        .R(sckt_wr_rst_o_axis));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_3 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_5_n_0 ),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [5]),
        .I2(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [6]),
        .I3(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [3]),
        .I4(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [4]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_5 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [9]),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [10]),
        .I2(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [7]),
        .I3(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [8]),
        .I4(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [2]),
        .I5(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg__0 [1]),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\gaxis_fifo.gaxisf.axisf_n_36 ),
        .Q(axis_pkt_read),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(axis_wr_eop),
        .Q(axis_wr_eop_d1),
        .R(sckt_wr_rst_o_axis));
  top_aurora_0_0_reset_blk_ramfifo \reset_gen_cc.rstblk_cc 
       (.s_aclk(s_aclk),
        .src_rst(inverted_reset));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module top_aurora_0_0_memory
   (ENA_dly_D,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ,
    \goreg_bm.dout_i_reg[32]_0 ,
    s_aclk,
    ENB_I,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    s_axis_tdata,
    s_axis_tlast,
    E,
    Q,
    axis_pkt_read,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_0 ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_1 ,
    s_axis_tvalid,
    out,
    m_axis_tready,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_2 ,
    axis_wr_eop_d1,
    \goreg_bm.dout_i_reg[32]_1 );
  output ENA_dly_D;
  output \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ;
  output [32:0]\goreg_bm.dout_i_reg[32]_0 ;
  input s_aclk;
  input ENB_I;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input [0:0]E;
  input [0:0]Q;
  input axis_pkt_read;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_0 ;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_1 ;
  input s_axis_tvalid;
  input out;
  input m_axis_tready;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_2 ;
  input axis_wr_eop_d1;
  input [0:0]\goreg_bm.dout_i_reg[32]_1 ;

  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [9:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire [0:0]Q;
  wire axis_pkt_read;
  wire axis_wr_eop_d1;
  wire [32:0]doutb;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_2_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_1 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_2 ;
  wire [32:0]\goreg_bm.dout_i_reg[32]_0 ;
  wire [0:0]\goreg_bm.dout_i_reg[32]_1 ;
  wire m_axis_tready;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tvalid;

  LUT6 #(
    .INIT(64'h00000000FFBBFFB8)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_1 
       (.I0(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_2_n_0 ),
        .I1(Q),
        .I2(axis_pkt_read),
        .I3(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ),
        .I4(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_0 ),
        .I5(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_1 ),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[0] ));
  LUT5 #(
    .INIT(32'hFFFFFF7F)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_2 
       (.I0(\goreg_bm.dout_i_reg[32]_0 [0]),
        .I1(axis_pkt_read),
        .I2(m_axis_tready),
        .I3(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg_2 ),
        .I4(axis_wr_eop_d1),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_2_n_0 ));
  top_aurora_0_0_blk_mem_gen_v8_4_2 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .E(E),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tvalid(s_axis_tvalid));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[0] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[0]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[10] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[10]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[11] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[11]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[12] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[12]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[13] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[13]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[14] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[14]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[15] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[15]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[16] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[16]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[17] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[17]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[18] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[18]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[19] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[19]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[1] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[1]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[20] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[20]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[21] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[21]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[22] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[22]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[23] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[23]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[24] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[24]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[25] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[25]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[26] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[26]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[27] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[27]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[28] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[28]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[29] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[29]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[2] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[2]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[30] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[30]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[31] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[31]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[32] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[32]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[3] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[3]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[4] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[4]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[5] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[5]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[6] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[6]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[7] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[7]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[8] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[8]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[9] 
       (.C(s_aclk),
        .CE(\goreg_bm.dout_i_reg[32]_1 ),
        .D(doutb[9]),
        .Q(\goreg_bm.dout_i_reg[32]_0 [9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module top_aurora_0_0_rd_bin_cntr
   (\gc0.count_d1_reg[9]_0 ,
    Q,
    \gc0.count_d1_reg[6]_0 ,
    \gc0.count_d1_reg[4]_0 ,
    \gc0.count_d1_reg[2]_0 ,
    \gc0.count_d1_reg[0]_0 ,
    \gc0.count_reg[8]_0 ,
    \gc0.count_reg[6]_0 ,
    \gc0.count_reg[5]_0 ,
    \gc0.count_reg[2]_0 ,
    \gc0.count_reg[0]_0 ,
    \gc0.count_d1_reg[8]_0 ,
    \gc0.count_d1_reg[6]_1 ,
    \gc0.count_d1_reg[4]_1 ,
    \gc0.count_d1_reg[2]_1 ,
    \gc0.count_d1_reg[0]_1 ,
    \gc0.count_d1_reg[9]_1 ,
    \gc0.count_d1_reg[6]_2 ,
    \gc0.count_d1_reg[5]_0 ,
    \gc0.count_d1_reg[3]_0 ,
    \gc0.count_d1_reg[0]_2 ,
    \gc0.count_d1_reg[0]_3 ,
    \gc0.count_d1_reg[2]_2 ,
    \gc0.count_d1_reg[4]_2 ,
    \gc0.count_d1_reg[6]_3 ,
    \gc0.count_d1_reg[9]_2 ,
    \gmux.gm[4].gms.ms ,
    \gmux.gm[4].gms.ms_0 ,
    \gmux.gm[4].gms.ms_1 ,
    \gc0.count_reg[0]_1 ,
    E,
    s_aclk);
  output \gc0.count_d1_reg[9]_0 ;
  output [9:0]Q;
  output \gc0.count_d1_reg[6]_0 ;
  output \gc0.count_d1_reg[4]_0 ;
  output \gc0.count_d1_reg[2]_0 ;
  output \gc0.count_d1_reg[0]_0 ;
  output \gc0.count_reg[8]_0 ;
  output \gc0.count_reg[6]_0 ;
  output \gc0.count_reg[5]_0 ;
  output \gc0.count_reg[2]_0 ;
  output \gc0.count_reg[0]_0 ;
  output \gc0.count_d1_reg[8]_0 ;
  output \gc0.count_d1_reg[6]_1 ;
  output \gc0.count_d1_reg[4]_1 ;
  output \gc0.count_d1_reg[2]_1 ;
  output \gc0.count_d1_reg[0]_1 ;
  output \gc0.count_d1_reg[9]_1 ;
  output \gc0.count_d1_reg[6]_2 ;
  output \gc0.count_d1_reg[5]_0 ;
  output \gc0.count_d1_reg[3]_0 ;
  output \gc0.count_d1_reg[0]_2 ;
  output \gc0.count_d1_reg[0]_3 ;
  output \gc0.count_d1_reg[2]_2 ;
  output \gc0.count_d1_reg[4]_2 ;
  output \gc0.count_d1_reg[6]_3 ;
  output \gc0.count_d1_reg[9]_2 ;
  input [9:0]\gmux.gm[4].gms.ms ;
  input [9:0]\gmux.gm[4].gms.ms_0 ;
  input [9:0]\gmux.gm[4].gms.ms_1 ;
  input \gc0.count_reg[0]_1 ;
  input [0:0]E;
  input s_aclk;

  wire [0:0]E;
  wire [9:0]Q;
  wire \gc0.count[9]_i_2_n_0 ;
  wire \gc0.count_d1_reg[0]_0 ;
  wire \gc0.count_d1_reg[0]_1 ;
  wire \gc0.count_d1_reg[0]_2 ;
  wire \gc0.count_d1_reg[0]_3 ;
  wire \gc0.count_d1_reg[2]_0 ;
  wire \gc0.count_d1_reg[2]_1 ;
  wire \gc0.count_d1_reg[2]_2 ;
  wire \gc0.count_d1_reg[3]_0 ;
  wire \gc0.count_d1_reg[4]_0 ;
  wire \gc0.count_d1_reg[4]_1 ;
  wire \gc0.count_d1_reg[4]_2 ;
  wire \gc0.count_d1_reg[5]_0 ;
  wire \gc0.count_d1_reg[6]_0 ;
  wire \gc0.count_d1_reg[6]_1 ;
  wire \gc0.count_d1_reg[6]_2 ;
  wire \gc0.count_d1_reg[6]_3 ;
  wire \gc0.count_d1_reg[8]_0 ;
  wire \gc0.count_d1_reg[9]_0 ;
  wire \gc0.count_d1_reg[9]_1 ;
  wire \gc0.count_d1_reg[9]_2 ;
  wire \gc0.count_reg[0]_0 ;
  wire \gc0.count_reg[0]_1 ;
  wire \gc0.count_reg[2]_0 ;
  wire \gc0.count_reg[5]_0 ;
  wire \gc0.count_reg[6]_0 ;
  wire \gc0.count_reg[8]_0 ;
  wire [9:0]\gmux.gm[4].gms.ms ;
  wire [9:0]\gmux.gm[4].gms.ms_0 ;
  wire [9:0]\gmux.gm[4].gms.ms_1 ;
  wire [9:0]plusOp;
  wire [9:0]rd_pntr_plus1;
  wire s_aclk;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[2]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[2]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[4]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[9]_i_2_n_0 ),
        .I1(rd_pntr_plus1[6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[7]_i_1 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gc0.count[9]_i_2_n_0 ),
        .I2(rd_pntr_plus1[7]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[8]_i_1 
       (.I0(\gc0.count[9]_i_2_n_0 ),
        .I1(rd_pntr_plus1[6]),
        .I2(rd_pntr_plus1[7]),
        .I3(rd_pntr_plus1[8]),
        .O(plusOp[8]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[9]_i_1 
       (.I0(\gc0.count[9]_i_2_n_0 ),
        .I1(rd_pntr_plus1[8]),
        .I2(rd_pntr_plus1[7]),
        .I3(rd_pntr_plus1[6]),
        .I4(rd_pntr_plus1[9]),
        .O(plusOp[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gc0.count[9]_i_2 
       (.I0(rd_pntr_plus1[4]),
        .I1(rd_pntr_plus1[2]),
        .I2(rd_pntr_plus1[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(rd_pntr_plus1[3]),
        .I5(rd_pntr_plus1[5]),
        .O(\gc0.count[9]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(Q[4]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(Q[5]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[6]),
        .Q(Q[6]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[7]),
        .Q(Q[7]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[8]),
        .Q(Q[8]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[9] 
       (.C(s_aclk),
        .CE(E),
        .D(rd_pntr_plus1[9]),
        .Q(Q[9]),
        .R(\gc0.count_reg[0]_1 ));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[0]),
        .Q(rd_pntr_plus1[0]),
        .S(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[4]),
        .Q(rd_pntr_plus1[4]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[5]),
        .Q(rd_pntr_plus1[5]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[6]),
        .Q(rd_pntr_plus1[6]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[7]),
        .Q(rd_pntr_plus1[7]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[8]),
        .Q(rd_pntr_plus1[8]),
        .R(\gc0.count_reg[0]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[9] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[9]),
        .Q(rd_pntr_plus1[9]),
        .R(\gc0.count_reg[0]_1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(Q[0]),
        .I1(\gmux.gm[4].gms.ms [0]),
        .I2(Q[1]),
        .I3(\gmux.gm[4].gms.ms [1]),
        .O(\gc0.count_d1_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(rd_pntr_plus1[0]),
        .I1(\gmux.gm[4].gms.ms [0]),
        .I2(rd_pntr_plus1[1]),
        .I3(\gmux.gm[4].gms.ms [1]),
        .O(\gc0.count_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[0]),
        .I1(\gmux.gm[4].gms.ms_0 [0]),
        .I2(Q[1]),
        .I3(\gmux.gm[4].gms.ms_0 [1]),
        .O(\gc0.count_d1_reg[0]_1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[0]),
        .I1(\gmux.gm[4].gms.ms_1 [0]),
        .I2(Q[1]),
        .I3(\gmux.gm[4].gms.ms_1 [1]),
        .O(\gc0.count_d1_reg[0]_2 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__3 
       (.I0(Q[0]),
        .I1(\gmux.gm[4].gms.ms [0]),
        .I2(Q[1]),
        .I3(\gmux.gm[4].gms.ms [1]),
        .O(\gc0.count_d1_reg[0]_3 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[2]),
        .I1(\gmux.gm[4].gms.ms [2]),
        .I2(Q[3]),
        .I3(\gmux.gm[4].gms.ms [3]),
        .O(\gc0.count_d1_reg[2]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[2]),
        .I1(\gmux.gm[4].gms.ms [2]),
        .I2(rd_pntr_plus1[3]),
        .I3(\gmux.gm[4].gms.ms [3]),
        .O(\gc0.count_reg[2]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gmux.gm[4].gms.ms_0 [2]),
        .I2(Q[3]),
        .I3(\gmux.gm[4].gms.ms_0 [3]),
        .O(\gc0.count_d1_reg[2]_1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[3]),
        .I1(\gmux.gm[4].gms.ms_1 [3]),
        .I2(Q[2]),
        .I3(\gmux.gm[4].gms.ms_1 [2]),
        .O(\gc0.count_d1_reg[3]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__3 
       (.I0(Q[2]),
        .I1(\gmux.gm[4].gms.ms [2]),
        .I2(Q[3]),
        .I3(\gmux.gm[4].gms.ms [3]),
        .O(\gc0.count_d1_reg[2]_2 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[4]),
        .I1(\gmux.gm[4].gms.ms [4]),
        .I2(Q[5]),
        .I3(\gmux.gm[4].gms.ms [5]),
        .O(\gc0.count_d1_reg[4]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[5]),
        .I1(\gmux.gm[4].gms.ms [5]),
        .I2(rd_pntr_plus1[4]),
        .I3(\gmux.gm[4].gms.ms [4]),
        .O(\gc0.count_reg[5]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gmux.gm[4].gms.ms_0 [4]),
        .I2(Q[5]),
        .I3(\gmux.gm[4].gms.ms_0 [5]),
        .O(\gc0.count_d1_reg[4]_1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[5]),
        .I1(\gmux.gm[4].gms.ms_1 [5]),
        .I2(Q[4]),
        .I3(\gmux.gm[4].gms.ms_1 [4]),
        .O(\gc0.count_d1_reg[5]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__3 
       (.I0(Q[4]),
        .I1(\gmux.gm[4].gms.ms [4]),
        .I2(Q[5]),
        .I3(\gmux.gm[4].gms.ms [5]),
        .O(\gc0.count_d1_reg[4]_2 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[6]),
        .I1(\gmux.gm[4].gms.ms [6]),
        .I2(Q[7]),
        .I3(\gmux.gm[4].gms.ms [7]),
        .O(\gc0.count_d1_reg[6]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gmux.gm[4].gms.ms [6]),
        .I2(rd_pntr_plus1[7]),
        .I3(\gmux.gm[4].gms.ms [7]),
        .O(\gc0.count_reg[6]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gmux.gm[4].gms.ms_0 [6]),
        .I2(Q[7]),
        .I3(\gmux.gm[4].gms.ms_0 [7]),
        .O(\gc0.count_d1_reg[6]_1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[6]),
        .I1(\gmux.gm[4].gms.ms_1 [6]),
        .I2(Q[7]),
        .I3(\gmux.gm[4].gms.ms_1 [7]),
        .O(\gc0.count_d1_reg[6]_2 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__3 
       (.I0(Q[6]),
        .I1(\gmux.gm[4].gms.ms [6]),
        .I2(Q[7]),
        .I3(\gmux.gm[4].gms.ms [7]),
        .O(\gc0.count_d1_reg[6]_3 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(Q[9]),
        .I1(\gmux.gm[4].gms.ms [9]),
        .I2(Q[8]),
        .I3(\gmux.gm[4].gms.ms [8]),
        .O(\gc0.count_d1_reg[9]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[8]),
        .I1(\gmux.gm[4].gms.ms [8]),
        .I2(rd_pntr_plus1[9]),
        .I3(\gmux.gm[4].gms.ms [9]),
        .O(\gc0.count_reg[8]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(Q[8]),
        .I1(\gmux.gm[4].gms.ms_0 [8]),
        .I2(Q[9]),
        .I3(\gmux.gm[4].gms.ms_0 [9]),
        .O(\gc0.count_d1_reg[8]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(Q[9]),
        .I1(\gmux.gm[4].gms.ms_1 [9]),
        .I2(Q[8]),
        .I3(\gmux.gm[4].gms.ms_1 [8]),
        .O(\gc0.count_d1_reg[9]_1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__3 
       (.I0(Q[9]),
        .I1(\gmux.gm[4].gms.ms [9]),
        .I2(Q[8]),
        .I3(\gmux.gm[4].gms.ms [8]),
        .O(\gc0.count_d1_reg[9]_2 ));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module top_aurora_0_0_rd_fwft
   (out,
    empty_fwft_fb_o_i_reg_0,
    E,
    ram_empty_fb_i_reg,
    ENB_I,
    \gpregsm1.curr_fwft_state_reg[0]_0 ,
    \gpregsm1.curr_fwft_state_reg[1]_0 ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ,
    m_axis_tvalid,
    D,
    s_aclk,
    aempty_fwft_fb_i_reg_0,
    Q,
    axis_wr_eop_d1,
    m_axis_tready,
    axis_pkt_read,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    empty_fwft_i_reg_0,
    ENA_dly_D,
    DI,
    S,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 );
  output out;
  output empty_fwft_fb_o_i_reg_0;
  output [0:0]E;
  output ram_empty_fb_i_reg;
  output ENB_I;
  output \gpregsm1.curr_fwft_state_reg[0]_0 ;
  output [0:0]\gpregsm1.curr_fwft_state_reg[1]_0 ;
  output [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ;
  output m_axis_tvalid;
  output [9:0]D;
  input s_aclk;
  input aempty_fwft_fb_i_reg_0;
  input [8:0]Q;
  input axis_wr_eop_d1;
  input m_axis_tready;
  input axis_pkt_read;
  input [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  input \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [1:0]empty_fwft_i_reg_0;
  input ENA_dly_D;
  input [0:0]DI;
  input [2:0]S;
  input [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  input [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 ;

  wire [9:0]D;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]DI;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire [8:0]Q;
  wire [2:0]S;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  wire aempty_fwft_fb_i_i_1_n_0;
  wire aempty_fwft_fb_i_reg_0;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire axis_pkt_read;
  wire axis_wr_eop_d1;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  wire empty_fwft_fb_i_i_1_n_0;
  wire empty_fwft_fb_i_i_2_n_0;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i_reg0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire [1:0]empty_fwft_i_reg_0;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_6_n_0 ;
  wire [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  wire [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2_n_3 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_1 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_2 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_3 ;
  wire [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_0 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_1 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_2 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_3 ;
  wire [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ;
  wire \gpregsm1.curr_fwft_state_reg[0]_0 ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1]_0 ;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire [1:0]next_fwft_state;
  wire ram_empty_fb_i_reg;
  wire s_aclk;
  (* DONT_TOUCH *) wire user_valid;
  wire [3:1]\NLW_gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2_CO_UNCONNECTED ;
  wire [3:2]\NLW_gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2_O_UNCONNECTED ;

  assign empty_fwft_fb_o_i_reg_0 = empty_fwft_fb_o_i;
  assign out = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFFF0002)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_2 
       (.I0(\gpregsm1.curr_fwft_state_reg[0]_0 ),
        .I1(empty_fwft_i_reg_0[1]),
        .I2(empty_fwft_i_reg_0[0]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .I4(ENA_dly_D),
        .O(ENB_I));
  LUT5 #(
    .INIT(32'h55D5FFFF)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_4 
       (.I0(curr_fwft_state[0]),
        .I1(axis_pkt_read),
        .I2(m_axis_tready),
        .I3(empty_fwft_fb_o_i),
        .I4(curr_fwft_state[1]),
        .O(\gpregsm1.curr_fwft_state_reg[0]_0 ));
  LUT5 #(
    .INIT(32'hFDCF4000)) 
    aempty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_i_i_2_n_0),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_fb_i_i_1_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(aempty_fwft_fb_i_i_1_n_0),
        .Q(aempty_fwft_fb_i),
        .S(aempty_fwft_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(aempty_fwft_fb_i_i_1_n_0),
        .Q(aempty_fwft_i),
        .S(aempty_fwft_fb_i_reg_0));
  LUT6 #(
    .INIT(64'hFEFEEEEEFEFFFEFE)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_i_reg_0[0]),
        .I1(empty_fwft_i_reg_0[1]),
        .I2(empty_fwft_fb_i),
        .I3(empty_fwft_fb_i_i_2_n_0),
        .I4(curr_fwft_state[0]),
        .I5(curr_fwft_state[1]),
        .O(empty_fwft_fb_i_i_1_n_0));
  LUT3 #(
    .INIT(8'hF7)) 
    empty_fwft_fb_i_i_2
       (.I0(axis_pkt_read),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_i_i_2_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(empty_fwft_fb_i_i_1_n_0),
        .Q(empty_fwft_fb_i),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hAA00EAAA)) 
    empty_fwft_fb_o_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(m_axis_tready),
        .I2(axis_pkt_read),
        .I3(curr_fwft_state[0]),
        .I4(curr_fwft_state[1]),
        .O(empty_fwft_fb_o_i_reg0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i_reg0),
        .Q(empty_fwft_fb_o_i),
        .S(aempty_fwft_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(empty_fwft_fb_i_i_1_n_0),
        .Q(empty_fwft_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEAEEEEEEAAAAAAAA)) 
    \gaf.gaf0.ram_afull_i_i_2 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .I1(curr_fwft_state[1]),
        .I2(empty_fwft_fb_o_i),
        .I3(m_axis_tready),
        .I4(axis_pkt_read),
        .I5(curr_fwft_state[0]),
        .O(ram_empty_fb_i_reg));
  LUT5 #(
    .INIT(32'h9AAAAAAA)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[10]_i_1 
       (.I0(axis_wr_eop_d1),
        .I1(empty_fwft_fb_o_i),
        .I2(m_axis_tready),
        .I3(axis_pkt_read),
        .I4(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ));
  LUT6 #(
    .INIT(64'h9599999999999999)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_6 
       (.I0(Q[1]),
        .I1(axis_wr_eop_d1),
        .I2(empty_fwft_fb_o_i),
        .I3(m_axis_tready),
        .I4(axis_pkt_read),
        .I5(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ),
        .O(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_6_n_0 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2 
       (.CI(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_0 ),
        .CO({\NLW_gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2_CO_UNCONNECTED [3:1],\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,Q[8]}),
        .O({\NLW_gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_i_2_O_UNCONNECTED [3:2],D[9:8]}),
        .S({1'b0,1'b0,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 }));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1 
       (.CI(1'b0),
        .CO({\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_1 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_2 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_3 }),
        .CYINIT(Q[0]),
        .DI({Q[3:1],DI}),
        .O(D[3:0]),
        .S({S,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt[4]_i_6_n_0 }));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1 
       (.CI(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[4]_i_1_n_0 ),
        .CO({\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_0 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_1 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_2 ,\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O(D[7:4]),
        .S(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ));
  LUT6 #(
    .INIT(64'h0000000055D5FFFF)) 
    \gc0.count_d1[9]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(axis_pkt_read),
        .I2(m_axis_tready),
        .I3(empty_fwft_fb_o_i),
        .I4(curr_fwft_state[1]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .O(E));
  LUT6 #(
    .INIT(64'h0404040444040404)) 
    \goreg_bm.dout_i[32]_i_1 
       (.I0(aempty_fwft_fb_i_reg_0),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(axis_pkt_read),
        .I4(m_axis_tready),
        .I5(empty_fwft_fb_o_i),
        .O(\gpregsm1.curr_fwft_state_reg[1]_0 ));
  LUT5 #(
    .INIT(32'hEEEEAEEE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(axis_pkt_read),
        .I3(m_axis_tready),
        .I4(empty_fwft_fb_o_i),
        .O(next_fwft_state[0]));
  LUT6 #(
    .INIT(64'h8AAA0000FFFFFFFF)) 
    \gpregsm1.curr_fwft_state[1]_i_2 
       (.I0(curr_fwft_state[1]),
        .I1(empty_fwft_fb_o_i),
        .I2(m_axis_tready),
        .I3(axis_pkt_read),
        .I4(curr_fwft_state[0]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]),
        .R(aempty_fwft_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]),
        .R(aempty_fwft_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(user_valid),
        .R(aempty_fwft_fb_i_reg_0));
  LUT2 #(
    .INIT(4'h2)) 
    m_axis_tvalid_INST_0
       (.I0(axis_pkt_read),
        .I1(empty_fwft_i),
        .O(m_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module top_aurora_0_0_rd_logic
   (out,
    empty_fwft_fb_o_i_reg,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[9] ,
    \gc0.count_d1_reg[9]_0 ,
    \gc0.count_d1_reg[6] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[8] ,
    \gc0.count_d1_reg[6]_0 ,
    \gc0.count_d1_reg[4]_0 ,
    \gc0.count_d1_reg[2]_0 ,
    \gc0.count_d1_reg[0]_0 ,
    \gc0.count_d1_reg[9]_1 ,
    \gc0.count_d1_reg[6]_1 ,
    \gc0.count_d1_reg[5] ,
    \gc0.count_d1_reg[3] ,
    \gc0.count_d1_reg[0]_1 ,
    ENB_I,
    E,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ,
    m_axis_tvalid,
    D,
    s_aclk,
    \gc0.count_reg[0] ,
    Q,
    axis_wr_eop_d1,
    m_axis_tready,
    axis_pkt_read,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ,
    \gmux.gm[4].gms.ms ,
    \gmux.gm[4].gms.ms_0 ,
    \gmux.gm[4].gms.ms_1 ,
    empty_fwft_i_reg,
    ENA_dly_D,
    ram_empty_i_reg,
    DI,
    S,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 );
  output out;
  output empty_fwft_fb_o_i_reg;
  output ram_empty_fb_i_reg;
  output \gc0.count_d1_reg[9] ;
  output [9:0]\gc0.count_d1_reg[9]_0 ;
  output \gc0.count_d1_reg[6] ;
  output \gc0.count_d1_reg[4] ;
  output \gc0.count_d1_reg[2] ;
  output \gc0.count_d1_reg[0] ;
  output \gc0.count_d1_reg[8] ;
  output \gc0.count_d1_reg[6]_0 ;
  output \gc0.count_d1_reg[4]_0 ;
  output \gc0.count_d1_reg[2]_0 ;
  output \gc0.count_d1_reg[0]_0 ;
  output \gc0.count_d1_reg[9]_1 ;
  output \gc0.count_d1_reg[6]_1 ;
  output \gc0.count_d1_reg[5] ;
  output \gc0.count_d1_reg[3] ;
  output \gc0.count_d1_reg[0]_1 ;
  output ENB_I;
  output [0:0]E;
  output [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ;
  output m_axis_tvalid;
  output [9:0]D;
  input s_aclk;
  input \gc0.count_reg[0] ;
  input [8:0]Q;
  input axis_wr_eop_d1;
  input m_axis_tready;
  input axis_pkt_read;
  input [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  input [9:0]\gmux.gm[4].gms.ms ;
  input [9:0]\gmux.gm[4].gms.ms_0 ;
  input [9:0]\gmux.gm[4].gms.ms_1 ;
  input [1:0]empty_fwft_i_reg;
  input ENA_dly_D;
  input ram_empty_i_reg;
  input [0:0]DI;
  input [2:0]S;
  input [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  input [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 ;

  wire [9:0]D;
  wire [0:0]DI;
  wire [0:0]E;
  wire ENA_dly_D;
  wire ENB_I;
  wire [8:0]Q;
  wire [2:0]S;
  wire axis_pkt_read;
  wire axis_wr_eop_d1;
  wire empty_fwft_fb_o_i_reg;
  wire [1:0]empty_fwft_i_reg;
  wire [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ;
  wire [1:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 ;
  wire [3:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ;
  wire [0:0]\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[0]_0 ;
  wire \gc0.count_d1_reg[0]_1 ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[2]_0 ;
  wire \gc0.count_d1_reg[3] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[4]_0 ;
  wire \gc0.count_d1_reg[5] ;
  wire \gc0.count_d1_reg[6] ;
  wire \gc0.count_d1_reg[6]_0 ;
  wire \gc0.count_d1_reg[6]_1 ;
  wire \gc0.count_d1_reg[8] ;
  wire \gc0.count_d1_reg[9] ;
  wire [9:0]\gc0.count_d1_reg[9]_0 ;
  wire \gc0.count_d1_reg[9]_1 ;
  wire \gc0.count_reg[0] ;
  wire [9:0]\gmux.gm[4].gms.ms ;
  wire [9:0]\gmux.gm[4].gms.ms_0 ;
  wire [9:0]\gmux.gm[4].gms.ms_1 ;
  wire \gr1.gr1_int.rfwft_n_2 ;
  wire \gr1.gr1_int.rfwft_n_5 ;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire out;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire rpntr_n_15;
  wire rpntr_n_16;
  wire rpntr_n_17;
  wire rpntr_n_18;
  wire rpntr_n_19;
  wire rpntr_n_30;
  wire rpntr_n_31;
  wire rpntr_n_32;
  wire rpntr_n_33;
  wire rpntr_n_34;
  wire s_aclk;

  top_aurora_0_0_rd_fwft \gr1.gr1_int.rfwft 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_2_out),
        .DI(DI),
        .E(\gr1.gr1_int.rfwft_n_2 ),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .Q(Q),
        .S(S),
        .aempty_fwft_fb_i_reg_0(\gc0.count_reg[0] ),
        .axis_pkt_read(axis_pkt_read),
        .axis_wr_eop_d1(axis_wr_eop_d1),
        .empty_fwft_fb_o_i_reg_0(empty_fwft_fb_o_i_reg),
        .empty_fwft_i_reg_0(empty_fwft_i_reg),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[10]_0 ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_cnt_reg[8] ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_reg ),
        .\gpregsm1.curr_fwft_state_reg[0]_0 (\gr1.gr1_int.rfwft_n_5 ),
        .\gpregsm1.curr_fwft_state_reg[1]_0 (E),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .s_aclk(s_aclk));
  top_aurora_0_0_rd_status_flags_ss \grss.rsts 
       (.\gmux.gm[1].gms.ms (rpntr_n_30),
        .\gmux.gm[1].gms.ms_0 (rpntr_n_19),
        .\gmux.gm[2].gms.ms (rpntr_n_31),
        .\gmux.gm[2].gms.ms_0 (rpntr_n_18),
        .\gmux.gm[3].gms.ms (rpntr_n_32),
        .\gmux.gm[3].gms.ms_0 (rpntr_n_17),
        .\gmux.gm[4].gms.ms (rpntr_n_33),
        .\gmux.gm[4].gms.ms_0 (rpntr_n_16),
        .out(p_2_out),
        .ram_empty_i_reg_0(rpntr_n_34),
        .ram_empty_i_reg_1(rpntr_n_15),
        .ram_empty_i_reg_2(ram_empty_i_reg),
        .ram_empty_i_reg_3(\gr1.gr1_int.rfwft_n_5 ),
        .ram_empty_i_reg_4(\gc0.count_reg[0] ),
        .s_aclk(s_aclk));
  top_aurora_0_0_rd_bin_cntr rpntr
       (.E(\gr1.gr1_int.rfwft_n_2 ),
        .Q(\gc0.count_d1_reg[9]_0 ),
        .\gc0.count_d1_reg[0]_0 (\gc0.count_d1_reg[0] ),
        .\gc0.count_d1_reg[0]_1 (\gc0.count_d1_reg[0]_0 ),
        .\gc0.count_d1_reg[0]_2 (\gc0.count_d1_reg[0]_1 ),
        .\gc0.count_d1_reg[0]_3 (rpntr_n_30),
        .\gc0.count_d1_reg[2]_0 (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[2]_1 (\gc0.count_d1_reg[2]_0 ),
        .\gc0.count_d1_reg[2]_2 (rpntr_n_31),
        .\gc0.count_d1_reg[3]_0 (\gc0.count_d1_reg[3] ),
        .\gc0.count_d1_reg[4]_0 (\gc0.count_d1_reg[4] ),
        .\gc0.count_d1_reg[4]_1 (\gc0.count_d1_reg[4]_0 ),
        .\gc0.count_d1_reg[4]_2 (rpntr_n_32),
        .\gc0.count_d1_reg[5]_0 (\gc0.count_d1_reg[5] ),
        .\gc0.count_d1_reg[6]_0 (\gc0.count_d1_reg[6] ),
        .\gc0.count_d1_reg[6]_1 (\gc0.count_d1_reg[6]_0 ),
        .\gc0.count_d1_reg[6]_2 (\gc0.count_d1_reg[6]_1 ),
        .\gc0.count_d1_reg[6]_3 (rpntr_n_33),
        .\gc0.count_d1_reg[8]_0 (\gc0.count_d1_reg[8] ),
        .\gc0.count_d1_reg[9]_0 (\gc0.count_d1_reg[9] ),
        .\gc0.count_d1_reg[9]_1 (\gc0.count_d1_reg[9]_1 ),
        .\gc0.count_d1_reg[9]_2 (rpntr_n_34),
        .\gc0.count_reg[0]_0 (rpntr_n_19),
        .\gc0.count_reg[0]_1 (\gc0.count_reg[0] ),
        .\gc0.count_reg[2]_0 (rpntr_n_18),
        .\gc0.count_reg[5]_0 (rpntr_n_17),
        .\gc0.count_reg[6]_0 (rpntr_n_16),
        .\gc0.count_reg[8]_0 (rpntr_n_15),
        .\gmux.gm[4].gms.ms (\gmux.gm[4].gms.ms ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms_0 ),
        .\gmux.gm[4].gms.ms_1 (\gmux.gm[4].gms.ms_1 ),
        .s_aclk(s_aclk));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module top_aurora_0_0_rd_status_flags_ss
   (out,
    \gmux.gm[1].gms.ms ,
    \gmux.gm[2].gms.ms ,
    \gmux.gm[3].gms.ms ,
    \gmux.gm[4].gms.ms ,
    ram_empty_i_reg_0,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    ram_empty_i_reg_1,
    s_aclk,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4);
  output out;
  input \gmux.gm[1].gms.ms ;
  input \gmux.gm[2].gms.ms ;
  input \gmux.gm[3].gms.ms ;
  input \gmux.gm[4].gms.ms ;
  input ram_empty_i_reg_0;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input ram_empty_i_reg_1;
  input s_aclk;
  input ram_empty_i_reg_2;
  input ram_empty_i_reg_3;
  input ram_empty_i_reg_4;

  wire c2_n_0;
  wire comp0;
  wire \gmux.gm[1].gms.ms ;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms ;
  wire \gmux.gm[4].gms.ms_0 ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire s_aclk;

  assign out = ram_empty_fb_i;
  top_aurora_0_0_compare_2 c1
       (.comp0(comp0),
        .\gmux.gm[1].gms.ms_0 (\gmux.gm[1].gms.ms ),
        .\gmux.gm[2].gms.ms_0 (\gmux.gm[2].gms.ms ),
        .\gmux.gm[3].gms.ms_0 (\gmux.gm[3].gms.ms ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms ),
        .ram_empty_i_reg(ram_empty_i_reg_0));
  top_aurora_0_0_compare_3 c2
       (.comp0(comp0),
        .\gmux.gm[1].gms.ms_0 (\gmux.gm[1].gms.ms_0 ),
        .\gmux.gm[2].gms.ms_0 (\gmux.gm[2].gms.ms_0 ),
        .\gmux.gm[3].gms.ms_0 (\gmux.gm[3].gms.ms_0 ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms_0 ),
        .out(ram_empty_fb_i),
        .ram_empty_fb_i_reg(c2_n_0),
        .ram_empty_i_reg(ram_empty_i_reg_1),
        .ram_empty_i_reg_0(ram_empty_i_reg_2),
        .ram_empty_i_reg_1(ram_empty_i_reg_3),
        .ram_empty_i_reg_2(ram_empty_i_reg_4));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_fb_i),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_i),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module top_aurora_0_0_reset_blk_ramfifo
   (src_rst,
    s_aclk);
  input src_rst;
  input s_aclk;

  wire \grstd1.grst_full.grst_f.rst_d1_i_1_n_0 ;
  wire p_2_out;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire s_aclk;
  wire [3:0]sckt_wr_rst_cc;
  wire src_rst;

  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \grstd1.grst_full.grst_f.rst_d1_i_1 
       (.I0(sckt_wr_rst_cc[2]),
        .I1(sckt_wr_rst_cc[3]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(\grstd1.grst_full.grst_f.rst_d1_i_1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d1_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst_wr_reg2),
        .Q(rst_d2));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \grstd1.grst_full.grst_f.rst_d3_i_1 
       (.I0(rst_d2),
        .I1(rst_wr_reg2),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .O(p_2_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(p_2_out),
        .PRE(rst_wr_reg2),
        .Q(rst_d3));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  top_aurora_0_0_xpm_cdc_async_rst \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(s_aclk),
        .src_arst(src_rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module top_aurora_0_0_reset_blk_ramfifo__parameterized0
   (src_rst,
    wr_rst_busy,
    out,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0]_0 ,
    Q,
    s_aclk,
    s_aresetn);
  output src_rst;
  output wr_rst_busy;
  output out;
  output \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0]_0 ;
  output [1:0]Q;
  input s_aclk;
  input s_aresetn;

  wire [1:0]Q;
  wire dest_rst;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0]_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[2] ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[3] ;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire s_aclk;
  wire s_aresetn;
  wire src_rst;
  wire wr_rst_busy_i;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i;
  LUT2 #(
    .INIT(4'hE)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0]_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_busy_i),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDSE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .Q(rst_d3),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst_i_1 
       (.I0(s_aresetn),
        .O(src_rst));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(dest_rst),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[2] ),
        .Q(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[3] ),
        .R(1'b0));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  top_aurora_0_0_xpm_cdc_sync_rst \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(s_aclk),
        .dest_rst(dest_rst),
        .src_rst(src_rst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    wr_rst_busy_i_inferred_i_1
       (.I0(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[3] ),
        .I1(\ngwrdrst.grst.g7serrst.gsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg_n_0_[2] ),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(wr_rst_busy_i));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_decoder" *) 
module top_aurora_0_0_vio_v3_0_19_decoder
   (s_drdy_i,
    in0,
    SR,
    internal_cnt_rst,
    \wr_en[2]_i_2_0 ,
    xsdb_wr__0,
    \wr_en[2]_i_4_0 ,
    Read_int_i_7_0,
    Read_int_i_7_1,
    E,
    \Bus_data_out_reg[15]_0 ,
    s_rst_o,
    Q,
    CLK,
    xsdb_rd,
    s_daddr_o,
    s_den_o,
    s_dwe_o,
    \Bus_data_out_reg[15]_1 ,
    \Bus_data_out_reg[15]_2 );
  output s_drdy_i;
  output in0;
  output [0:0]SR;
  output internal_cnt_rst;
  output \wr_en[2]_i_2_0 ;
  output xsdb_wr__0;
  output \wr_en[2]_i_4_0 ;
  output Read_int_i_7_0;
  output Read_int_i_7_1;
  output [0:0]E;
  output [15:0]\Bus_data_out_reg[15]_0 ;
  input s_rst_o;
  input [15:0]Q;
  input CLK;
  input xsdb_rd;
  input [16:0]s_daddr_o;
  input s_den_o;
  input s_dwe_o;
  input [15:0]\Bus_data_out_reg[15]_1 ;
  input [15:0]\Bus_data_out_reg[15]_2 ;

  wire \Bus_data_out[0]_i_1_n_0 ;
  wire \Bus_data_out[10]_i_1_n_0 ;
  wire \Bus_data_out[11]_i_1_n_0 ;
  wire \Bus_data_out[12]_i_1_n_0 ;
  wire \Bus_data_out[13]_i_1_n_0 ;
  wire \Bus_data_out[14]_i_1_n_0 ;
  wire \Bus_data_out[15]_i_1_n_0 ;
  wire \Bus_data_out[15]_i_2_n_0 ;
  wire \Bus_data_out[15]_i_3_n_0 ;
  wire \Bus_data_out[1]_i_1_n_0 ;
  wire \Bus_data_out[1]_i_2_n_0 ;
  wire \Bus_data_out[2]_i_1_n_0 ;
  wire \Bus_data_out[2]_i_2_n_0 ;
  wire \Bus_data_out[3]_i_1_n_0 ;
  wire \Bus_data_out[3]_i_2_n_0 ;
  wire \Bus_data_out[4]_i_1_n_0 ;
  wire \Bus_data_out[4]_i_2_n_0 ;
  wire \Bus_data_out[5]_i_1_n_0 ;
  wire \Bus_data_out[6]_i_1_n_0 ;
  wire \Bus_data_out[7]_i_1_n_0 ;
  wire \Bus_data_out[8]_i_1_n_0 ;
  wire \Bus_data_out[9]_i_1_n_0 ;
  wire [15:0]\Bus_data_out_reg[15]_0 ;
  wire [15:0]\Bus_data_out_reg[15]_1 ;
  wire [15:0]\Bus_data_out_reg[15]_2 ;
  wire CLK;
  wire [0:0]E;
  wire Hold_probe_in;
  wire [15:0]Q;
  wire Read_int_i_7_0;
  wire Read_int_i_7_1;
  wire [0:0]SR;
  wire [0:0]data_info_probe_in;
  wire in0;
  wire internal_cnt_rst;
  wire [15:0]probe_out_modified;
  wire rd_en_p1;
  wire rd_en_p2;
  wire [16:0]s_daddr_o;
  wire s_den_o;
  wire s_drdy_i;
  wire s_dwe_o;
  wire s_rst_o;
  wire wr_control_reg;
  wire \wr_en[2]_i_1_n_0 ;
  wire \wr_en[2]_i_2_0 ;
  wire \wr_en[2]_i_4_0 ;
  wire \wr_en[4]_i_1_n_0 ;
  wire \wr_en[4]_i_2_n_0 ;
  wire wr_probe_out_modified;
  wire [2:0]xsdb_addr_2_0_p1;
  wire [2:0]xsdb_addr_2_0_p2;
  wire xsdb_addr_8_p1;
  wire xsdb_addr_8_p2;
  wire xsdb_drdy_i_1_n_0;
  wire xsdb_rd;
  wire xsdb_wr__0;

  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_data_out[0]_i_1 
       (.I0(\Bus_data_out_reg[15]_2 [0]),
        .I1(xsdb_addr_8_p2),
        .I2(data_info_probe_in),
        .O(\Bus_data_out[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFFCFFFFAFFCF0FF)) 
    \Bus_data_out[0]_i_2 
       (.I0(\Bus_data_out_reg[15]_1 [0]),
        .I1(in0),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[2]),
        .I4(xsdb_addr_2_0_p2[1]),
        .I5(probe_out_modified[0]),
        .O(data_info_probe_in));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[10]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[10]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [10]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [10]),
        .O(\Bus_data_out[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[11]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[11]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [11]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [11]),
        .O(\Bus_data_out[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[12]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[12]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [12]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [12]),
        .O(\Bus_data_out[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[13]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[13]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [13]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [13]),
        .O(\Bus_data_out[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[14]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[14]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [14]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [14]),
        .O(\Bus_data_out[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[15]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[15]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [15]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [15]),
        .O(\Bus_data_out[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \Bus_data_out[15]_i_2 
       (.I0(xsdb_addr_2_0_p2[1]),
        .I1(xsdb_addr_2_0_p2[0]),
        .I2(xsdb_addr_8_p2),
        .I3(xsdb_addr_2_0_p2[2]),
        .O(\Bus_data_out[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \Bus_data_out[15]_i_3 
       (.I0(xsdb_addr_2_0_p2[1]),
        .I1(xsdb_addr_2_0_p2[0]),
        .I2(xsdb_addr_8_p2),
        .I3(xsdb_addr_2_0_p2[2]),
        .O(\Bus_data_out[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAEAAAAAAAEAA)) 
    \Bus_data_out[1]_i_1 
       (.I0(\Bus_data_out[1]_i_2_n_0 ),
        .I1(SR),
        .I2(xsdb_addr_2_0_p2[0]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [1]),
        .O(\Bus_data_out[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4044404444444400)) 
    \Bus_data_out[1]_i_2 
       (.I0(xsdb_addr_8_p2),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(\Bus_data_out_reg[15]_1 [1]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(probe_out_modified[1]),
        .I5(xsdb_addr_2_0_p2[0]),
        .O(\Bus_data_out[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBAAAAAAABAAA)) 
    \Bus_data_out[2]_i_1 
       (.I0(\Bus_data_out[2]_i_2_n_0 ),
        .I1(xsdb_addr_2_0_p2[0]),
        .I2(internal_cnt_rst),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [2]),
        .O(\Bus_data_out[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4044404444444400)) 
    \Bus_data_out[2]_i_2 
       (.I0(xsdb_addr_8_p2),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(\Bus_data_out_reg[15]_1 [2]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(probe_out_modified[2]),
        .I5(xsdb_addr_2_0_p2[0]),
        .O(\Bus_data_out[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \Bus_data_out[3]_i_1 
       (.I0(xsdb_addr_8_p2),
        .I1(\Bus_data_out_reg[15]_2 [3]),
        .I2(\Bus_data_out[3]_i_2_n_0 ),
        .O(\Bus_data_out[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4044404444444400)) 
    \Bus_data_out[3]_i_2 
       (.I0(xsdb_addr_8_p2),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(\Bus_data_out_reg[15]_1 [3]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(probe_out_modified[3]),
        .I5(xsdb_addr_2_0_p2[0]),
        .O(\Bus_data_out[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \Bus_data_out[4]_i_1 
       (.I0(xsdb_addr_8_p2),
        .I1(\Bus_data_out_reg[15]_2 [4]),
        .I2(\Bus_data_out[4]_i_2_n_0 ),
        .O(\Bus_data_out[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4044404444444400)) 
    \Bus_data_out[4]_i_2 
       (.I0(xsdb_addr_8_p2),
        .I1(xsdb_addr_2_0_p2[2]),
        .I2(\Bus_data_out_reg[15]_1 [4]),
        .I3(xsdb_addr_2_0_p2[1]),
        .I4(probe_out_modified[4]),
        .I5(xsdb_addr_2_0_p2[0]),
        .O(\Bus_data_out[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[5]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[5]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [5]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [5]),
        .O(\Bus_data_out[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[6]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[6]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [6]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [6]),
        .O(\Bus_data_out[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[7]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[7]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [7]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [7]),
        .O(\Bus_data_out[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[8]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[8]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [8]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [8]),
        .O(\Bus_data_out[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \Bus_data_out[9]_i_1 
       (.I0(\Bus_data_out[15]_i_2_n_0 ),
        .I1(probe_out_modified[9]),
        .I2(\Bus_data_out[15]_i_3_n_0 ),
        .I3(\Bus_data_out_reg[15]_1 [9]),
        .I4(xsdb_addr_8_p2),
        .I5(\Bus_data_out_reg[15]_2 [9]),
        .O(\Bus_data_out[9]_i_1_n_0 ));
  FDRE \Bus_data_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[0]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[10]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[11]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[12]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[13]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[14]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[15]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[1]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[2]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[3]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[4]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[5]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[6]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[7]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[8]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \Bus_data_out_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_data_out[9]_i_1_n_0 ),
        .Q(\Bus_data_out_reg[15]_0 [9]),
        .R(1'b0));
  FDRE Hold_probe_in_reg
       (.C(CLK),
        .CE(wr_control_reg),
        .D(Q[3]),
        .Q(Hold_probe_in),
        .R(s_rst_o));
  LUT2 #(
    .INIT(4'hE)) 
    Read_int_i_7
       (.I0(s_daddr_o[11]),
        .I1(s_daddr_o[10]),
        .O(Read_int_i_7_1));
  FDRE clear_int_reg
       (.C(CLK),
        .CE(wr_control_reg),
        .D(Q[1]),
        .Q(SR),
        .R(s_rst_o));
  FDRE committ_int_reg
       (.C(CLK),
        .CE(wr_control_reg),
        .D(Q[0]),
        .Q(in0),
        .R(s_rst_o));
  FDRE int_cnt_rst_reg
       (.C(CLK),
        .CE(wr_control_reg),
        .D(Q[2]),
        .Q(internal_cnt_rst),
        .R(s_rst_o));
  LUT1 #(
    .INIT(2'h1)) 
    \probe_in_reg[31]_i_1 
       (.I0(Hold_probe_in),
        .O(E));
  FDRE \probe_out_modified_reg[0] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[0]),
        .Q(probe_out_modified[0]),
        .R(SR));
  FDRE \probe_out_modified_reg[10] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[10]),
        .Q(probe_out_modified[10]),
        .R(SR));
  FDRE \probe_out_modified_reg[11] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[11]),
        .Q(probe_out_modified[11]),
        .R(SR));
  FDRE \probe_out_modified_reg[12] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[12]),
        .Q(probe_out_modified[12]),
        .R(SR));
  FDRE \probe_out_modified_reg[13] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[13]),
        .Q(probe_out_modified[13]),
        .R(SR));
  FDRE \probe_out_modified_reg[14] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[14]),
        .Q(probe_out_modified[14]),
        .R(SR));
  FDRE \probe_out_modified_reg[15] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[15]),
        .Q(probe_out_modified[15]),
        .R(SR));
  FDRE \probe_out_modified_reg[1] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[1]),
        .Q(probe_out_modified[1]),
        .R(SR));
  FDRE \probe_out_modified_reg[2] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[2]),
        .Q(probe_out_modified[2]),
        .R(SR));
  FDRE \probe_out_modified_reg[3] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[3]),
        .Q(probe_out_modified[3]),
        .R(SR));
  FDRE \probe_out_modified_reg[4] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[4]),
        .Q(probe_out_modified[4]),
        .R(SR));
  FDRE \probe_out_modified_reg[5] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[5]),
        .Q(probe_out_modified[5]),
        .R(SR));
  FDRE \probe_out_modified_reg[6] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[6]),
        .Q(probe_out_modified[6]),
        .R(SR));
  FDRE \probe_out_modified_reg[7] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[7]),
        .Q(probe_out_modified[7]),
        .R(SR));
  FDRE \probe_out_modified_reg[8] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[8]),
        .Q(probe_out_modified[8]),
        .R(SR));
  FDRE \probe_out_modified_reg[9] 
       (.C(CLK),
        .CE(wr_probe_out_modified),
        .D(Q[9]),
        .Q(probe_out_modified[9]),
        .R(SR));
  FDRE rd_en_p1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(xsdb_rd),
        .Q(rd_en_p1),
        .R(s_rst_o));
  FDRE rd_en_p2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rd_en_p1),
        .Q(rd_en_p2),
        .R(s_rst_o));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \wr_en[2]_i_1 
       (.I0(\wr_en[2]_i_2_0 ),
        .I1(s_daddr_o[1]),
        .I2(xsdb_wr__0),
        .I3(\wr_en[2]_i_4_0 ),
        .I4(s_daddr_o[8]),
        .I5(Read_int_i_7_0),
        .O(\wr_en[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \wr_en[2]_i_2 
       (.I0(s_daddr_o[0]),
        .I1(s_daddr_o[4]),
        .I2(s_daddr_o[5]),
        .I3(s_daddr_o[6]),
        .I4(s_daddr_o[7]),
        .I5(s_daddr_o[16]),
        .O(\wr_en[2]_i_2_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wr_en[2]_i_3 
       (.I0(s_den_o),
        .I1(s_dwe_o),
        .O(xsdb_wr__0));
  LUT2 #(
    .INIT(4'hE)) 
    \wr_en[2]_i_4 
       (.I0(s_daddr_o[3]),
        .I1(s_daddr_o[2]),
        .O(\wr_en[2]_i_4_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \wr_en[4]_i_1 
       (.I0(\wr_en[4]_i_2_n_0 ),
        .I1(s_daddr_o[8]),
        .I2(Read_int_i_7_0),
        .O(\wr_en[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000080000000000)) 
    \wr_en[4]_i_2 
       (.I0(s_den_o),
        .I1(s_dwe_o),
        .I2(s_daddr_o[3]),
        .I3(s_daddr_o[2]),
        .I4(s_daddr_o[1]),
        .I5(\wr_en[2]_i_2_0 ),
        .O(\wr_en[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wr_en[4]_i_3 
       (.I0(s_daddr_o[9]),
        .I1(Read_int_i_7_1),
        .I2(s_daddr_o[15]),
        .I3(s_daddr_o[14]),
        .I4(s_daddr_o[13]),
        .I5(s_daddr_o[12]),
        .O(Read_int_i_7_0));
  FDRE \wr_en_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\wr_en[2]_i_1_n_0 ),
        .Q(wr_control_reg),
        .R(1'b0));
  FDRE \wr_en_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\wr_en[4]_i_1_n_0 ),
        .Q(wr_probe_out_modified),
        .R(1'b0));
  FDRE \xsdb_addr_2_0_p1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(s_daddr_o[0]),
        .Q(xsdb_addr_2_0_p1[0]),
        .R(1'b0));
  FDRE \xsdb_addr_2_0_p1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(s_daddr_o[1]),
        .Q(xsdb_addr_2_0_p1[1]),
        .R(1'b0));
  FDRE \xsdb_addr_2_0_p1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(s_daddr_o[2]),
        .Q(xsdb_addr_2_0_p1[2]),
        .R(1'b0));
  FDRE \xsdb_addr_2_0_p2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(xsdb_addr_2_0_p1[0]),
        .Q(xsdb_addr_2_0_p2[0]),
        .R(1'b0));
  FDRE \xsdb_addr_2_0_p2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(xsdb_addr_2_0_p1[1]),
        .Q(xsdb_addr_2_0_p2[1]),
        .R(1'b0));
  FDRE \xsdb_addr_2_0_p2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(xsdb_addr_2_0_p1[2]),
        .Q(xsdb_addr_2_0_p2[2]),
        .R(1'b0));
  FDRE xsdb_addr_8_p1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(s_daddr_o[8]),
        .Q(xsdb_addr_8_p1),
        .R(1'b0));
  FDRE xsdb_addr_8_p2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(xsdb_addr_8_p1),
        .Q(xsdb_addr_8_p2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    xsdb_drdy_i_1
       (.I0(s_dwe_o),
        .I1(s_den_o),
        .I2(rd_en_p2),
        .O(xsdb_drdy_i_1_n_0));
  FDRE xsdb_drdy_reg
       (.C(CLK),
        .CE(1'b1),
        .D(xsdb_drdy_i_1_n_0),
        .Q(s_drdy_i),
        .R(s_rst_o));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_probe_in_one" *) 
module top_aurora_0_0_vio_v3_0_19_probe_in_one
   (xsdb_rd,
    Q,
    CLK,
    s_daddr_o,
    Read_int_reg_0,
    s_den_o,
    s_dwe_o,
    internal_cnt_rst,
    s_rst_o,
    E,
    probe_in0,
    clk);
  output xsdb_rd;
  output [15:0]Q;
  input CLK;
  input [16:0]s_daddr_o;
  input Read_int_reg_0;
  input s_den_o;
  input s_dwe_o;
  input internal_cnt_rst;
  input s_rst_o;
  input [0:0]E;
  input [31:0]probe_in0;
  input clk;

  wire \Bus_Data_out[0]_i_2_n_0 ;
  wire \Bus_Data_out[10]_i_2_n_0 ;
  wire \Bus_Data_out[11]_i_2_n_0 ;
  wire \Bus_Data_out[12]_i_2_n_0 ;
  wire \Bus_Data_out[13]_i_2_n_0 ;
  wire \Bus_Data_out[14]_i_2_n_0 ;
  wire \Bus_Data_out[15]_i_2_n_0 ;
  wire \Bus_Data_out[1]_i_2_n_0 ;
  wire \Bus_Data_out[2]_i_2_n_0 ;
  wire \Bus_Data_out[3]_i_2_n_0 ;
  wire \Bus_Data_out[4]_i_2_n_0 ;
  wire \Bus_Data_out[5]_i_2_n_0 ;
  wire \Bus_Data_out[6]_i_2_n_0 ;
  wire \Bus_Data_out[7]_i_2_n_0 ;
  wire \Bus_Data_out[8]_i_2_n_0 ;
  wire \Bus_Data_out[9]_i_2_n_0 ;
  wire CLK;
  wire \DECODER_INST/rd_en_int_7 ;
  wire [0:0]E;
  wire [15:0]Q;
  wire Read_int;
  wire Read_int_i_2_n_0;
  wire Read_int_i_3_n_0;
  wire Read_int_i_4_n_0;
  wire Read_int_i_5_n_0;
  wire Read_int_i_6_n_0;
  wire Read_int_reg_0;
  wire [3:0]addr_count;
  wire \addr_count[0]_i_1_n_0 ;
  wire \addr_count[1]_i_1_n_0 ;
  wire \addr_count[2]_i_1_n_0 ;
  wire \addr_count[3]_i_2_n_0 ;
  wire \addr_count[3]_i_3_n_0 ;
  wire addr_count_reg0;
  wire addr_count_reg1;
  wire clk;
  (* async_reg = "true" *) wire [31:0]data_int_sync1;
  (* async_reg = "true" *) wire [31:0]data_int_sync2;
  wire dn_activity0;
  wire dn_activity010_out;
  wire dn_activity014_out;
  wire dn_activity018_out;
  wire dn_activity022_out;
  wire dn_activity026_out;
  wire dn_activity02_out;
  wire dn_activity030_out;
  wire dn_activity034_out;
  wire dn_activity038_out;
  wire dn_activity042_out;
  wire dn_activity046_out;
  wire dn_activity050_out;
  wire dn_activity054_out;
  wire dn_activity058_out;
  wire dn_activity06_out;
  wire internal_cnt_rst;
  wire [15:0]mem_probe_in;
  wire [15:0]\mem_probe_in[2]__0 ;
  wire [15:0]\mem_probe_in[3]__0 ;
  wire [15:0]\mem_probe_in[4]__0 ;
  wire [15:0]\mem_probe_in[5]__0 ;
  wire [31:16]p_62_out;
  wire [31:16]p_63_out;
  wire [31:0]probe_in0;
  (* DONT_TOUCH *) wire [31:0]probe_in_reg;
  (* MAX_FANOUT = "200" *) (* RTL_MAX_FANOUT = "found" *) wire read_done;
  wire [16:0]s_daddr_o;
  wire s_den_o;
  wire s_dwe_o;
  wire s_rst_o;
  wire up_activity0;
  wire up_activity0113_out;
  wire up_activity0117_out;
  wire up_activity0121_out;
  wire up_activity0125_out;
  wire up_activity0129_out;
  wire up_activity0133_out;
  wire up_activity0137_out;
  wire up_activity0141_out;
  wire up_activity0145_out;
  wire up_activity0149_out;
  wire up_activity0153_out;
  wire up_activity0157_out;
  wire up_activity0161_out;
  wire up_activity0165_out;
  wire up_activity0169_out;
  wire xsdb_rd;

  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[0]_i_1 
       (.I0(\Bus_Data_out[0]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [0]),
        .I2(\mem_probe_in[5]__0 [0]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[0]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[0]_i_2 
       (.I0(data_int_sync2[16]),
        .I1(\mem_probe_in[3]__0 [0]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[0]),
        .I5(\mem_probe_in[2]__0 [0]),
        .O(\Bus_Data_out[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[10]_i_1 
       (.I0(\Bus_Data_out[10]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [10]),
        .I2(\mem_probe_in[5]__0 [10]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[10]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[10]_i_2 
       (.I0(data_int_sync2[26]),
        .I1(\mem_probe_in[3]__0 [10]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[10]),
        .I5(\mem_probe_in[2]__0 [10]),
        .O(\Bus_Data_out[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[11]_i_1 
       (.I0(\Bus_Data_out[11]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [11]),
        .I2(\mem_probe_in[5]__0 [11]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[11]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[11]_i_2 
       (.I0(data_int_sync2[27]),
        .I1(\mem_probe_in[3]__0 [11]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[11]),
        .I5(\mem_probe_in[2]__0 [11]),
        .O(\Bus_Data_out[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[12]_i_1 
       (.I0(\Bus_Data_out[12]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [12]),
        .I2(\mem_probe_in[5]__0 [12]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[12]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[12]_i_2 
       (.I0(data_int_sync2[28]),
        .I1(\mem_probe_in[3]__0 [12]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[12]),
        .I5(\mem_probe_in[2]__0 [12]),
        .O(\Bus_Data_out[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[13]_i_1 
       (.I0(\Bus_Data_out[13]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [13]),
        .I2(\mem_probe_in[5]__0 [13]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[13]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[13]_i_2 
       (.I0(data_int_sync2[29]),
        .I1(\mem_probe_in[3]__0 [13]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[13]),
        .I5(\mem_probe_in[2]__0 [13]),
        .O(\Bus_Data_out[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[14]_i_1 
       (.I0(\Bus_Data_out[14]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [14]),
        .I2(\mem_probe_in[5]__0 [14]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[14]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[14]_i_2 
       (.I0(data_int_sync2[30]),
        .I1(\mem_probe_in[3]__0 [14]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[14]),
        .I5(\mem_probe_in[2]__0 [14]),
        .O(\Bus_Data_out[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[15]_i_1 
       (.I0(\Bus_Data_out[15]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [15]),
        .I2(\mem_probe_in[5]__0 [15]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[15]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[15]_i_2 
       (.I0(data_int_sync2[31]),
        .I1(\mem_probe_in[3]__0 [15]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[15]),
        .I5(\mem_probe_in[2]__0 [15]),
        .O(\Bus_Data_out[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[1]_i_1 
       (.I0(\Bus_Data_out[1]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [1]),
        .I2(\mem_probe_in[5]__0 [1]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[1]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[1]_i_2 
       (.I0(data_int_sync2[17]),
        .I1(\mem_probe_in[3]__0 [1]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[1]),
        .I5(\mem_probe_in[2]__0 [1]),
        .O(\Bus_Data_out[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[2]_i_1 
       (.I0(\Bus_Data_out[2]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [2]),
        .I2(\mem_probe_in[5]__0 [2]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[2]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[2]_i_2 
       (.I0(data_int_sync2[18]),
        .I1(\mem_probe_in[3]__0 [2]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[2]),
        .I5(\mem_probe_in[2]__0 [2]),
        .O(\Bus_Data_out[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[3]_i_1 
       (.I0(\Bus_Data_out[3]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [3]),
        .I2(\mem_probe_in[5]__0 [3]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[3]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[3]_i_2 
       (.I0(data_int_sync2[19]),
        .I1(\mem_probe_in[3]__0 [3]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[3]),
        .I5(\mem_probe_in[2]__0 [3]),
        .O(\Bus_Data_out[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[4]_i_1 
       (.I0(\Bus_Data_out[4]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [4]),
        .I2(\mem_probe_in[5]__0 [4]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[4]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[4]_i_2 
       (.I0(data_int_sync2[20]),
        .I1(\mem_probe_in[3]__0 [4]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[4]),
        .I5(\mem_probe_in[2]__0 [4]),
        .O(\Bus_Data_out[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[5]_i_1 
       (.I0(\Bus_Data_out[5]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [5]),
        .I2(\mem_probe_in[5]__0 [5]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[5]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[5]_i_2 
       (.I0(data_int_sync2[21]),
        .I1(\mem_probe_in[3]__0 [5]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[5]),
        .I5(\mem_probe_in[2]__0 [5]),
        .O(\Bus_Data_out[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[6]_i_1 
       (.I0(\Bus_Data_out[6]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [6]),
        .I2(\mem_probe_in[5]__0 [6]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[6]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[6]_i_2 
       (.I0(data_int_sync2[22]),
        .I1(\mem_probe_in[3]__0 [6]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[6]),
        .I5(\mem_probe_in[2]__0 [6]),
        .O(\Bus_Data_out[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[7]_i_1 
       (.I0(\Bus_Data_out[7]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [7]),
        .I2(\mem_probe_in[5]__0 [7]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[7]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[7]_i_2 
       (.I0(data_int_sync2[23]),
        .I1(\mem_probe_in[3]__0 [7]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[7]),
        .I5(\mem_probe_in[2]__0 [7]),
        .O(\Bus_Data_out[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[8]_i_1 
       (.I0(\Bus_Data_out[8]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [8]),
        .I2(\mem_probe_in[5]__0 [8]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[8]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[8]_i_2 
       (.I0(data_int_sync2[24]),
        .I1(\mem_probe_in[3]__0 [8]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[8]),
        .I5(\mem_probe_in[2]__0 [8]),
        .O(\Bus_Data_out[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF0AACCAA)) 
    \Bus_Data_out[9]_i_1 
       (.I0(\Bus_Data_out[9]_i_2_n_0 ),
        .I1(\mem_probe_in[4]__0 [9]),
        .I2(\mem_probe_in[5]__0 [9]),
        .I3(addr_count[2]),
        .I4(addr_count[0]),
        .O(mem_probe_in[9]));
  LUT6 #(
    .INIT(64'hCAFFCAF0CA0FCA00)) 
    \Bus_Data_out[9]_i_2 
       (.I0(data_int_sync2[25]),
        .I1(\mem_probe_in[3]__0 [9]),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(data_int_sync2[9]),
        .I5(\mem_probe_in[2]__0 [9]),
        .O(\Bus_Data_out[9]_i_2_n_0 ));
  FDRE \Bus_Data_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[10]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[11]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[12]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[13]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[14]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[15]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[3]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[4]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[5]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[6]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[7]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[8]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \Bus_Data_out_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(mem_probe_in[9]),
        .Q(Q[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8000)) 
    Read_int_i_1
       (.I0(Read_int_i_2_n_0),
        .I1(Read_int_i_3_n_0),
        .I2(Read_int_i_4_n_0),
        .I3(Read_int_i_5_n_0),
        .O(\DECODER_INST/rd_en_int_7 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    Read_int_i_2
       (.I0(s_daddr_o[0]),
        .I1(s_daddr_o[1]),
        .I2(s_daddr_o[2]),
        .I3(Read_int_i_6_n_0),
        .I4(s_daddr_o[7]),
        .I5(s_daddr_o[8]),
        .O(Read_int_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    Read_int_i_3
       (.I0(s_daddr_o[15]),
        .I1(s_daddr_o[16]),
        .I2(xsdb_rd),
        .I3(Read_int_reg_0),
        .I4(s_daddr_o[13]),
        .I5(s_daddr_o[14]),
        .O(Read_int_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000230000002323)) 
    Read_int_i_4
       (.I0(s_daddr_o[7]),
        .I1(s_daddr_o[8]),
        .I2(s_daddr_o[6]),
        .I3(s_daddr_o[4]),
        .I4(s_daddr_o[5]),
        .I5(s_daddr_o[3]),
        .O(Read_int_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000230000002323)) 
    Read_int_i_5
       (.I0(s_daddr_o[13]),
        .I1(s_daddr_o[14]),
        .I2(s_daddr_o[12]),
        .I3(s_daddr_o[10]),
        .I4(s_daddr_o[11]),
        .I5(s_daddr_o[9]),
        .O(Read_int_i_5_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    Read_int_i_6
       (.I0(s_daddr_o[5]),
        .I1(s_daddr_o[4]),
        .O(Read_int_i_6_n_0));
  FDRE Read_int_reg
       (.C(CLK),
        .CE(1'b1),
        .D(\DECODER_INST/rd_en_int_7 ),
        .Q(Read_int),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \addr_count[0]_i_1 
       (.I0(addr_count[0]),
        .O(\addr_count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \addr_count[1]_i_1 
       (.I0(addr_count[1]),
        .I1(addr_count[0]),
        .O(\addr_count[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \addr_count[2]_i_1 
       (.I0(addr_count[1]),
        .I1(addr_count[0]),
        .I2(addr_count[2]),
        .O(\addr_count[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEFEEEEEEEEEEEEE)) 
    \addr_count[3]_i_1 
       (.I0(internal_cnt_rst),
        .I1(s_rst_o),
        .I2(\addr_count[3]_i_3_n_0 ),
        .I3(addr_count[3]),
        .I4(addr_count[2]),
        .I5(Read_int),
        .O(addr_count_reg0));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \addr_count[3]_i_2 
       (.I0(addr_count[0]),
        .I1(addr_count[1]),
        .I2(addr_count[2]),
        .I3(addr_count[3]),
        .O(\addr_count[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \addr_count[3]_i_3 
       (.I0(addr_count[0]),
        .I1(addr_count[1]),
        .O(\addr_count[3]_i_3_n_0 ));
  (* MAX_FANOUT = "100" *) 
  FDRE \addr_count_reg[0] 
       (.C(CLK),
        .CE(Read_int),
        .D(\addr_count[0]_i_1_n_0 ),
        .Q(addr_count[0]),
        .R(addr_count_reg0));
  (* MAX_FANOUT = "100" *) 
  FDRE \addr_count_reg[1] 
       (.C(CLK),
        .CE(Read_int),
        .D(\addr_count[1]_i_1_n_0 ),
        .Q(addr_count[1]),
        .R(addr_count_reg0));
  (* MAX_FANOUT = "100" *) 
  FDRE \addr_count_reg[2] 
       (.C(CLK),
        .CE(Read_int),
        .D(\addr_count[2]_i_1_n_0 ),
        .Q(addr_count[2]),
        .R(addr_count_reg0));
  (* MAX_FANOUT = "100" *) 
  FDRE \addr_count_reg[3] 
       (.C(CLK),
        .CE(Read_int),
        .D(\addr_count[3]_i_2_n_0 ),
        .Q(addr_count[3]),
        .R(addr_count_reg0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[0]),
        .Q(data_int_sync1[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[10]),
        .Q(data_int_sync1[10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[11]),
        .Q(data_int_sync1[11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[12]),
        .Q(data_int_sync1[12]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[13]),
        .Q(data_int_sync1[13]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[14]),
        .Q(data_int_sync1[14]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[15]),
        .Q(data_int_sync1[15]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[16]),
        .Q(data_int_sync1[16]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[17]),
        .Q(data_int_sync1[17]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[18]),
        .Q(data_int_sync1[18]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[19]),
        .Q(data_int_sync1[19]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[1]),
        .Q(data_int_sync1[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[20]),
        .Q(data_int_sync1[20]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[21]),
        .Q(data_int_sync1[21]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[22] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[22]),
        .Q(data_int_sync1[22]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[23] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[23]),
        .Q(data_int_sync1[23]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[24] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[24]),
        .Q(data_int_sync1[24]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[25] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[25]),
        .Q(data_int_sync1[25]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[26] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[26]),
        .Q(data_int_sync1[26]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[27] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[27]),
        .Q(data_int_sync1[27]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[28] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[28]),
        .Q(data_int_sync1[28]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[29] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[29]),
        .Q(data_int_sync1[29]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[2]),
        .Q(data_int_sync1[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[30] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[30]),
        .Q(data_int_sync1[30]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[31] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[31]),
        .Q(data_int_sync1[31]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[3]),
        .Q(data_int_sync1[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[4]),
        .Q(data_int_sync1[4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[5]),
        .Q(data_int_sync1[5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[6]),
        .Q(data_int_sync1[6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[7]),
        .Q(data_int_sync1[7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[8]),
        .Q(data_int_sync1[8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(probe_in_reg[9]),
        .Q(data_int_sync1[9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[0]),
        .Q(data_int_sync2[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[10]),
        .Q(data_int_sync2[10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[11]),
        .Q(data_int_sync2[11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[12]),
        .Q(data_int_sync2[12]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[13]),
        .Q(data_int_sync2[13]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[14]),
        .Q(data_int_sync2[14]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[15]),
        .Q(data_int_sync2[15]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[16]),
        .Q(data_int_sync2[16]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[17]),
        .Q(data_int_sync2[17]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[18]),
        .Q(data_int_sync2[18]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[19]),
        .Q(data_int_sync2[19]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[1]),
        .Q(data_int_sync2[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[20]),
        .Q(data_int_sync2[20]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[21]),
        .Q(data_int_sync2[21]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[22] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[22]),
        .Q(data_int_sync2[22]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[23] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[23]),
        .Q(data_int_sync2[23]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[24] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[24]),
        .Q(data_int_sync2[24]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[25] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[25]),
        .Q(data_int_sync2[25]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[26] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[26]),
        .Q(data_int_sync2[26]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[27] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[27]),
        .Q(data_int_sync2[27]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[28] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[28]),
        .Q(data_int_sync2[28]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[29] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[29]),
        .Q(data_int_sync2[29]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[2]),
        .Q(data_int_sync2[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[30] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[30]),
        .Q(data_int_sync2[30]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[31] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[31]),
        .Q(data_int_sync2[31]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[3]),
        .Q(data_int_sync2[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[4]),
        .Q(data_int_sync2[4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[5]),
        .Q(data_int_sync2[5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[6]),
        .Q(data_int_sync2[6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[7]),
        .Q(data_int_sync2[7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[8]),
        .Q(data_int_sync2[8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \data_int_sync2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(data_int_sync1[9]),
        .Q(data_int_sync2[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[0]_i_1 
       (.I0(data_int_sync2[0]),
        .I1(data_int_sync1[0]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [0]),
        .O(dn_activity0));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[10]_i_1 
       (.I0(data_int_sync2[10]),
        .I1(data_int_sync1[10]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [10]),
        .O(dn_activity038_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[11]_i_1 
       (.I0(data_int_sync2[11]),
        .I1(data_int_sync1[11]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [11]),
        .O(dn_activity042_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[12]_i_1 
       (.I0(data_int_sync2[12]),
        .I1(data_int_sync1[12]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [12]),
        .O(dn_activity046_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[13]_i_1 
       (.I0(data_int_sync2[13]),
        .I1(data_int_sync1[13]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [13]),
        .O(dn_activity050_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[14]_i_1 
       (.I0(data_int_sync2[14]),
        .I1(data_int_sync1[14]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [14]),
        .O(dn_activity054_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[15]_i_1 
       (.I0(data_int_sync2[15]),
        .I1(data_int_sync1[15]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [15]),
        .O(dn_activity058_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[16]_i_1 
       (.I0(data_int_sync2[16]),
        .I1(data_int_sync1[16]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [0]),
        .O(p_63_out[16]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[17]_i_1 
       (.I0(data_int_sync2[17]),
        .I1(data_int_sync1[17]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [1]),
        .O(p_63_out[17]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[18]_i_1 
       (.I0(data_int_sync2[18]),
        .I1(data_int_sync1[18]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [2]),
        .O(p_63_out[18]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[19]_i_1 
       (.I0(data_int_sync2[19]),
        .I1(data_int_sync1[19]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [3]),
        .O(p_63_out[19]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[1]_i_1 
       (.I0(data_int_sync2[1]),
        .I1(data_int_sync1[1]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [1]),
        .O(dn_activity02_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[20]_i_1 
       (.I0(data_int_sync2[20]),
        .I1(data_int_sync1[20]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [4]),
        .O(p_63_out[20]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[21]_i_1 
       (.I0(data_int_sync2[21]),
        .I1(data_int_sync1[21]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [5]),
        .O(p_63_out[21]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[22]_i_1 
       (.I0(data_int_sync2[22]),
        .I1(data_int_sync1[22]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [6]),
        .O(p_63_out[22]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[23]_i_1 
       (.I0(data_int_sync2[23]),
        .I1(data_int_sync1[23]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [7]),
        .O(p_63_out[23]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[24]_i_1 
       (.I0(data_int_sync2[24]),
        .I1(data_int_sync1[24]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [8]),
        .O(p_63_out[24]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[25]_i_1 
       (.I0(data_int_sync2[25]),
        .I1(data_int_sync1[25]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [9]),
        .O(p_63_out[25]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[26]_i_1 
       (.I0(data_int_sync2[26]),
        .I1(data_int_sync1[26]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [10]),
        .O(p_63_out[26]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[27]_i_1 
       (.I0(data_int_sync2[27]),
        .I1(data_int_sync1[27]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [11]),
        .O(p_63_out[27]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[28]_i_1 
       (.I0(data_int_sync2[28]),
        .I1(data_int_sync1[28]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [12]),
        .O(p_63_out[28]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[29]_i_1 
       (.I0(data_int_sync2[29]),
        .I1(data_int_sync1[29]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [13]),
        .O(p_63_out[29]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[2]_i_1 
       (.I0(data_int_sync2[2]),
        .I1(data_int_sync1[2]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [2]),
        .O(dn_activity06_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[30]_i_1 
       (.I0(data_int_sync2[30]),
        .I1(data_int_sync1[30]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [14]),
        .O(p_63_out[30]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[31]_i_1 
       (.I0(data_int_sync2[31]),
        .I1(data_int_sync1[31]),
        .I2(read_done),
        .I3(\mem_probe_in[5]__0 [15]),
        .O(p_63_out[31]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[3]_i_1 
       (.I0(data_int_sync2[3]),
        .I1(data_int_sync1[3]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [3]),
        .O(dn_activity010_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[4]_i_1 
       (.I0(data_int_sync2[4]),
        .I1(data_int_sync1[4]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [4]),
        .O(dn_activity014_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[5]_i_1 
       (.I0(data_int_sync2[5]),
        .I1(data_int_sync1[5]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [5]),
        .O(dn_activity018_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[6]_i_1 
       (.I0(data_int_sync2[6]),
        .I1(data_int_sync1[6]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [6]),
        .O(dn_activity022_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[7]_i_1 
       (.I0(data_int_sync2[7]),
        .I1(data_int_sync1[7]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [7]),
        .O(dn_activity026_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[8]_i_1 
       (.I0(data_int_sync2[8]),
        .I1(data_int_sync1[8]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [8]),
        .O(dn_activity030_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \dn_activity[9]_i_1 
       (.I0(data_int_sync2[9]),
        .I1(data_int_sync1[9]),
        .I2(read_done),
        .I3(\mem_probe_in[4]__0 [9]),
        .O(dn_activity034_out));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity0),
        .Q(\mem_probe_in[4]__0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity038_out),
        .Q(\mem_probe_in[4]__0 [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity042_out),
        .Q(\mem_probe_in[4]__0 [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity046_out),
        .Q(\mem_probe_in[4]__0 [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity050_out),
        .Q(\mem_probe_in[4]__0 [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity054_out),
        .Q(\mem_probe_in[4]__0 [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity058_out),
        .Q(\mem_probe_in[4]__0 [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[16]),
        .Q(\mem_probe_in[5]__0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[17]),
        .Q(\mem_probe_in[5]__0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[18]),
        .Q(\mem_probe_in[5]__0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[19]),
        .Q(\mem_probe_in[5]__0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity02_out),
        .Q(\mem_probe_in[4]__0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[20]),
        .Q(\mem_probe_in[5]__0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[21]),
        .Q(\mem_probe_in[5]__0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[22] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[22]),
        .Q(\mem_probe_in[5]__0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[23] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[23]),
        .Q(\mem_probe_in[5]__0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[24] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[24]),
        .Q(\mem_probe_in[5]__0 [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[25] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[25]),
        .Q(\mem_probe_in[5]__0 [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[26] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[26]),
        .Q(\mem_probe_in[5]__0 [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[27] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[27]),
        .Q(\mem_probe_in[5]__0 [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[28] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[28]),
        .Q(\mem_probe_in[5]__0 [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[29] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[29]),
        .Q(\mem_probe_in[5]__0 [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity06_out),
        .Q(\mem_probe_in[4]__0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[30] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[30]),
        .Q(\mem_probe_in[5]__0 [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[31] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_63_out[31]),
        .Q(\mem_probe_in[5]__0 [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity010_out),
        .Q(\mem_probe_in[4]__0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity014_out),
        .Q(\mem_probe_in[4]__0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity018_out),
        .Q(\mem_probe_in[4]__0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity022_out),
        .Q(\mem_probe_in[4]__0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity026_out),
        .Q(\mem_probe_in[4]__0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity030_out),
        .Q(\mem_probe_in[4]__0 [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dn_activity_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(dn_activity034_out),
        .Q(\mem_probe_in[4]__0 [9]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[0] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[0]),
        .Q(probe_in_reg[0]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[10] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[10]),
        .Q(probe_in_reg[10]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[11] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[11]),
        .Q(probe_in_reg[11]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[12] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[12]),
        .Q(probe_in_reg[12]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[13] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[13]),
        .Q(probe_in_reg[13]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[14] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[14]),
        .Q(probe_in_reg[14]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[15] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[15]),
        .Q(probe_in_reg[15]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[16] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[16]),
        .Q(probe_in_reg[16]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[17] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[17]),
        .Q(probe_in_reg[17]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[18] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[18]),
        .Q(probe_in_reg[18]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[19] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[19]),
        .Q(probe_in_reg[19]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[1] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[1]),
        .Q(probe_in_reg[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[20] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[20]),
        .Q(probe_in_reg[20]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[21] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[21]),
        .Q(probe_in_reg[21]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[22] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[22]),
        .Q(probe_in_reg[22]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[23] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[23]),
        .Q(probe_in_reg[23]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[24] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[24]),
        .Q(probe_in_reg[24]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[25] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[25]),
        .Q(probe_in_reg[25]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[26] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[26]),
        .Q(probe_in_reg[26]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[27] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[27]),
        .Q(probe_in_reg[27]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[28] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[28]),
        .Q(probe_in_reg[28]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[29] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[29]),
        .Q(probe_in_reg[29]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[2] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[2]),
        .Q(probe_in_reg[2]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[30] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[30]),
        .Q(probe_in_reg[30]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[31] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[31]),
        .Q(probe_in_reg[31]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[3] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[3]),
        .Q(probe_in_reg[3]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[4] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[4]),
        .Q(probe_in_reg[4]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[5] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[5]),
        .Q(probe_in_reg[5]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[6] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[6]),
        .Q(probe_in_reg[6]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[7] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[7]),
        .Q(probe_in_reg[7]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[8] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[8]),
        .Q(probe_in_reg[8]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \probe_in_reg_reg[9] 
       (.C(clk),
        .CE(E),
        .D(probe_in0[9]),
        .Q(probe_in_reg[9]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    rd_en_p1_i_1
       (.I0(s_den_o),
        .I1(s_dwe_o),
        .O(xsdb_rd));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'h00080000)) 
    read_done_i_1
       (.I0(Read_int),
        .I1(addr_count[2]),
        .I2(addr_count[3]),
        .I3(addr_count[1]),
        .I4(addr_count[0]),
        .O(addr_count_reg1));
  (* RTL_MAX_FANOUT = "found" *) 
  FDRE read_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(addr_count_reg1),
        .Q(read_done),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[0]_i_1 
       (.I0(data_int_sync1[0]),
        .I1(data_int_sync2[0]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [0]),
        .O(up_activity0));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[10]_i_1 
       (.I0(data_int_sync1[10]),
        .I1(data_int_sync2[10]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [10]),
        .O(up_activity0149_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[11]_i_1 
       (.I0(data_int_sync1[11]),
        .I1(data_int_sync2[11]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [11]),
        .O(up_activity0153_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[12]_i_1 
       (.I0(data_int_sync1[12]),
        .I1(data_int_sync2[12]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [12]),
        .O(up_activity0157_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[13]_i_1 
       (.I0(data_int_sync1[13]),
        .I1(data_int_sync2[13]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [13]),
        .O(up_activity0161_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[14]_i_1 
       (.I0(data_int_sync1[14]),
        .I1(data_int_sync2[14]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [14]),
        .O(up_activity0165_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[15]_i_1 
       (.I0(data_int_sync1[15]),
        .I1(data_int_sync2[15]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [15]),
        .O(up_activity0169_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[16]_i_1 
       (.I0(data_int_sync1[16]),
        .I1(data_int_sync2[16]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [0]),
        .O(p_62_out[16]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[17]_i_1 
       (.I0(data_int_sync1[17]),
        .I1(data_int_sync2[17]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [1]),
        .O(p_62_out[17]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[18]_i_1 
       (.I0(data_int_sync1[18]),
        .I1(data_int_sync2[18]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [2]),
        .O(p_62_out[18]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[19]_i_1 
       (.I0(data_int_sync1[19]),
        .I1(data_int_sync2[19]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [3]),
        .O(p_62_out[19]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[1]_i_1 
       (.I0(data_int_sync1[1]),
        .I1(data_int_sync2[1]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [1]),
        .O(up_activity0113_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[20]_i_1 
       (.I0(data_int_sync1[20]),
        .I1(data_int_sync2[20]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [4]),
        .O(p_62_out[20]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[21]_i_1 
       (.I0(data_int_sync1[21]),
        .I1(data_int_sync2[21]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [5]),
        .O(p_62_out[21]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[22]_i_1 
       (.I0(data_int_sync1[22]),
        .I1(data_int_sync2[22]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [6]),
        .O(p_62_out[22]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[23]_i_1 
       (.I0(data_int_sync1[23]),
        .I1(data_int_sync2[23]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [7]),
        .O(p_62_out[23]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[24]_i_1 
       (.I0(data_int_sync1[24]),
        .I1(data_int_sync2[24]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [8]),
        .O(p_62_out[24]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[25]_i_1 
       (.I0(data_int_sync1[25]),
        .I1(data_int_sync2[25]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [9]),
        .O(p_62_out[25]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[26]_i_1 
       (.I0(data_int_sync1[26]),
        .I1(data_int_sync2[26]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [10]),
        .O(p_62_out[26]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[27]_i_1 
       (.I0(data_int_sync1[27]),
        .I1(data_int_sync2[27]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [11]),
        .O(p_62_out[27]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[28]_i_1 
       (.I0(data_int_sync1[28]),
        .I1(data_int_sync2[28]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [12]),
        .O(p_62_out[28]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[29]_i_1 
       (.I0(data_int_sync1[29]),
        .I1(data_int_sync2[29]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [13]),
        .O(p_62_out[29]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[2]_i_1 
       (.I0(data_int_sync1[2]),
        .I1(data_int_sync2[2]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [2]),
        .O(up_activity0117_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[30]_i_1 
       (.I0(data_int_sync1[30]),
        .I1(data_int_sync2[30]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [14]),
        .O(p_62_out[30]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[31]_i_1 
       (.I0(data_int_sync1[31]),
        .I1(data_int_sync2[31]),
        .I2(read_done),
        .I3(\mem_probe_in[3]__0 [15]),
        .O(p_62_out[31]));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[3]_i_1 
       (.I0(data_int_sync1[3]),
        .I1(data_int_sync2[3]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [3]),
        .O(up_activity0121_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[4]_i_1 
       (.I0(data_int_sync1[4]),
        .I1(data_int_sync2[4]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [4]),
        .O(up_activity0125_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[5]_i_1 
       (.I0(data_int_sync1[5]),
        .I1(data_int_sync2[5]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [5]),
        .O(up_activity0129_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[6]_i_1 
       (.I0(data_int_sync1[6]),
        .I1(data_int_sync2[6]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [6]),
        .O(up_activity0133_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[7]_i_1 
       (.I0(data_int_sync1[7]),
        .I1(data_int_sync2[7]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [7]),
        .O(up_activity0137_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[8]_i_1 
       (.I0(data_int_sync1[8]),
        .I1(data_int_sync2[8]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [8]),
        .O(up_activity0141_out));
  LUT4 #(
    .INIT(16'h0F02)) 
    \up_activity[9]_i_1 
       (.I0(data_int_sync1[9]),
        .I1(data_int_sync2[9]),
        .I2(read_done),
        .I3(\mem_probe_in[2]__0 [9]),
        .O(up_activity0145_out));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0),
        .Q(\mem_probe_in[2]__0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0149_out),
        .Q(\mem_probe_in[2]__0 [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0153_out),
        .Q(\mem_probe_in[2]__0 [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0157_out),
        .Q(\mem_probe_in[2]__0 [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0161_out),
        .Q(\mem_probe_in[2]__0 [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0165_out),
        .Q(\mem_probe_in[2]__0 [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0169_out),
        .Q(\mem_probe_in[2]__0 [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[16]),
        .Q(\mem_probe_in[3]__0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[17]),
        .Q(\mem_probe_in[3]__0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[18]),
        .Q(\mem_probe_in[3]__0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[19]),
        .Q(\mem_probe_in[3]__0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0113_out),
        .Q(\mem_probe_in[2]__0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[20]),
        .Q(\mem_probe_in[3]__0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[21]),
        .Q(\mem_probe_in[3]__0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[22] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[22]),
        .Q(\mem_probe_in[3]__0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[23] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[23]),
        .Q(\mem_probe_in[3]__0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[24] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[24]),
        .Q(\mem_probe_in[3]__0 [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[25] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[25]),
        .Q(\mem_probe_in[3]__0 [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[26] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[26]),
        .Q(\mem_probe_in[3]__0 [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[27] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[27]),
        .Q(\mem_probe_in[3]__0 [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[28] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[28]),
        .Q(\mem_probe_in[3]__0 [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[29] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[29]),
        .Q(\mem_probe_in[3]__0 [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0117_out),
        .Q(\mem_probe_in[2]__0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[30] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[30]),
        .Q(\mem_probe_in[3]__0 [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[31] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_62_out[31]),
        .Q(\mem_probe_in[3]__0 [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0121_out),
        .Q(\mem_probe_in[2]__0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0125_out),
        .Q(\mem_probe_in[2]__0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0129_out),
        .Q(\mem_probe_in[2]__0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0133_out),
        .Q(\mem_probe_in[2]__0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0137_out),
        .Q(\mem_probe_in[2]__0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0141_out),
        .Q(\mem_probe_in[2]__0 [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \up_activity_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(up_activity0145_out),
        .Q(\mem_probe_in[2]__0 [9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_probe_out_all" *) 
module top_aurora_0_0_vio_v3_0_19_probe_out_all
   (probe_out0,
    \Probe_out_reg_int_reg[15]_0 ,
    SR,
    in0,
    clk,
    CLK,
    s_daddr_o,
    \G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ,
    s_den_o,
    s_dwe_o,
    \G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ,
    xsdb_wr__0,
    \G_PROBE_OUT[0].wr_probe_out_reg[0]_2 ,
    internal_cnt_rst,
    Q);
  output [31:0]probe_out0;
  output [15:0]\Probe_out_reg_int_reg[15]_0 ;
  input [0:0]SR;
  input in0;
  input clk;
  input CLK;
  input [10:0]s_daddr_o;
  input \G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ;
  input s_den_o;
  input s_dwe_o;
  input \G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ;
  input xsdb_wr__0;
  input \G_PROBE_OUT[0].wr_probe_out_reg[0]_2 ;
  input internal_cnt_rst;
  input [15:0]Q;

  wire [15:0]Bus_Data_out_int;
  wire CLK;
  (* async_reg = "true" *) wire Committ_1;
  (* async_reg = "true" *) wire Committ_2;
  wire \G_PROBE_OUT[0].wr_probe_out[0]_i_1_n_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ;
  wire \G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ;
  wire \G_PROBE_OUT[0].wr_probe_out_reg[0]_2 ;
  wire [15:0]\Probe_out_reg_int_reg[15]_0 ;
  wire [15:0]Q;
  wire [0:0]SR;
  wire clk;
  wire in0;
  wire internal_cnt_rst;
  wire [31:0]probe_out0;
  wire [10:0]s_daddr_o;
  wire s_den_o;
  wire s_dwe_o;
  wire wr_probe_out;
  wire xsdb_wr__0;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE Committ_1_reg
       (.C(clk),
        .CE(1'b1),
        .D(in0),
        .Q(Committ_1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE Committ_2_reg
       (.C(clk),
        .CE(1'b1),
        .D(Committ_1),
        .Q(Committ_2),
        .R(1'b0));
  top_aurora_0_0_vio_v3_0_19_probe_out_one \G_PROBE_OUT[0].PROBE_OUT0_INST 
       (.\Bus_Data_out_int_reg[15]_0 (Bus_Data_out_int),
        .CLK(CLK),
        .E(wr_probe_out),
        .\Probe_out_reg[31]_0 (Committ_2),
        .Q(Q),
        .SR(SR),
        .\addr_count_reg[0]_0 (\G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ),
        .clk(clk),
        .internal_cnt_rst(internal_cnt_rst),
        .probe_out0(probe_out0),
        .s_daddr_o(s_daddr_o),
        .s_den_o(s_den_o),
        .s_dwe_o(s_dwe_o));
  LUT6 #(
    .INIT(64'h0000004000000000)) 
    \G_PROBE_OUT[0].wr_probe_out[0]_i_1 
       (.I0(\G_PROBE_OUT[0].wr_probe_out_reg[0]_1 ),
        .I1(xsdb_wr__0),
        .I2(s_daddr_o[3]),
        .I3(s_daddr_o[0]),
        .I4(\G_PROBE_OUT[0].wr_probe_out_reg[0]_2 ),
        .I5(\G_PROBE_OUT[0].wr_probe_out_reg[0]_0 ),
        .O(\G_PROBE_OUT[0].wr_probe_out[0]_i_1_n_0 ));
  FDRE \G_PROBE_OUT[0].wr_probe_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\G_PROBE_OUT[0].wr_probe_out[0]_i_1_n_0 ),
        .Q(wr_probe_out),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[0]),
        .Q(\Probe_out_reg_int_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[10]),
        .Q(\Probe_out_reg_int_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[11]),
        .Q(\Probe_out_reg_int_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[12]),
        .Q(\Probe_out_reg_int_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[13]),
        .Q(\Probe_out_reg_int_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[14]),
        .Q(\Probe_out_reg_int_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[15]),
        .Q(\Probe_out_reg_int_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[1]),
        .Q(\Probe_out_reg_int_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[2]),
        .Q(\Probe_out_reg_int_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[3]),
        .Q(\Probe_out_reg_int_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[4]),
        .Q(\Probe_out_reg_int_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[5]),
        .Q(\Probe_out_reg_int_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[6]),
        .Q(\Probe_out_reg_int_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[7]),
        .Q(\Probe_out_reg_int_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[8]),
        .Q(\Probe_out_reg_int_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \Probe_out_reg_int_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(Bus_Data_out_int[9]),
        .Q(\Probe_out_reg_int_reg[15]_0 [9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "vio_v3_0_19_probe_out_one" *) 
module top_aurora_0_0_vio_v3_0_19_probe_out_one
   (probe_out0,
    \Bus_Data_out_int_reg[15]_0 ,
    SR,
    s_daddr_o,
    \addr_count_reg[0]_0 ,
    s_den_o,
    s_dwe_o,
    internal_cnt_rst,
    CLK,
    E,
    Q,
    \Probe_out_reg[31]_0 ,
    clk);
  output [31:0]probe_out0;
  output [15:0]\Bus_Data_out_int_reg[15]_0 ;
  input [0:0]SR;
  input [10:0]s_daddr_o;
  input \addr_count_reg[0]_0 ;
  input s_den_o;
  input s_dwe_o;
  input internal_cnt_rst;
  input CLK;
  input [0:0]E;
  input [15:0]Q;
  input [0:0]\Probe_out_reg[31]_0 ;
  input clk;

  wire \Bus_Data_out_int[0]_i_1_n_0 ;
  wire \Bus_Data_out_int[10]_i_1_n_0 ;
  wire \Bus_Data_out_int[11]_i_1_n_0 ;
  wire \Bus_Data_out_int[12]_i_1_n_0 ;
  wire \Bus_Data_out_int[13]_i_1_n_0 ;
  wire \Bus_Data_out_int[14]_i_1_n_0 ;
  wire \Bus_Data_out_int[15]_i_1_n_0 ;
  wire \Bus_Data_out_int[1]_i_1_n_0 ;
  wire \Bus_Data_out_int[2]_i_1_n_0 ;
  wire \Bus_Data_out_int[3]_i_1_n_0 ;
  wire \Bus_Data_out_int[4]_i_1_n_0 ;
  wire \Bus_Data_out_int[5]_i_1_n_0 ;
  wire \Bus_Data_out_int[6]_i_1_n_0 ;
  wire \Bus_Data_out_int[7]_i_1_n_0 ;
  wire \Bus_Data_out_int[8]_i_1_n_0 ;
  wire \Bus_Data_out_int[9]_i_1_n_0 ;
  wire [15:0]\Bus_Data_out_int_reg[15]_0 ;
  wire CLK;
  wire [0:0]E;
  wire [0:0]\Probe_out_reg[31]_0 ;
  wire [15:0]Q;
  (* DIRECT_RESET *) wire [0:0]SR;
  wire [1:0]addr_count;
  wire \addr_count[0]_i_1_n_0 ;
  wire \addr_count[1]_i_1_n_0 ;
  wire \addr_count[1]_i_3_n_0 ;
  wire \addr_count[1]_i_4_n_0 ;
  wire \addr_count_reg[0]_0 ;
  wire clk;
  wire internal_cnt_rst;
  wire [31:0]\mem_probe_out[0] ;
  (* DONT_TOUCH *) wire [31:0]probe_out0;
  wire rd_probe_out;
  wire [10:0]s_daddr_o;
  wire s_den_o;
  wire s_dwe_o;

  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[0]_i_1 
       (.I0(\mem_probe_out[0] [16]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [0]),
        .O(\Bus_Data_out_int[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[10]_i_1 
       (.I0(\mem_probe_out[0] [26]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [10]),
        .O(\Bus_Data_out_int[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[11]_i_1 
       (.I0(\mem_probe_out[0] [27]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [11]),
        .O(\Bus_Data_out_int[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[12]_i_1 
       (.I0(\mem_probe_out[0] [28]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [12]),
        .O(\Bus_Data_out_int[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[13]_i_1 
       (.I0(\mem_probe_out[0] [29]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [13]),
        .O(\Bus_Data_out_int[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[14]_i_1 
       (.I0(\mem_probe_out[0] [30]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [14]),
        .O(\Bus_Data_out_int[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[15]_i_1 
       (.I0(\mem_probe_out[0] [31]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [15]),
        .O(\Bus_Data_out_int[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[1]_i_1 
       (.I0(\mem_probe_out[0] [17]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [1]),
        .O(\Bus_Data_out_int[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[2]_i_1 
       (.I0(\mem_probe_out[0] [18]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [2]),
        .O(\Bus_Data_out_int[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[3]_i_1 
       (.I0(\mem_probe_out[0] [19]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [3]),
        .O(\Bus_Data_out_int[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[4]_i_1 
       (.I0(\mem_probe_out[0] [20]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [4]),
        .O(\Bus_Data_out_int[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[5]_i_1 
       (.I0(\mem_probe_out[0] [21]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [5]),
        .O(\Bus_Data_out_int[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[6]_i_1 
       (.I0(\mem_probe_out[0] [22]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [6]),
        .O(\Bus_Data_out_int[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[7]_i_1 
       (.I0(\mem_probe_out[0] [23]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [7]),
        .O(\Bus_Data_out_int[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[8]_i_1 
       (.I0(\mem_probe_out[0] [24]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [8]),
        .O(\Bus_Data_out_int[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Bus_Data_out_int[9]_i_1 
       (.I0(\mem_probe_out[0] [25]),
        .I1(addr_count[0]),
        .I2(\mem_probe_out[0] [9]),
        .O(\Bus_Data_out_int[9]_i_1_n_0 ));
  FDRE \Bus_Data_out_int_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[0]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[10]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[11]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[12]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[13]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[14]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[15]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[1]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[2]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[3]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[4]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[5]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[6]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[7]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[8]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \Bus_Data_out_int_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\Bus_Data_out_int[9]_i_1_n_0 ),
        .Q(\Bus_Data_out_int_reg[15]_0 [9]),
        .R(1'b0));
  FDRE \LOOP_I[1].data_int_reg[16] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [0]),
        .Q(\mem_probe_out[0] [16]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[17] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [1]),
        .Q(\mem_probe_out[0] [17]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[18] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [2]),
        .Q(\mem_probe_out[0] [18]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[19] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [3]),
        .Q(\mem_probe_out[0] [19]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[20] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [4]),
        .Q(\mem_probe_out[0] [20]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[21] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [5]),
        .Q(\mem_probe_out[0] [21]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[22] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [6]),
        .Q(\mem_probe_out[0] [22]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[23] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [7]),
        .Q(\mem_probe_out[0] [23]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[24] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [8]),
        .Q(\mem_probe_out[0] [24]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[25] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [9]),
        .Q(\mem_probe_out[0] [25]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[26] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [10]),
        .Q(\mem_probe_out[0] [26]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[27] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [11]),
        .Q(\mem_probe_out[0] [27]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[28] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [12]),
        .Q(\mem_probe_out[0] [28]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[29] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [13]),
        .Q(\mem_probe_out[0] [29]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[30] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [14]),
        .Q(\mem_probe_out[0] [30]),
        .R(SR));
  FDRE \LOOP_I[1].data_int_reg[31] 
       (.C(CLK),
        .CE(E),
        .D(\mem_probe_out[0] [15]),
        .Q(\mem_probe_out[0] [31]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[0] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [0]),
        .Q(probe_out0[0]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[10] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [10]),
        .Q(probe_out0[10]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[11] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [11]),
        .Q(probe_out0[11]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[12] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [12]),
        .Q(probe_out0[12]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[13] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [13]),
        .Q(probe_out0[13]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[14] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [14]),
        .Q(probe_out0[14]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[15] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [15]),
        .Q(probe_out0[15]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[16] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [16]),
        .Q(probe_out0[16]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[17] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [17]),
        .Q(probe_out0[17]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[18] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [18]),
        .Q(probe_out0[18]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[19] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [19]),
        .Q(probe_out0[19]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[1] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [1]),
        .Q(probe_out0[1]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[20] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [20]),
        .Q(probe_out0[20]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[21] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [21]),
        .Q(probe_out0[21]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[22] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [22]),
        .Q(probe_out0[22]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[23] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [23]),
        .Q(probe_out0[23]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[24] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [24]),
        .Q(probe_out0[24]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[25] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [25]),
        .Q(probe_out0[25]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[26] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [26]),
        .Q(probe_out0[26]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[27] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [27]),
        .Q(probe_out0[27]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[28] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [28]),
        .Q(probe_out0[28]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[29] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [29]),
        .Q(probe_out0[29]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[2] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [2]),
        .Q(probe_out0[2]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[30] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [30]),
        .Q(probe_out0[30]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[31] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [31]),
        .Q(probe_out0[31]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[3] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [3]),
        .Q(probe_out0[3]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[4] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [4]),
        .Q(probe_out0[4]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[5] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [5]),
        .Q(probe_out0[5]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[6] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [6]),
        .Q(probe_out0[6]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[7] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [7]),
        .Q(probe_out0[7]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[8] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [8]),
        .Q(probe_out0[8]),
        .R(SR));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE \Probe_out_reg[9] 
       (.C(clk),
        .CE(\Probe_out_reg[31]_0 ),
        .D(\mem_probe_out[0] [9]),
        .Q(probe_out0[9]),
        .R(SR));
  LUT4 #(
    .INIT(16'h0322)) 
    \addr_count[0]_i_1 
       (.I0(addr_count[0]),
        .I1(internal_cnt_rst),
        .I2(addr_count[0]),
        .I3(rd_probe_out),
        .O(\addr_count[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00302222)) 
    \addr_count[1]_i_1 
       (.I0(addr_count[1]),
        .I1(internal_cnt_rst),
        .I2(addr_count[1]),
        .I3(addr_count[0]),
        .I4(rd_probe_out),
        .O(\addr_count[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \addr_count[1]_i_2 
       (.I0(s_daddr_o[4]),
        .I1(s_daddr_o[6]),
        .I2(s_daddr_o[5]),
        .I3(\addr_count[1]_i_3_n_0 ),
        .I4(\addr_count[1]_i_4_n_0 ),
        .I5(\addr_count_reg[0]_0 ),
        .O(rd_probe_out));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \addr_count[1]_i_3 
       (.I0(s_daddr_o[7]),
        .I1(s_daddr_o[8]),
        .I2(s_daddr_o[9]),
        .I3(s_daddr_o[10]),
        .O(\addr_count[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \addr_count[1]_i_4 
       (.I0(s_den_o),
        .I1(s_dwe_o),
        .I2(s_daddr_o[3]),
        .I3(s_daddr_o[0]),
        .I4(s_daddr_o[1]),
        .I5(s_daddr_o[2]),
        .O(\addr_count[1]_i_4_n_0 ));
  (* MAX_FANOUT = "200" *) 
  FDRE \addr_count_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\addr_count[0]_i_1_n_0 ),
        .Q(addr_count[0]),
        .R(1'b0));
  (* MAX_FANOUT = "200" *) 
  FDRE \addr_count_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\addr_count[1]_i_1_n_0 ),
        .Q(addr_count[1]),
        .R(1'b0));
  FDRE \data_int_reg[0] 
       (.C(CLK),
        .CE(E),
        .D(Q[0]),
        .Q(\mem_probe_out[0] [0]),
        .R(SR));
  FDRE \data_int_reg[10] 
       (.C(CLK),
        .CE(E),
        .D(Q[10]),
        .Q(\mem_probe_out[0] [10]),
        .R(SR));
  FDRE \data_int_reg[11] 
       (.C(CLK),
        .CE(E),
        .D(Q[11]),
        .Q(\mem_probe_out[0] [11]),
        .R(SR));
  FDRE \data_int_reg[12] 
       (.C(CLK),
        .CE(E),
        .D(Q[12]),
        .Q(\mem_probe_out[0] [12]),
        .R(SR));
  FDRE \data_int_reg[13] 
       (.C(CLK),
        .CE(E),
        .D(Q[13]),
        .Q(\mem_probe_out[0] [13]),
        .R(SR));
  FDRE \data_int_reg[14] 
       (.C(CLK),
        .CE(E),
        .D(Q[14]),
        .Q(\mem_probe_out[0] [14]),
        .R(SR));
  FDRE \data_int_reg[15] 
       (.C(CLK),
        .CE(E),
        .D(Q[15]),
        .Q(\mem_probe_out[0] [15]),
        .R(SR));
  FDRE \data_int_reg[1] 
       (.C(CLK),
        .CE(E),
        .D(Q[1]),
        .Q(\mem_probe_out[0] [1]),
        .R(SR));
  FDRE \data_int_reg[2] 
       (.C(CLK),
        .CE(E),
        .D(Q[2]),
        .Q(\mem_probe_out[0] [2]),
        .R(SR));
  FDRE \data_int_reg[3] 
       (.C(CLK),
        .CE(E),
        .D(Q[3]),
        .Q(\mem_probe_out[0] [3]),
        .R(SR));
  FDRE \data_int_reg[4] 
       (.C(CLK),
        .CE(E),
        .D(Q[4]),
        .Q(\mem_probe_out[0] [4]),
        .R(SR));
  FDRE \data_int_reg[5] 
       (.C(CLK),
        .CE(E),
        .D(Q[5]),
        .Q(\mem_probe_out[0] [5]),
        .R(SR));
  FDRE \data_int_reg[6] 
       (.C(CLK),
        .CE(E),
        .D(Q[6]),
        .Q(\mem_probe_out[0] [6]),
        .R(SR));
  FDRE \data_int_reg[7] 
       (.C(CLK),
        .CE(E),
        .D(Q[7]),
        .Q(\mem_probe_out[0] [7]),
        .R(SR));
  FDRE \data_int_reg[8] 
       (.C(CLK),
        .CE(E),
        .D(Q[8]),
        .Q(\mem_probe_out[0] [8]),
        .R(SR));
  FDRE \data_int_reg[9] 
       (.C(CLK),
        .CE(E),
        .D(Q[9]),
        .Q(\mem_probe_out[0] [9]),
        .R(SR));
endmodule

(* C_BUILD_REVISION = "0" *) (* C_BUS_ADDR_WIDTH = "17" *) (* C_BUS_DATA_WIDTH = "16" *) 
(* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_CORE_MAJOR_VER = "2" *) 
(* C_CORE_MINOR_ALPHA_VER = "97" *) (* C_CORE_MINOR_VER = "0" *) (* C_CORE_TYPE = "2" *) 
(* C_CSE_DRV_VER = "1" *) (* C_EN_PROBE_IN_ACTIVITY = "1" *) (* C_EN_SYNCHRONIZATION = "1" *) 
(* C_MAJOR_VERSION = "2013" *) (* C_MAX_NUM_PROBE = "256" *) (* C_MAX_WIDTH_PER_PROBE = "256" *) 
(* C_MINOR_VERSION = "1" *) (* C_NEXT_SLAVE = "0" *) (* C_NUM_PROBE_IN = "1" *) 
(* C_NUM_PROBE_OUT = "1" *) (* C_PIPE_IFACE = "0" *) (* C_PROBE_IN0_WIDTH = "32" *) 
(* C_PROBE_IN100_WIDTH = "1" *) (* C_PROBE_IN101_WIDTH = "1" *) (* C_PROBE_IN102_WIDTH = "1" *) 
(* C_PROBE_IN103_WIDTH = "1" *) (* C_PROBE_IN104_WIDTH = "1" *) (* C_PROBE_IN105_WIDTH = "1" *) 
(* C_PROBE_IN106_WIDTH = "1" *) (* C_PROBE_IN107_WIDTH = "1" *) (* C_PROBE_IN108_WIDTH = "1" *) 
(* C_PROBE_IN109_WIDTH = "1" *) (* C_PROBE_IN10_WIDTH = "1" *) (* C_PROBE_IN110_WIDTH = "1" *) 
(* C_PROBE_IN111_WIDTH = "1" *) (* C_PROBE_IN112_WIDTH = "1" *) (* C_PROBE_IN113_WIDTH = "1" *) 
(* C_PROBE_IN114_WIDTH = "1" *) (* C_PROBE_IN115_WIDTH = "1" *) (* C_PROBE_IN116_WIDTH = "1" *) 
(* C_PROBE_IN117_WIDTH = "1" *) (* C_PROBE_IN118_WIDTH = "1" *) (* C_PROBE_IN119_WIDTH = "1" *) 
(* C_PROBE_IN11_WIDTH = "1" *) (* C_PROBE_IN120_WIDTH = "1" *) (* C_PROBE_IN121_WIDTH = "1" *) 
(* C_PROBE_IN122_WIDTH = "1" *) (* C_PROBE_IN123_WIDTH = "1" *) (* C_PROBE_IN124_WIDTH = "1" *) 
(* C_PROBE_IN125_WIDTH = "1" *) (* C_PROBE_IN126_WIDTH = "1" *) (* C_PROBE_IN127_WIDTH = "1" *) 
(* C_PROBE_IN128_WIDTH = "1" *) (* C_PROBE_IN129_WIDTH = "1" *) (* C_PROBE_IN12_WIDTH = "1" *) 
(* C_PROBE_IN130_WIDTH = "1" *) (* C_PROBE_IN131_WIDTH = "1" *) (* C_PROBE_IN132_WIDTH = "1" *) 
(* C_PROBE_IN133_WIDTH = "1" *) (* C_PROBE_IN134_WIDTH = "1" *) (* C_PROBE_IN135_WIDTH = "1" *) 
(* C_PROBE_IN136_WIDTH = "1" *) (* C_PROBE_IN137_WIDTH = "1" *) (* C_PROBE_IN138_WIDTH = "1" *) 
(* C_PROBE_IN139_WIDTH = "1" *) (* C_PROBE_IN13_WIDTH = "1" *) (* C_PROBE_IN140_WIDTH = "1" *) 
(* C_PROBE_IN141_WIDTH = "1" *) (* C_PROBE_IN142_WIDTH = "1" *) (* C_PROBE_IN143_WIDTH = "1" *) 
(* C_PROBE_IN144_WIDTH = "1" *) (* C_PROBE_IN145_WIDTH = "1" *) (* C_PROBE_IN146_WIDTH = "1" *) 
(* C_PROBE_IN147_WIDTH = "1" *) (* C_PROBE_IN148_WIDTH = "1" *) (* C_PROBE_IN149_WIDTH = "1" *) 
(* C_PROBE_IN14_WIDTH = "1" *) (* C_PROBE_IN150_WIDTH = "1" *) (* C_PROBE_IN151_WIDTH = "1" *) 
(* C_PROBE_IN152_WIDTH = "1" *) (* C_PROBE_IN153_WIDTH = "1" *) (* C_PROBE_IN154_WIDTH = "1" *) 
(* C_PROBE_IN155_WIDTH = "1" *) (* C_PROBE_IN156_WIDTH = "1" *) (* C_PROBE_IN157_WIDTH = "1" *) 
(* C_PROBE_IN158_WIDTH = "1" *) (* C_PROBE_IN159_WIDTH = "1" *) (* C_PROBE_IN15_WIDTH = "1" *) 
(* C_PROBE_IN160_WIDTH = "1" *) (* C_PROBE_IN161_WIDTH = "1" *) (* C_PROBE_IN162_WIDTH = "1" *) 
(* C_PROBE_IN163_WIDTH = "1" *) (* C_PROBE_IN164_WIDTH = "1" *) (* C_PROBE_IN165_WIDTH = "1" *) 
(* C_PROBE_IN166_WIDTH = "1" *) (* C_PROBE_IN167_WIDTH = "1" *) (* C_PROBE_IN168_WIDTH = "1" *) 
(* C_PROBE_IN169_WIDTH = "1" *) (* C_PROBE_IN16_WIDTH = "1" *) (* C_PROBE_IN170_WIDTH = "1" *) 
(* C_PROBE_IN171_WIDTH = "1" *) (* C_PROBE_IN172_WIDTH = "1" *) (* C_PROBE_IN173_WIDTH = "1" *) 
(* C_PROBE_IN174_WIDTH = "1" *) (* C_PROBE_IN175_WIDTH = "1" *) (* C_PROBE_IN176_WIDTH = "1" *) 
(* C_PROBE_IN177_WIDTH = "1" *) (* C_PROBE_IN178_WIDTH = "1" *) (* C_PROBE_IN179_WIDTH = "1" *) 
(* C_PROBE_IN17_WIDTH = "1" *) (* C_PROBE_IN180_WIDTH = "1" *) (* C_PROBE_IN181_WIDTH = "1" *) 
(* C_PROBE_IN182_WIDTH = "1" *) (* C_PROBE_IN183_WIDTH = "1" *) (* C_PROBE_IN184_WIDTH = "1" *) 
(* C_PROBE_IN185_WIDTH = "1" *) (* C_PROBE_IN186_WIDTH = "1" *) (* C_PROBE_IN187_WIDTH = "1" *) 
(* C_PROBE_IN188_WIDTH = "1" *) (* C_PROBE_IN189_WIDTH = "1" *) (* C_PROBE_IN18_WIDTH = "1" *) 
(* C_PROBE_IN190_WIDTH = "1" *) (* C_PROBE_IN191_WIDTH = "1" *) (* C_PROBE_IN192_WIDTH = "1" *) 
(* C_PROBE_IN193_WIDTH = "1" *) (* C_PROBE_IN194_WIDTH = "1" *) (* C_PROBE_IN195_WIDTH = "1" *) 
(* C_PROBE_IN196_WIDTH = "1" *) (* C_PROBE_IN197_WIDTH = "1" *) (* C_PROBE_IN198_WIDTH = "1" *) 
(* C_PROBE_IN199_WIDTH = "1" *) (* C_PROBE_IN19_WIDTH = "1" *) (* C_PROBE_IN1_WIDTH = "1" *) 
(* C_PROBE_IN200_WIDTH = "1" *) (* C_PROBE_IN201_WIDTH = "1" *) (* C_PROBE_IN202_WIDTH = "1" *) 
(* C_PROBE_IN203_WIDTH = "1" *) (* C_PROBE_IN204_WIDTH = "1" *) (* C_PROBE_IN205_WIDTH = "1" *) 
(* C_PROBE_IN206_WIDTH = "1" *) (* C_PROBE_IN207_WIDTH = "1" *) (* C_PROBE_IN208_WIDTH = "1" *) 
(* C_PROBE_IN209_WIDTH = "1" *) (* C_PROBE_IN20_WIDTH = "1" *) (* C_PROBE_IN210_WIDTH = "1" *) 
(* C_PROBE_IN211_WIDTH = "1" *) (* C_PROBE_IN212_WIDTH = "1" *) (* C_PROBE_IN213_WIDTH = "1" *) 
(* C_PROBE_IN214_WIDTH = "1" *) (* C_PROBE_IN215_WIDTH = "1" *) (* C_PROBE_IN216_WIDTH = "1" *) 
(* C_PROBE_IN217_WIDTH = "1" *) (* C_PROBE_IN218_WIDTH = "1" *) (* C_PROBE_IN219_WIDTH = "1" *) 
(* C_PROBE_IN21_WIDTH = "1" *) (* C_PROBE_IN220_WIDTH = "1" *) (* C_PROBE_IN221_WIDTH = "1" *) 
(* C_PROBE_IN222_WIDTH = "1" *) (* C_PROBE_IN223_WIDTH = "1" *) (* C_PROBE_IN224_WIDTH = "1" *) 
(* C_PROBE_IN225_WIDTH = "1" *) (* C_PROBE_IN226_WIDTH = "1" *) (* C_PROBE_IN227_WIDTH = "1" *) 
(* C_PROBE_IN228_WIDTH = "1" *) (* C_PROBE_IN229_WIDTH = "1" *) (* C_PROBE_IN22_WIDTH = "1" *) 
(* C_PROBE_IN230_WIDTH = "1" *) (* C_PROBE_IN231_WIDTH = "1" *) (* C_PROBE_IN232_WIDTH = "1" *) 
(* C_PROBE_IN233_WIDTH = "1" *) (* C_PROBE_IN234_WIDTH = "1" *) (* C_PROBE_IN235_WIDTH = "1" *) 
(* C_PROBE_IN236_WIDTH = "1" *) (* C_PROBE_IN237_WIDTH = "1" *) (* C_PROBE_IN238_WIDTH = "1" *) 
(* C_PROBE_IN239_WIDTH = "1" *) (* C_PROBE_IN23_WIDTH = "1" *) (* C_PROBE_IN240_WIDTH = "1" *) 
(* C_PROBE_IN241_WIDTH = "1" *) (* C_PROBE_IN242_WIDTH = "1" *) (* C_PROBE_IN243_WIDTH = "1" *) 
(* C_PROBE_IN244_WIDTH = "1" *) (* C_PROBE_IN245_WIDTH = "1" *) (* C_PROBE_IN246_WIDTH = "1" *) 
(* C_PROBE_IN247_WIDTH = "1" *) (* C_PROBE_IN248_WIDTH = "1" *) (* C_PROBE_IN249_WIDTH = "1" *) 
(* C_PROBE_IN24_WIDTH = "1" *) (* C_PROBE_IN250_WIDTH = "1" *) (* C_PROBE_IN251_WIDTH = "1" *) 
(* C_PROBE_IN252_WIDTH = "1" *) (* C_PROBE_IN253_WIDTH = "1" *) (* C_PROBE_IN254_WIDTH = "1" *) 
(* C_PROBE_IN255_WIDTH = "1" *) (* C_PROBE_IN25_WIDTH = "1" *) (* C_PROBE_IN26_WIDTH = "1" *) 
(* C_PROBE_IN27_WIDTH = "1" *) (* C_PROBE_IN28_WIDTH = "1" *) (* C_PROBE_IN29_WIDTH = "1" *) 
(* C_PROBE_IN2_WIDTH = "1" *) (* C_PROBE_IN30_WIDTH = "1" *) (* C_PROBE_IN31_WIDTH = "1" *) 
(* C_PROBE_IN32_WIDTH = "1" *) (* C_PROBE_IN33_WIDTH = "1" *) (* C_PROBE_IN34_WIDTH = "1" *) 
(* C_PROBE_IN35_WIDTH = "1" *) (* C_PROBE_IN36_WIDTH = "1" *) (* C_PROBE_IN37_WIDTH = "1" *) 
(* C_PROBE_IN38_WIDTH = "1" *) (* C_PROBE_IN39_WIDTH = "1" *) (* C_PROBE_IN3_WIDTH = "1" *) 
(* C_PROBE_IN40_WIDTH = "1" *) (* C_PROBE_IN41_WIDTH = "1" *) (* C_PROBE_IN42_WIDTH = "1" *) 
(* C_PROBE_IN43_WIDTH = "1" *) (* C_PROBE_IN44_WIDTH = "1" *) (* C_PROBE_IN45_WIDTH = "1" *) 
(* C_PROBE_IN46_WIDTH = "1" *) (* C_PROBE_IN47_WIDTH = "1" *) (* C_PROBE_IN48_WIDTH = "1" *) 
(* C_PROBE_IN49_WIDTH = "1" *) (* C_PROBE_IN4_WIDTH = "1" *) (* C_PROBE_IN50_WIDTH = "1" *) 
(* C_PROBE_IN51_WIDTH = "1" *) (* C_PROBE_IN52_WIDTH = "1" *) (* C_PROBE_IN53_WIDTH = "1" *) 
(* C_PROBE_IN54_WIDTH = "1" *) (* C_PROBE_IN55_WIDTH = "1" *) (* C_PROBE_IN56_WIDTH = "1" *) 
(* C_PROBE_IN57_WIDTH = "1" *) (* C_PROBE_IN58_WIDTH = "1" *) (* C_PROBE_IN59_WIDTH = "1" *) 
(* C_PROBE_IN5_WIDTH = "1" *) (* C_PROBE_IN60_WIDTH = "1" *) (* C_PROBE_IN61_WIDTH = "1" *) 
(* C_PROBE_IN62_WIDTH = "1" *) (* C_PROBE_IN63_WIDTH = "1" *) (* C_PROBE_IN64_WIDTH = "1" *) 
(* C_PROBE_IN65_WIDTH = "1" *) (* C_PROBE_IN66_WIDTH = "1" *) (* C_PROBE_IN67_WIDTH = "1" *) 
(* C_PROBE_IN68_WIDTH = "1" *) (* C_PROBE_IN69_WIDTH = "1" *) (* C_PROBE_IN6_WIDTH = "1" *) 
(* C_PROBE_IN70_WIDTH = "1" *) (* C_PROBE_IN71_WIDTH = "1" *) (* C_PROBE_IN72_WIDTH = "1" *) 
(* C_PROBE_IN73_WIDTH = "1" *) (* C_PROBE_IN74_WIDTH = "1" *) (* C_PROBE_IN75_WIDTH = "1" *) 
(* C_PROBE_IN76_WIDTH = "1" *) (* C_PROBE_IN77_WIDTH = "1" *) (* C_PROBE_IN78_WIDTH = "1" *) 
(* C_PROBE_IN79_WIDTH = "1" *) (* C_PROBE_IN7_WIDTH = "1" *) (* C_PROBE_IN80_WIDTH = "1" *) 
(* C_PROBE_IN81_WIDTH = "1" *) (* C_PROBE_IN82_WIDTH = "1" *) (* C_PROBE_IN83_WIDTH = "1" *) 
(* C_PROBE_IN84_WIDTH = "1" *) (* C_PROBE_IN85_WIDTH = "1" *) (* C_PROBE_IN86_WIDTH = "1" *) 
(* C_PROBE_IN87_WIDTH = "1" *) (* C_PROBE_IN88_WIDTH = "1" *) (* C_PROBE_IN89_WIDTH = "1" *) 
(* C_PROBE_IN8_WIDTH = "1" *) (* C_PROBE_IN90_WIDTH = "1" *) (* C_PROBE_IN91_WIDTH = "1" *) 
(* C_PROBE_IN92_WIDTH = "1" *) (* C_PROBE_IN93_WIDTH = "1" *) (* C_PROBE_IN94_WIDTH = "1" *) 
(* C_PROBE_IN95_WIDTH = "1" *) (* C_PROBE_IN96_WIDTH = "1" *) (* C_PROBE_IN97_WIDTH = "1" *) 
(* C_PROBE_IN98_WIDTH = "1" *) (* C_PROBE_IN99_WIDTH = "1" *) (* C_PROBE_IN9_WIDTH = "1" *) 
(* C_PROBE_OUT0_INIT_VAL = "32'b00000000000000000000000000000000" *) (* C_PROBE_OUT0_WIDTH = "32" *) (* C_PROBE_OUT100_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT100_WIDTH = "1" *) (* C_PROBE_OUT101_INIT_VAL = "1'b0" *) (* C_PROBE_OUT101_WIDTH = "1" *) 
(* C_PROBE_OUT102_INIT_VAL = "1'b0" *) (* C_PROBE_OUT102_WIDTH = "1" *) (* C_PROBE_OUT103_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT103_WIDTH = "1" *) (* C_PROBE_OUT104_INIT_VAL = "1'b0" *) (* C_PROBE_OUT104_WIDTH = "1" *) 
(* C_PROBE_OUT105_INIT_VAL = "1'b0" *) (* C_PROBE_OUT105_WIDTH = "1" *) (* C_PROBE_OUT106_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT106_WIDTH = "1" *) (* C_PROBE_OUT107_INIT_VAL = "1'b0" *) (* C_PROBE_OUT107_WIDTH = "1" *) 
(* C_PROBE_OUT108_INIT_VAL = "1'b0" *) (* C_PROBE_OUT108_WIDTH = "1" *) (* C_PROBE_OUT109_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT109_WIDTH = "1" *) (* C_PROBE_OUT10_INIT_VAL = "1'b0" *) (* C_PROBE_OUT10_WIDTH = "1" *) 
(* C_PROBE_OUT110_INIT_VAL = "1'b0" *) (* C_PROBE_OUT110_WIDTH = "1" *) (* C_PROBE_OUT111_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT111_WIDTH = "1" *) (* C_PROBE_OUT112_INIT_VAL = "1'b0" *) (* C_PROBE_OUT112_WIDTH = "1" *) 
(* C_PROBE_OUT113_INIT_VAL = "1'b0" *) (* C_PROBE_OUT113_WIDTH = "1" *) (* C_PROBE_OUT114_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT114_WIDTH = "1" *) (* C_PROBE_OUT115_INIT_VAL = "1'b0" *) (* C_PROBE_OUT115_WIDTH = "1" *) 
(* C_PROBE_OUT116_INIT_VAL = "1'b0" *) (* C_PROBE_OUT116_WIDTH = "1" *) (* C_PROBE_OUT117_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT117_WIDTH = "1" *) (* C_PROBE_OUT118_INIT_VAL = "1'b0" *) (* C_PROBE_OUT118_WIDTH = "1" *) 
(* C_PROBE_OUT119_INIT_VAL = "1'b0" *) (* C_PROBE_OUT119_WIDTH = "1" *) (* C_PROBE_OUT11_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT11_WIDTH = "1" *) (* C_PROBE_OUT120_INIT_VAL = "1'b0" *) (* C_PROBE_OUT120_WIDTH = "1" *) 
(* C_PROBE_OUT121_INIT_VAL = "1'b0" *) (* C_PROBE_OUT121_WIDTH = "1" *) (* C_PROBE_OUT122_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT122_WIDTH = "1" *) (* C_PROBE_OUT123_INIT_VAL = "1'b0" *) (* C_PROBE_OUT123_WIDTH = "1" *) 
(* C_PROBE_OUT124_INIT_VAL = "1'b0" *) (* C_PROBE_OUT124_WIDTH = "1" *) (* C_PROBE_OUT125_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT125_WIDTH = "1" *) (* C_PROBE_OUT126_INIT_VAL = "1'b0" *) (* C_PROBE_OUT126_WIDTH = "1" *) 
(* C_PROBE_OUT127_INIT_VAL = "1'b0" *) (* C_PROBE_OUT127_WIDTH = "1" *) (* C_PROBE_OUT128_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT128_WIDTH = "1" *) (* C_PROBE_OUT129_INIT_VAL = "1'b0" *) (* C_PROBE_OUT129_WIDTH = "1" *) 
(* C_PROBE_OUT12_INIT_VAL = "1'b0" *) (* C_PROBE_OUT12_WIDTH = "1" *) (* C_PROBE_OUT130_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT130_WIDTH = "1" *) (* C_PROBE_OUT131_INIT_VAL = "1'b0" *) (* C_PROBE_OUT131_WIDTH = "1" *) 
(* C_PROBE_OUT132_INIT_VAL = "1'b0" *) (* C_PROBE_OUT132_WIDTH = "1" *) (* C_PROBE_OUT133_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT133_WIDTH = "1" *) (* C_PROBE_OUT134_INIT_VAL = "1'b0" *) (* C_PROBE_OUT134_WIDTH = "1" *) 
(* C_PROBE_OUT135_INIT_VAL = "1'b0" *) (* C_PROBE_OUT135_WIDTH = "1" *) (* C_PROBE_OUT136_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT136_WIDTH = "1" *) (* C_PROBE_OUT137_INIT_VAL = "1'b0" *) (* C_PROBE_OUT137_WIDTH = "1" *) 
(* C_PROBE_OUT138_INIT_VAL = "1'b0" *) (* C_PROBE_OUT138_WIDTH = "1" *) (* C_PROBE_OUT139_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT139_WIDTH = "1" *) (* C_PROBE_OUT13_INIT_VAL = "1'b0" *) (* C_PROBE_OUT13_WIDTH = "1" *) 
(* C_PROBE_OUT140_INIT_VAL = "1'b0" *) (* C_PROBE_OUT140_WIDTH = "1" *) (* C_PROBE_OUT141_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT141_WIDTH = "1" *) (* C_PROBE_OUT142_INIT_VAL = "1'b0" *) (* C_PROBE_OUT142_WIDTH = "1" *) 
(* C_PROBE_OUT143_INIT_VAL = "1'b0" *) (* C_PROBE_OUT143_WIDTH = "1" *) (* C_PROBE_OUT144_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT144_WIDTH = "1" *) (* C_PROBE_OUT145_INIT_VAL = "1'b0" *) (* C_PROBE_OUT145_WIDTH = "1" *) 
(* C_PROBE_OUT146_INIT_VAL = "1'b0" *) (* C_PROBE_OUT146_WIDTH = "1" *) (* C_PROBE_OUT147_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT147_WIDTH = "1" *) (* C_PROBE_OUT148_INIT_VAL = "1'b0" *) (* C_PROBE_OUT148_WIDTH = "1" *) 
(* C_PROBE_OUT149_INIT_VAL = "1'b0" *) (* C_PROBE_OUT149_WIDTH = "1" *) (* C_PROBE_OUT14_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT14_WIDTH = "1" *) (* C_PROBE_OUT150_INIT_VAL = "1'b0" *) (* C_PROBE_OUT150_WIDTH = "1" *) 
(* C_PROBE_OUT151_INIT_VAL = "1'b0" *) (* C_PROBE_OUT151_WIDTH = "1" *) (* C_PROBE_OUT152_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT152_WIDTH = "1" *) (* C_PROBE_OUT153_INIT_VAL = "1'b0" *) (* C_PROBE_OUT153_WIDTH = "1" *) 
(* C_PROBE_OUT154_INIT_VAL = "1'b0" *) (* C_PROBE_OUT154_WIDTH = "1" *) (* C_PROBE_OUT155_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT155_WIDTH = "1" *) (* C_PROBE_OUT156_INIT_VAL = "1'b0" *) (* C_PROBE_OUT156_WIDTH = "1" *) 
(* C_PROBE_OUT157_INIT_VAL = "1'b0" *) (* C_PROBE_OUT157_WIDTH = "1" *) (* C_PROBE_OUT158_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT158_WIDTH = "1" *) (* C_PROBE_OUT159_INIT_VAL = "1'b0" *) (* C_PROBE_OUT159_WIDTH = "1" *) 
(* C_PROBE_OUT15_INIT_VAL = "1'b0" *) (* C_PROBE_OUT15_WIDTH = "1" *) (* C_PROBE_OUT160_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT160_WIDTH = "1" *) (* C_PROBE_OUT161_INIT_VAL = "1'b0" *) (* C_PROBE_OUT161_WIDTH = "1" *) 
(* C_PROBE_OUT162_INIT_VAL = "1'b0" *) (* C_PROBE_OUT162_WIDTH = "1" *) (* C_PROBE_OUT163_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT163_WIDTH = "1" *) (* C_PROBE_OUT164_INIT_VAL = "1'b0" *) (* C_PROBE_OUT164_WIDTH = "1" *) 
(* C_PROBE_OUT165_INIT_VAL = "1'b0" *) (* C_PROBE_OUT165_WIDTH = "1" *) (* C_PROBE_OUT166_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT166_WIDTH = "1" *) (* C_PROBE_OUT167_INIT_VAL = "1'b0" *) (* C_PROBE_OUT167_WIDTH = "1" *) 
(* C_PROBE_OUT168_INIT_VAL = "1'b0" *) (* C_PROBE_OUT168_WIDTH = "1" *) (* C_PROBE_OUT169_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT169_WIDTH = "1" *) (* C_PROBE_OUT16_INIT_VAL = "1'b0" *) (* C_PROBE_OUT16_WIDTH = "1" *) 
(* C_PROBE_OUT170_INIT_VAL = "1'b0" *) (* C_PROBE_OUT170_WIDTH = "1" *) (* C_PROBE_OUT171_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT171_WIDTH = "1" *) (* C_PROBE_OUT172_INIT_VAL = "1'b0" *) (* C_PROBE_OUT172_WIDTH = "1" *) 
(* C_PROBE_OUT173_INIT_VAL = "1'b0" *) (* C_PROBE_OUT173_WIDTH = "1" *) (* C_PROBE_OUT174_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT174_WIDTH = "1" *) (* C_PROBE_OUT175_INIT_VAL = "1'b0" *) (* C_PROBE_OUT175_WIDTH = "1" *) 
(* C_PROBE_OUT176_INIT_VAL = "1'b0" *) (* C_PROBE_OUT176_WIDTH = "1" *) (* C_PROBE_OUT177_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT177_WIDTH = "1" *) (* C_PROBE_OUT178_INIT_VAL = "1'b0" *) (* C_PROBE_OUT178_WIDTH = "1" *) 
(* C_PROBE_OUT179_INIT_VAL = "1'b0" *) (* C_PROBE_OUT179_WIDTH = "1" *) (* C_PROBE_OUT17_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT17_WIDTH = "1" *) (* C_PROBE_OUT180_INIT_VAL = "1'b0" *) (* C_PROBE_OUT180_WIDTH = "1" *) 
(* C_PROBE_OUT181_INIT_VAL = "1'b0" *) (* C_PROBE_OUT181_WIDTH = "1" *) (* C_PROBE_OUT182_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT182_WIDTH = "1" *) (* C_PROBE_OUT183_INIT_VAL = "1'b0" *) (* C_PROBE_OUT183_WIDTH = "1" *) 
(* C_PROBE_OUT184_INIT_VAL = "1'b0" *) (* C_PROBE_OUT184_WIDTH = "1" *) (* C_PROBE_OUT185_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT185_WIDTH = "1" *) (* C_PROBE_OUT186_INIT_VAL = "1'b0" *) (* C_PROBE_OUT186_WIDTH = "1" *) 
(* C_PROBE_OUT187_INIT_VAL = "1'b0" *) (* C_PROBE_OUT187_WIDTH = "1" *) (* C_PROBE_OUT188_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT188_WIDTH = "1" *) (* C_PROBE_OUT189_INIT_VAL = "1'b0" *) (* C_PROBE_OUT189_WIDTH = "1" *) 
(* C_PROBE_OUT18_INIT_VAL = "1'b0" *) (* C_PROBE_OUT18_WIDTH = "1" *) (* C_PROBE_OUT190_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT190_WIDTH = "1" *) (* C_PROBE_OUT191_INIT_VAL = "1'b0" *) (* C_PROBE_OUT191_WIDTH = "1" *) 
(* C_PROBE_OUT192_INIT_VAL = "1'b0" *) (* C_PROBE_OUT192_WIDTH = "1" *) (* C_PROBE_OUT193_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT193_WIDTH = "1" *) (* C_PROBE_OUT194_INIT_VAL = "1'b0" *) (* C_PROBE_OUT194_WIDTH = "1" *) 
(* C_PROBE_OUT195_INIT_VAL = "1'b0" *) (* C_PROBE_OUT195_WIDTH = "1" *) (* C_PROBE_OUT196_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT196_WIDTH = "1" *) (* C_PROBE_OUT197_INIT_VAL = "1'b0" *) (* C_PROBE_OUT197_WIDTH = "1" *) 
(* C_PROBE_OUT198_INIT_VAL = "1'b0" *) (* C_PROBE_OUT198_WIDTH = "1" *) (* C_PROBE_OUT199_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT199_WIDTH = "1" *) (* C_PROBE_OUT19_INIT_VAL = "1'b0" *) (* C_PROBE_OUT19_WIDTH = "1" *) 
(* C_PROBE_OUT1_INIT_VAL = "1'b0" *) (* C_PROBE_OUT1_WIDTH = "1" *) (* C_PROBE_OUT200_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT200_WIDTH = "1" *) (* C_PROBE_OUT201_INIT_VAL = "1'b0" *) (* C_PROBE_OUT201_WIDTH = "1" *) 
(* C_PROBE_OUT202_INIT_VAL = "1'b0" *) (* C_PROBE_OUT202_WIDTH = "1" *) (* C_PROBE_OUT203_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT203_WIDTH = "1" *) (* C_PROBE_OUT204_INIT_VAL = "1'b0" *) (* C_PROBE_OUT204_WIDTH = "1" *) 
(* C_PROBE_OUT205_INIT_VAL = "1'b0" *) (* C_PROBE_OUT205_WIDTH = "1" *) (* C_PROBE_OUT206_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT206_WIDTH = "1" *) (* C_PROBE_OUT207_INIT_VAL = "1'b0" *) (* C_PROBE_OUT207_WIDTH = "1" *) 
(* C_PROBE_OUT208_INIT_VAL = "1'b0" *) (* C_PROBE_OUT208_WIDTH = "1" *) (* C_PROBE_OUT209_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT209_WIDTH = "1" *) (* C_PROBE_OUT20_INIT_VAL = "1'b0" *) (* C_PROBE_OUT20_WIDTH = "1" *) 
(* C_PROBE_OUT210_INIT_VAL = "1'b0" *) (* C_PROBE_OUT210_WIDTH = "1" *) (* C_PROBE_OUT211_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT211_WIDTH = "1" *) (* C_PROBE_OUT212_INIT_VAL = "1'b0" *) (* C_PROBE_OUT212_WIDTH = "1" *) 
(* C_PROBE_OUT213_INIT_VAL = "1'b0" *) (* C_PROBE_OUT213_WIDTH = "1" *) (* C_PROBE_OUT214_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT214_WIDTH = "1" *) (* C_PROBE_OUT215_INIT_VAL = "1'b0" *) (* C_PROBE_OUT215_WIDTH = "1" *) 
(* C_PROBE_OUT216_INIT_VAL = "1'b0" *) (* C_PROBE_OUT216_WIDTH = "1" *) (* C_PROBE_OUT217_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT217_WIDTH = "1" *) (* C_PROBE_OUT218_INIT_VAL = "1'b0" *) (* C_PROBE_OUT218_WIDTH = "1" *) 
(* C_PROBE_OUT219_INIT_VAL = "1'b0" *) (* C_PROBE_OUT219_WIDTH = "1" *) (* C_PROBE_OUT21_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT21_WIDTH = "1" *) (* C_PROBE_OUT220_INIT_VAL = "1'b0" *) (* C_PROBE_OUT220_WIDTH = "1" *) 
(* C_PROBE_OUT221_INIT_VAL = "1'b0" *) (* C_PROBE_OUT221_WIDTH = "1" *) (* C_PROBE_OUT222_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT222_WIDTH = "1" *) (* C_PROBE_OUT223_INIT_VAL = "1'b0" *) (* C_PROBE_OUT223_WIDTH = "1" *) 
(* C_PROBE_OUT224_INIT_VAL = "1'b0" *) (* C_PROBE_OUT224_WIDTH = "1" *) (* C_PROBE_OUT225_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT225_WIDTH = "1" *) (* C_PROBE_OUT226_INIT_VAL = "1'b0" *) (* C_PROBE_OUT226_WIDTH = "1" *) 
(* C_PROBE_OUT227_INIT_VAL = "1'b0" *) (* C_PROBE_OUT227_WIDTH = "1" *) (* C_PROBE_OUT228_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT228_WIDTH = "1" *) (* C_PROBE_OUT229_INIT_VAL = "1'b0" *) (* C_PROBE_OUT229_WIDTH = "1" *) 
(* C_PROBE_OUT22_INIT_VAL = "1'b0" *) (* C_PROBE_OUT22_WIDTH = "1" *) (* C_PROBE_OUT230_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT230_WIDTH = "1" *) (* C_PROBE_OUT231_INIT_VAL = "1'b0" *) (* C_PROBE_OUT231_WIDTH = "1" *) 
(* C_PROBE_OUT232_INIT_VAL = "1'b0" *) (* C_PROBE_OUT232_WIDTH = "1" *) (* C_PROBE_OUT233_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT233_WIDTH = "1" *) (* C_PROBE_OUT234_INIT_VAL = "1'b0" *) (* C_PROBE_OUT234_WIDTH = "1" *) 
(* C_PROBE_OUT235_INIT_VAL = "1'b0" *) (* C_PROBE_OUT235_WIDTH = "1" *) (* C_PROBE_OUT236_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT236_WIDTH = "1" *) (* C_PROBE_OUT237_INIT_VAL = "1'b0" *) (* C_PROBE_OUT237_WIDTH = "1" *) 
(* C_PROBE_OUT238_INIT_VAL = "1'b0" *) (* C_PROBE_OUT238_WIDTH = "1" *) (* C_PROBE_OUT239_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT239_WIDTH = "1" *) (* C_PROBE_OUT23_INIT_VAL = "1'b0" *) (* C_PROBE_OUT23_WIDTH = "1" *) 
(* C_PROBE_OUT240_INIT_VAL = "1'b0" *) (* C_PROBE_OUT240_WIDTH = "1" *) (* C_PROBE_OUT241_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT241_WIDTH = "1" *) (* C_PROBE_OUT242_INIT_VAL = "1'b0" *) (* C_PROBE_OUT242_WIDTH = "1" *) 
(* C_PROBE_OUT243_INIT_VAL = "1'b0" *) (* C_PROBE_OUT243_WIDTH = "1" *) (* C_PROBE_OUT244_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT244_WIDTH = "1" *) (* C_PROBE_OUT245_INIT_VAL = "1'b0" *) (* C_PROBE_OUT245_WIDTH = "1" *) 
(* C_PROBE_OUT246_INIT_VAL = "1'b0" *) (* C_PROBE_OUT246_WIDTH = "1" *) (* C_PROBE_OUT247_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT247_WIDTH = "1" *) (* C_PROBE_OUT248_INIT_VAL = "1'b0" *) (* C_PROBE_OUT248_WIDTH = "1" *) 
(* C_PROBE_OUT249_INIT_VAL = "1'b0" *) (* C_PROBE_OUT249_WIDTH = "1" *) (* C_PROBE_OUT24_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT24_WIDTH = "1" *) (* C_PROBE_OUT250_INIT_VAL = "1'b0" *) (* C_PROBE_OUT250_WIDTH = "1" *) 
(* C_PROBE_OUT251_INIT_VAL = "1'b0" *) (* C_PROBE_OUT251_WIDTH = "1" *) (* C_PROBE_OUT252_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT252_WIDTH = "1" *) (* C_PROBE_OUT253_INIT_VAL = "1'b0" *) (* C_PROBE_OUT253_WIDTH = "1" *) 
(* C_PROBE_OUT254_INIT_VAL = "1'b0" *) (* C_PROBE_OUT254_WIDTH = "1" *) (* C_PROBE_OUT255_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT255_WIDTH = "1" *) (* C_PROBE_OUT25_INIT_VAL = "1'b0" *) (* C_PROBE_OUT25_WIDTH = "1" *) 
(* C_PROBE_OUT26_INIT_VAL = "1'b0" *) (* C_PROBE_OUT26_WIDTH = "1" *) (* C_PROBE_OUT27_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT27_WIDTH = "1" *) (* C_PROBE_OUT28_INIT_VAL = "1'b0" *) (* C_PROBE_OUT28_WIDTH = "1" *) 
(* C_PROBE_OUT29_INIT_VAL = "1'b0" *) (* C_PROBE_OUT29_WIDTH = "1" *) (* C_PROBE_OUT2_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT2_WIDTH = "1" *) (* C_PROBE_OUT30_INIT_VAL = "1'b0" *) (* C_PROBE_OUT30_WIDTH = "1" *) 
(* C_PROBE_OUT31_INIT_VAL = "1'b0" *) (* C_PROBE_OUT31_WIDTH = "1" *) (* C_PROBE_OUT32_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT32_WIDTH = "1" *) (* C_PROBE_OUT33_INIT_VAL = "1'b0" *) (* C_PROBE_OUT33_WIDTH = "1" *) 
(* C_PROBE_OUT34_INIT_VAL = "1'b0" *) (* C_PROBE_OUT34_WIDTH = "1" *) (* C_PROBE_OUT35_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT35_WIDTH = "1" *) (* C_PROBE_OUT36_INIT_VAL = "1'b0" *) (* C_PROBE_OUT36_WIDTH = "1" *) 
(* C_PROBE_OUT37_INIT_VAL = "1'b0" *) (* C_PROBE_OUT37_WIDTH = "1" *) (* C_PROBE_OUT38_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT38_WIDTH = "1" *) (* C_PROBE_OUT39_INIT_VAL = "1'b0" *) (* C_PROBE_OUT39_WIDTH = "1" *) 
(* C_PROBE_OUT3_INIT_VAL = "1'b0" *) (* C_PROBE_OUT3_WIDTH = "1" *) (* C_PROBE_OUT40_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT40_WIDTH = "1" *) (* C_PROBE_OUT41_INIT_VAL = "1'b0" *) (* C_PROBE_OUT41_WIDTH = "1" *) 
(* C_PROBE_OUT42_INIT_VAL = "1'b0" *) (* C_PROBE_OUT42_WIDTH = "1" *) (* C_PROBE_OUT43_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT43_WIDTH = "1" *) (* C_PROBE_OUT44_INIT_VAL = "1'b0" *) (* C_PROBE_OUT44_WIDTH = "1" *) 
(* C_PROBE_OUT45_INIT_VAL = "1'b0" *) (* C_PROBE_OUT45_WIDTH = "1" *) (* C_PROBE_OUT46_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT46_WIDTH = "1" *) (* C_PROBE_OUT47_INIT_VAL = "1'b0" *) (* C_PROBE_OUT47_WIDTH = "1" *) 
(* C_PROBE_OUT48_INIT_VAL = "1'b0" *) (* C_PROBE_OUT48_WIDTH = "1" *) (* C_PROBE_OUT49_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT49_WIDTH = "1" *) (* C_PROBE_OUT4_INIT_VAL = "1'b0" *) (* C_PROBE_OUT4_WIDTH = "1" *) 
(* C_PROBE_OUT50_INIT_VAL = "1'b0" *) (* C_PROBE_OUT50_WIDTH = "1" *) (* C_PROBE_OUT51_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT51_WIDTH = "1" *) (* C_PROBE_OUT52_INIT_VAL = "1'b0" *) (* C_PROBE_OUT52_WIDTH = "1" *) 
(* C_PROBE_OUT53_INIT_VAL = "1'b0" *) (* C_PROBE_OUT53_WIDTH = "1" *) (* C_PROBE_OUT54_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT54_WIDTH = "1" *) (* C_PROBE_OUT55_INIT_VAL = "1'b0" *) (* C_PROBE_OUT55_WIDTH = "1" *) 
(* C_PROBE_OUT56_INIT_VAL = "1'b0" *) (* C_PROBE_OUT56_WIDTH = "1" *) (* C_PROBE_OUT57_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT57_WIDTH = "1" *) (* C_PROBE_OUT58_INIT_VAL = "1'b0" *) (* C_PROBE_OUT58_WIDTH = "1" *) 
(* C_PROBE_OUT59_INIT_VAL = "1'b0" *) (* C_PROBE_OUT59_WIDTH = "1" *) (* C_PROBE_OUT5_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT5_WIDTH = "1" *) (* C_PROBE_OUT60_INIT_VAL = "1'b0" *) (* C_PROBE_OUT60_WIDTH = "1" *) 
(* C_PROBE_OUT61_INIT_VAL = "1'b0" *) (* C_PROBE_OUT61_WIDTH = "1" *) (* C_PROBE_OUT62_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT62_WIDTH = "1" *) (* C_PROBE_OUT63_INIT_VAL = "1'b0" *) (* C_PROBE_OUT63_WIDTH = "1" *) 
(* C_PROBE_OUT64_INIT_VAL = "1'b0" *) (* C_PROBE_OUT64_WIDTH = "1" *) (* C_PROBE_OUT65_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT65_WIDTH = "1" *) (* C_PROBE_OUT66_INIT_VAL = "1'b0" *) (* C_PROBE_OUT66_WIDTH = "1" *) 
(* C_PROBE_OUT67_INIT_VAL = "1'b0" *) (* C_PROBE_OUT67_WIDTH = "1" *) (* C_PROBE_OUT68_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT68_WIDTH = "1" *) (* C_PROBE_OUT69_INIT_VAL = "1'b0" *) (* C_PROBE_OUT69_WIDTH = "1" *) 
(* C_PROBE_OUT6_INIT_VAL = "1'b0" *) (* C_PROBE_OUT6_WIDTH = "1" *) (* C_PROBE_OUT70_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT70_WIDTH = "1" *) (* C_PROBE_OUT71_INIT_VAL = "1'b0" *) (* C_PROBE_OUT71_WIDTH = "1" *) 
(* C_PROBE_OUT72_INIT_VAL = "1'b0" *) (* C_PROBE_OUT72_WIDTH = "1" *) (* C_PROBE_OUT73_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT73_WIDTH = "1" *) (* C_PROBE_OUT74_INIT_VAL = "1'b0" *) (* C_PROBE_OUT74_WIDTH = "1" *) 
(* C_PROBE_OUT75_INIT_VAL = "1'b0" *) (* C_PROBE_OUT75_WIDTH = "1" *) (* C_PROBE_OUT76_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT76_WIDTH = "1" *) (* C_PROBE_OUT77_INIT_VAL = "1'b0" *) (* C_PROBE_OUT77_WIDTH = "1" *) 
(* C_PROBE_OUT78_INIT_VAL = "1'b0" *) (* C_PROBE_OUT78_WIDTH = "1" *) (* C_PROBE_OUT79_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT79_WIDTH = "1" *) (* C_PROBE_OUT7_INIT_VAL = "1'b0" *) (* C_PROBE_OUT7_WIDTH = "1" *) 
(* C_PROBE_OUT80_INIT_VAL = "1'b0" *) (* C_PROBE_OUT80_WIDTH = "1" *) (* C_PROBE_OUT81_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT81_WIDTH = "1" *) (* C_PROBE_OUT82_INIT_VAL = "1'b0" *) (* C_PROBE_OUT82_WIDTH = "1" *) 
(* C_PROBE_OUT83_INIT_VAL = "1'b0" *) (* C_PROBE_OUT83_WIDTH = "1" *) (* C_PROBE_OUT84_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT84_WIDTH = "1" *) (* C_PROBE_OUT85_INIT_VAL = "1'b0" *) (* C_PROBE_OUT85_WIDTH = "1" *) 
(* C_PROBE_OUT86_INIT_VAL = "1'b0" *) (* C_PROBE_OUT86_WIDTH = "1" *) (* C_PROBE_OUT87_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT87_WIDTH = "1" *) (* C_PROBE_OUT88_INIT_VAL = "1'b0" *) (* C_PROBE_OUT88_WIDTH = "1" *) 
(* C_PROBE_OUT89_INIT_VAL = "1'b0" *) (* C_PROBE_OUT89_WIDTH = "1" *) (* C_PROBE_OUT8_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT8_WIDTH = "1" *) (* C_PROBE_OUT90_INIT_VAL = "1'b0" *) (* C_PROBE_OUT90_WIDTH = "1" *) 
(* C_PROBE_OUT91_INIT_VAL = "1'b0" *) (* C_PROBE_OUT91_WIDTH = "1" *) (* C_PROBE_OUT92_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT92_WIDTH = "1" *) (* C_PROBE_OUT93_INIT_VAL = "1'b0" *) (* C_PROBE_OUT93_WIDTH = "1" *) 
(* C_PROBE_OUT94_INIT_VAL = "1'b0" *) (* C_PROBE_OUT94_WIDTH = "1" *) (* C_PROBE_OUT95_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT95_WIDTH = "1" *) (* C_PROBE_OUT96_INIT_VAL = "1'b0" *) (* C_PROBE_OUT96_WIDTH = "1" *) 
(* C_PROBE_OUT97_INIT_VAL = "1'b0" *) (* C_PROBE_OUT97_WIDTH = "1" *) (* C_PROBE_OUT98_INIT_VAL = "1'b0" *) 
(* C_PROBE_OUT98_WIDTH = "1" *) (* C_PROBE_OUT99_INIT_VAL = "1'b0" *) (* C_PROBE_OUT99_WIDTH = "1" *) 
(* C_PROBE_OUT9_INIT_VAL = "1'b0" *) (* C_PROBE_OUT9_WIDTH = "1" *) (* C_USE_TEST_REG = "1" *) 
(* C_XDEVICEFAMILY = "virtex7" *) (* C_XLNX_HW_PROBE_INFO = "DEFAULT" *) (* C_XSDB_SLAVE_TYPE = "33" *) 
(* DowngradeIPIdentifiedWarnings = "yes" *) (* LC_HIGH_BIT_POS_PROBE_OUT0 = "16'b0000000000011111" *) (* LC_HIGH_BIT_POS_PROBE_OUT1 = "16'b0000000000100000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT10 = "16'b0000000000101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT100 = "16'b0000000010000011" *) (* LC_HIGH_BIT_POS_PROBE_OUT101 = "16'b0000000010000100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT102 = "16'b0000000010000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT103 = "16'b0000000010000110" *) (* LC_HIGH_BIT_POS_PROBE_OUT104 = "16'b0000000010000111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT105 = "16'b0000000010001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT106 = "16'b0000000010001001" *) (* LC_HIGH_BIT_POS_PROBE_OUT107 = "16'b0000000010001010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT108 = "16'b0000000010001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT109 = "16'b0000000010001100" *) (* LC_HIGH_BIT_POS_PROBE_OUT11 = "16'b0000000000101010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT110 = "16'b0000000010001101" *) (* LC_HIGH_BIT_POS_PROBE_OUT111 = "16'b0000000010001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT112 = "16'b0000000010001111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT113 = "16'b0000000010010000" *) (* LC_HIGH_BIT_POS_PROBE_OUT114 = "16'b0000000010010001" *) (* LC_HIGH_BIT_POS_PROBE_OUT115 = "16'b0000000010010010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT116 = "16'b0000000010010011" *) (* LC_HIGH_BIT_POS_PROBE_OUT117 = "16'b0000000010010100" *) (* LC_HIGH_BIT_POS_PROBE_OUT118 = "16'b0000000010010101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT119 = "16'b0000000010010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT12 = "16'b0000000000101011" *) (* LC_HIGH_BIT_POS_PROBE_OUT120 = "16'b0000000010010111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT121 = "16'b0000000010011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT122 = "16'b0000000010011001" *) (* LC_HIGH_BIT_POS_PROBE_OUT123 = "16'b0000000010011010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT124 = "16'b0000000010011011" *) (* LC_HIGH_BIT_POS_PROBE_OUT125 = "16'b0000000010011100" *) (* LC_HIGH_BIT_POS_PROBE_OUT126 = "16'b0000000010011101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT127 = "16'b0000000010011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT128 = "16'b0000000010011111" *) (* LC_HIGH_BIT_POS_PROBE_OUT129 = "16'b0000000010100000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT13 = "16'b0000000000101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT130 = "16'b0000000010100001" *) (* LC_HIGH_BIT_POS_PROBE_OUT131 = "16'b0000000010100010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT132 = "16'b0000000010100011" *) (* LC_HIGH_BIT_POS_PROBE_OUT133 = "16'b0000000010100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT134 = "16'b0000000010100101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT135 = "16'b0000000010100110" *) (* LC_HIGH_BIT_POS_PROBE_OUT136 = "16'b0000000010100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT137 = "16'b0000000010101000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT138 = "16'b0000000010101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT139 = "16'b0000000010101010" *) (* LC_HIGH_BIT_POS_PROBE_OUT14 = "16'b0000000000101101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT140 = "16'b0000000010101011" *) (* LC_HIGH_BIT_POS_PROBE_OUT141 = "16'b0000000010101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT142 = "16'b0000000010101101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT143 = "16'b0000000010101110" *) (* LC_HIGH_BIT_POS_PROBE_OUT144 = "16'b0000000010101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT145 = "16'b0000000010110000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT146 = "16'b0000000010110001" *) (* LC_HIGH_BIT_POS_PROBE_OUT147 = "16'b0000000010110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT148 = "16'b0000000010110011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT149 = "16'b0000000010110100" *) (* LC_HIGH_BIT_POS_PROBE_OUT15 = "16'b0000000000101110" *) (* LC_HIGH_BIT_POS_PROBE_OUT150 = "16'b0000000010110101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT151 = "16'b0000000010110110" *) (* LC_HIGH_BIT_POS_PROBE_OUT152 = "16'b0000000010110111" *) (* LC_HIGH_BIT_POS_PROBE_OUT153 = "16'b0000000010111000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT154 = "16'b0000000010111001" *) (* LC_HIGH_BIT_POS_PROBE_OUT155 = "16'b0000000010111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT156 = "16'b0000000010111011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT157 = "16'b0000000010111100" *) (* LC_HIGH_BIT_POS_PROBE_OUT158 = "16'b0000000010111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT159 = "16'b0000000010111110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT16 = "16'b0000000000101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT160 = "16'b0000000010111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT161 = "16'b0000000011000000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT162 = "16'b0000000011000001" *) (* LC_HIGH_BIT_POS_PROBE_OUT163 = "16'b0000000011000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT164 = "16'b0000000011000011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT165 = "16'b0000000011000100" *) (* LC_HIGH_BIT_POS_PROBE_OUT166 = "16'b0000000011000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT167 = "16'b0000000011000110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT168 = "16'b0000000011000111" *) (* LC_HIGH_BIT_POS_PROBE_OUT169 = "16'b0000000011001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT17 = "16'b0000000000110000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT170 = "16'b0000000011001001" *) (* LC_HIGH_BIT_POS_PROBE_OUT171 = "16'b0000000011001010" *) (* LC_HIGH_BIT_POS_PROBE_OUT172 = "16'b0000000011001011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT173 = "16'b0000000011001100" *) (* LC_HIGH_BIT_POS_PROBE_OUT174 = "16'b0000000011001101" *) (* LC_HIGH_BIT_POS_PROBE_OUT175 = "16'b0000000011001110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT176 = "16'b0000000011001111" *) (* LC_HIGH_BIT_POS_PROBE_OUT177 = "16'b0000000011010000" *) (* LC_HIGH_BIT_POS_PROBE_OUT178 = "16'b0000000011010001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT179 = "16'b0000000011010010" *) (* LC_HIGH_BIT_POS_PROBE_OUT18 = "16'b0000000000110001" *) (* LC_HIGH_BIT_POS_PROBE_OUT180 = "16'b0000000011010011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT181 = "16'b0000000011010100" *) (* LC_HIGH_BIT_POS_PROBE_OUT182 = "16'b0000000011010101" *) (* LC_HIGH_BIT_POS_PROBE_OUT183 = "16'b0000000011010110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT184 = "16'b0000000011010111" *) (* LC_HIGH_BIT_POS_PROBE_OUT185 = "16'b0000000011011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT186 = "16'b0000000011011001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT187 = "16'b0000000011011010" *) (* LC_HIGH_BIT_POS_PROBE_OUT188 = "16'b0000000011011011" *) (* LC_HIGH_BIT_POS_PROBE_OUT189 = "16'b0000000011011100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT19 = "16'b0000000000110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT190 = "16'b0000000011011101" *) (* LC_HIGH_BIT_POS_PROBE_OUT191 = "16'b0000000011011110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT192 = "16'b0000000011011111" *) (* LC_HIGH_BIT_POS_PROBE_OUT193 = "16'b0000000011100000" *) (* LC_HIGH_BIT_POS_PROBE_OUT194 = "16'b0000000011100001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT195 = "16'b0000000011100010" *) (* LC_HIGH_BIT_POS_PROBE_OUT196 = "16'b0000000011100011" *) (* LC_HIGH_BIT_POS_PROBE_OUT197 = "16'b0000000011100100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT198 = "16'b0000000011100101" *) (* LC_HIGH_BIT_POS_PROBE_OUT199 = "16'b0000000011100110" *) (* LC_HIGH_BIT_POS_PROBE_OUT2 = "16'b0000000000100001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT20 = "16'b0000000000110011" *) (* LC_HIGH_BIT_POS_PROBE_OUT200 = "16'b0000000011100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT201 = "16'b0000000011101000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT202 = "16'b0000000011101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT203 = "16'b0000000011101010" *) (* LC_HIGH_BIT_POS_PROBE_OUT204 = "16'b0000000011101011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT205 = "16'b0000000011101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT206 = "16'b0000000011101101" *) (* LC_HIGH_BIT_POS_PROBE_OUT207 = "16'b0000000011101110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT208 = "16'b0000000011101111" *) (* LC_HIGH_BIT_POS_PROBE_OUT209 = "16'b0000000011110000" *) (* LC_HIGH_BIT_POS_PROBE_OUT21 = "16'b0000000000110100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT210 = "16'b0000000011110001" *) (* LC_HIGH_BIT_POS_PROBE_OUT211 = "16'b0000000011110010" *) (* LC_HIGH_BIT_POS_PROBE_OUT212 = "16'b0000000011110011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT213 = "16'b0000000011110100" *) (* LC_HIGH_BIT_POS_PROBE_OUT214 = "16'b0000000011110101" *) (* LC_HIGH_BIT_POS_PROBE_OUT215 = "16'b0000000011110110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT216 = "16'b0000000011110111" *) (* LC_HIGH_BIT_POS_PROBE_OUT217 = "16'b0000000011111000" *) (* LC_HIGH_BIT_POS_PROBE_OUT218 = "16'b0000000011111001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT219 = "16'b0000000011111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT22 = "16'b0000000000110101" *) (* LC_HIGH_BIT_POS_PROBE_OUT220 = "16'b0000000011111011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT221 = "16'b0000000011111100" *) (* LC_HIGH_BIT_POS_PROBE_OUT222 = "16'b0000000011111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT223 = "16'b0000000011111110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT224 = "16'b0000000011111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT225 = "16'b0000000100000000" *) (* LC_HIGH_BIT_POS_PROBE_OUT226 = "16'b0000000100000001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT227 = "16'b0000000100000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT228 = "16'b0000000100000011" *) (* LC_HIGH_BIT_POS_PROBE_OUT229 = "16'b0000000100000100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT23 = "16'b0000000000110110" *) (* LC_HIGH_BIT_POS_PROBE_OUT230 = "16'b0000000100000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT231 = "16'b0000000100000110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT232 = "16'b0000000100000111" *) (* LC_HIGH_BIT_POS_PROBE_OUT233 = "16'b0000000100001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT234 = "16'b0000000100001001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT235 = "16'b0000000100001010" *) (* LC_HIGH_BIT_POS_PROBE_OUT236 = "16'b0000000100001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT237 = "16'b0000000100001100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT238 = "16'b0000000100001101" *) (* LC_HIGH_BIT_POS_PROBE_OUT239 = "16'b0000000100001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT24 = "16'b0000000000110111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT240 = "16'b0000000100001111" *) (* LC_HIGH_BIT_POS_PROBE_OUT241 = "16'b0000000100010000" *) (* LC_HIGH_BIT_POS_PROBE_OUT242 = "16'b0000000100010001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT243 = "16'b0000000100010010" *) (* LC_HIGH_BIT_POS_PROBE_OUT244 = "16'b0000000100010011" *) (* LC_HIGH_BIT_POS_PROBE_OUT245 = "16'b0000000100010100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT246 = "16'b0000000100010101" *) (* LC_HIGH_BIT_POS_PROBE_OUT247 = "16'b0000000100010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT248 = "16'b0000000100010111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT249 = "16'b0000000100011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT25 = "16'b0000000000111000" *) (* LC_HIGH_BIT_POS_PROBE_OUT250 = "16'b0000000100011001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT251 = "16'b0000000100011010" *) (* LC_HIGH_BIT_POS_PROBE_OUT252 = "16'b0000000100011011" *) (* LC_HIGH_BIT_POS_PROBE_OUT253 = "16'b0000000100011100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT254 = "16'b0000000100011101" *) (* LC_HIGH_BIT_POS_PROBE_OUT255 = "16'b0000000100011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT26 = "16'b0000000000111001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT27 = "16'b0000000000111010" *) (* LC_HIGH_BIT_POS_PROBE_OUT28 = "16'b0000000000111011" *) (* LC_HIGH_BIT_POS_PROBE_OUT29 = "16'b0000000000111100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT3 = "16'b0000000000100010" *) (* LC_HIGH_BIT_POS_PROBE_OUT30 = "16'b0000000000111101" *) (* LC_HIGH_BIT_POS_PROBE_OUT31 = "16'b0000000000111110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT32 = "16'b0000000000111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT33 = "16'b0000000001000000" *) (* LC_HIGH_BIT_POS_PROBE_OUT34 = "16'b0000000001000001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT35 = "16'b0000000001000010" *) (* LC_HIGH_BIT_POS_PROBE_OUT36 = "16'b0000000001000011" *) (* LC_HIGH_BIT_POS_PROBE_OUT37 = "16'b0000000001000100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT38 = "16'b0000000001000101" *) (* LC_HIGH_BIT_POS_PROBE_OUT39 = "16'b0000000001000110" *) (* LC_HIGH_BIT_POS_PROBE_OUT4 = "16'b0000000000100011" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT40 = "16'b0000000001000111" *) (* LC_HIGH_BIT_POS_PROBE_OUT41 = "16'b0000000001001000" *) (* LC_HIGH_BIT_POS_PROBE_OUT42 = "16'b0000000001001001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT43 = "16'b0000000001001010" *) (* LC_HIGH_BIT_POS_PROBE_OUT44 = "16'b0000000001001011" *) (* LC_HIGH_BIT_POS_PROBE_OUT45 = "16'b0000000001001100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT46 = "16'b0000000001001101" *) (* LC_HIGH_BIT_POS_PROBE_OUT47 = "16'b0000000001001110" *) (* LC_HIGH_BIT_POS_PROBE_OUT48 = "16'b0000000001001111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT49 = "16'b0000000001010000" *) (* LC_HIGH_BIT_POS_PROBE_OUT5 = "16'b0000000000100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT50 = "16'b0000000001010001" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT51 = "16'b0000000001010010" *) (* LC_HIGH_BIT_POS_PROBE_OUT52 = "16'b0000000001010011" *) (* LC_HIGH_BIT_POS_PROBE_OUT53 = "16'b0000000001010100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT54 = "16'b0000000001010101" *) (* LC_HIGH_BIT_POS_PROBE_OUT55 = "16'b0000000001010110" *) (* LC_HIGH_BIT_POS_PROBE_OUT56 = "16'b0000000001010111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT57 = "16'b0000000001011000" *) (* LC_HIGH_BIT_POS_PROBE_OUT58 = "16'b0000000001011001" *) (* LC_HIGH_BIT_POS_PROBE_OUT59 = "16'b0000000001011010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT6 = "16'b0000000000100101" *) (* LC_HIGH_BIT_POS_PROBE_OUT60 = "16'b0000000001011011" *) (* LC_HIGH_BIT_POS_PROBE_OUT61 = "16'b0000000001011100" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT62 = "16'b0000000001011101" *) (* LC_HIGH_BIT_POS_PROBE_OUT63 = "16'b0000000001011110" *) (* LC_HIGH_BIT_POS_PROBE_OUT64 = "16'b0000000001011111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT65 = "16'b0000000001100000" *) (* LC_HIGH_BIT_POS_PROBE_OUT66 = "16'b0000000001100001" *) (* LC_HIGH_BIT_POS_PROBE_OUT67 = "16'b0000000001100010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT68 = "16'b0000000001100011" *) (* LC_HIGH_BIT_POS_PROBE_OUT69 = "16'b0000000001100100" *) (* LC_HIGH_BIT_POS_PROBE_OUT7 = "16'b0000000000100110" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT70 = "16'b0000000001100101" *) (* LC_HIGH_BIT_POS_PROBE_OUT71 = "16'b0000000001100110" *) (* LC_HIGH_BIT_POS_PROBE_OUT72 = "16'b0000000001100111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT73 = "16'b0000000001101000" *) (* LC_HIGH_BIT_POS_PROBE_OUT74 = "16'b0000000001101001" *) (* LC_HIGH_BIT_POS_PROBE_OUT75 = "16'b0000000001101010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT76 = "16'b0000000001101011" *) (* LC_HIGH_BIT_POS_PROBE_OUT77 = "16'b0000000001101100" *) (* LC_HIGH_BIT_POS_PROBE_OUT78 = "16'b0000000001101101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT79 = "16'b0000000001101110" *) (* LC_HIGH_BIT_POS_PROBE_OUT8 = "16'b0000000000100111" *) (* LC_HIGH_BIT_POS_PROBE_OUT80 = "16'b0000000001101111" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT81 = "16'b0000000001110000" *) (* LC_HIGH_BIT_POS_PROBE_OUT82 = "16'b0000000001110001" *) (* LC_HIGH_BIT_POS_PROBE_OUT83 = "16'b0000000001110010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT84 = "16'b0000000001110011" *) (* LC_HIGH_BIT_POS_PROBE_OUT85 = "16'b0000000001110100" *) (* LC_HIGH_BIT_POS_PROBE_OUT86 = "16'b0000000001110101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT87 = "16'b0000000001110110" *) (* LC_HIGH_BIT_POS_PROBE_OUT88 = "16'b0000000001110111" *) (* LC_HIGH_BIT_POS_PROBE_OUT89 = "16'b0000000001111000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT9 = "16'b0000000000101000" *) (* LC_HIGH_BIT_POS_PROBE_OUT90 = "16'b0000000001111001" *) (* LC_HIGH_BIT_POS_PROBE_OUT91 = "16'b0000000001111010" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT92 = "16'b0000000001111011" *) (* LC_HIGH_BIT_POS_PROBE_OUT93 = "16'b0000000001111100" *) (* LC_HIGH_BIT_POS_PROBE_OUT94 = "16'b0000000001111101" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT95 = "16'b0000000001111110" *) (* LC_HIGH_BIT_POS_PROBE_OUT96 = "16'b0000000001111111" *) (* LC_HIGH_BIT_POS_PROBE_OUT97 = "16'b0000000010000000" *) 
(* LC_HIGH_BIT_POS_PROBE_OUT98 = "16'b0000000010000001" *) (* LC_HIGH_BIT_POS_PROBE_OUT99 = "16'b0000000010000010" *) (* LC_LOW_BIT_POS_PROBE_OUT0 = "16'b0000000000000000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT1 = "16'b0000000000100000" *) (* LC_LOW_BIT_POS_PROBE_OUT10 = "16'b0000000000101001" *) (* LC_LOW_BIT_POS_PROBE_OUT100 = "16'b0000000010000011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT101 = "16'b0000000010000100" *) (* LC_LOW_BIT_POS_PROBE_OUT102 = "16'b0000000010000101" *) (* LC_LOW_BIT_POS_PROBE_OUT103 = "16'b0000000010000110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT104 = "16'b0000000010000111" *) (* LC_LOW_BIT_POS_PROBE_OUT105 = "16'b0000000010001000" *) (* LC_LOW_BIT_POS_PROBE_OUT106 = "16'b0000000010001001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT107 = "16'b0000000010001010" *) (* LC_LOW_BIT_POS_PROBE_OUT108 = "16'b0000000010001011" *) (* LC_LOW_BIT_POS_PROBE_OUT109 = "16'b0000000010001100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT11 = "16'b0000000000101010" *) (* LC_LOW_BIT_POS_PROBE_OUT110 = "16'b0000000010001101" *) (* LC_LOW_BIT_POS_PROBE_OUT111 = "16'b0000000010001110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT112 = "16'b0000000010001111" *) (* LC_LOW_BIT_POS_PROBE_OUT113 = "16'b0000000010010000" *) (* LC_LOW_BIT_POS_PROBE_OUT114 = "16'b0000000010010001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT115 = "16'b0000000010010010" *) (* LC_LOW_BIT_POS_PROBE_OUT116 = "16'b0000000010010011" *) (* LC_LOW_BIT_POS_PROBE_OUT117 = "16'b0000000010010100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT118 = "16'b0000000010010101" *) (* LC_LOW_BIT_POS_PROBE_OUT119 = "16'b0000000010010110" *) (* LC_LOW_BIT_POS_PROBE_OUT12 = "16'b0000000000101011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT120 = "16'b0000000010010111" *) (* LC_LOW_BIT_POS_PROBE_OUT121 = "16'b0000000010011000" *) (* LC_LOW_BIT_POS_PROBE_OUT122 = "16'b0000000010011001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT123 = "16'b0000000010011010" *) (* LC_LOW_BIT_POS_PROBE_OUT124 = "16'b0000000010011011" *) (* LC_LOW_BIT_POS_PROBE_OUT125 = "16'b0000000010011100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT126 = "16'b0000000010011101" *) (* LC_LOW_BIT_POS_PROBE_OUT127 = "16'b0000000010011110" *) (* LC_LOW_BIT_POS_PROBE_OUT128 = "16'b0000000010011111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT129 = "16'b0000000010100000" *) (* LC_LOW_BIT_POS_PROBE_OUT13 = "16'b0000000000101100" *) (* LC_LOW_BIT_POS_PROBE_OUT130 = "16'b0000000010100001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT131 = "16'b0000000010100010" *) (* LC_LOW_BIT_POS_PROBE_OUT132 = "16'b0000000010100011" *) (* LC_LOW_BIT_POS_PROBE_OUT133 = "16'b0000000010100100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT134 = "16'b0000000010100101" *) (* LC_LOW_BIT_POS_PROBE_OUT135 = "16'b0000000010100110" *) (* LC_LOW_BIT_POS_PROBE_OUT136 = "16'b0000000010100111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT137 = "16'b0000000010101000" *) (* LC_LOW_BIT_POS_PROBE_OUT138 = "16'b0000000010101001" *) (* LC_LOW_BIT_POS_PROBE_OUT139 = "16'b0000000010101010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT14 = "16'b0000000000101101" *) (* LC_LOW_BIT_POS_PROBE_OUT140 = "16'b0000000010101011" *) (* LC_LOW_BIT_POS_PROBE_OUT141 = "16'b0000000010101100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT142 = "16'b0000000010101101" *) (* LC_LOW_BIT_POS_PROBE_OUT143 = "16'b0000000010101110" *) (* LC_LOW_BIT_POS_PROBE_OUT144 = "16'b0000000010101111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT145 = "16'b0000000010110000" *) (* LC_LOW_BIT_POS_PROBE_OUT146 = "16'b0000000010110001" *) (* LC_LOW_BIT_POS_PROBE_OUT147 = "16'b0000000010110010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT148 = "16'b0000000010110011" *) (* LC_LOW_BIT_POS_PROBE_OUT149 = "16'b0000000010110100" *) (* LC_LOW_BIT_POS_PROBE_OUT15 = "16'b0000000000101110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT150 = "16'b0000000010110101" *) (* LC_LOW_BIT_POS_PROBE_OUT151 = "16'b0000000010110110" *) (* LC_LOW_BIT_POS_PROBE_OUT152 = "16'b0000000010110111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT153 = "16'b0000000010111000" *) (* LC_LOW_BIT_POS_PROBE_OUT154 = "16'b0000000010111001" *) (* LC_LOW_BIT_POS_PROBE_OUT155 = "16'b0000000010111010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT156 = "16'b0000000010111011" *) (* LC_LOW_BIT_POS_PROBE_OUT157 = "16'b0000000010111100" *) (* LC_LOW_BIT_POS_PROBE_OUT158 = "16'b0000000010111101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT159 = "16'b0000000010111110" *) (* LC_LOW_BIT_POS_PROBE_OUT16 = "16'b0000000000101111" *) (* LC_LOW_BIT_POS_PROBE_OUT160 = "16'b0000000010111111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT161 = "16'b0000000011000000" *) (* LC_LOW_BIT_POS_PROBE_OUT162 = "16'b0000000011000001" *) (* LC_LOW_BIT_POS_PROBE_OUT163 = "16'b0000000011000010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT164 = "16'b0000000011000011" *) (* LC_LOW_BIT_POS_PROBE_OUT165 = "16'b0000000011000100" *) (* LC_LOW_BIT_POS_PROBE_OUT166 = "16'b0000000011000101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT167 = "16'b0000000011000110" *) (* LC_LOW_BIT_POS_PROBE_OUT168 = "16'b0000000011000111" *) (* LC_LOW_BIT_POS_PROBE_OUT169 = "16'b0000000011001000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT17 = "16'b0000000000110000" *) (* LC_LOW_BIT_POS_PROBE_OUT170 = "16'b0000000011001001" *) (* LC_LOW_BIT_POS_PROBE_OUT171 = "16'b0000000011001010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT172 = "16'b0000000011001011" *) (* LC_LOW_BIT_POS_PROBE_OUT173 = "16'b0000000011001100" *) (* LC_LOW_BIT_POS_PROBE_OUT174 = "16'b0000000011001101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT175 = "16'b0000000011001110" *) (* LC_LOW_BIT_POS_PROBE_OUT176 = "16'b0000000011001111" *) (* LC_LOW_BIT_POS_PROBE_OUT177 = "16'b0000000011010000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT178 = "16'b0000000011010001" *) (* LC_LOW_BIT_POS_PROBE_OUT179 = "16'b0000000011010010" *) (* LC_LOW_BIT_POS_PROBE_OUT18 = "16'b0000000000110001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT180 = "16'b0000000011010011" *) (* LC_LOW_BIT_POS_PROBE_OUT181 = "16'b0000000011010100" *) (* LC_LOW_BIT_POS_PROBE_OUT182 = "16'b0000000011010101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT183 = "16'b0000000011010110" *) (* LC_LOW_BIT_POS_PROBE_OUT184 = "16'b0000000011010111" *) (* LC_LOW_BIT_POS_PROBE_OUT185 = "16'b0000000011011000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT186 = "16'b0000000011011001" *) (* LC_LOW_BIT_POS_PROBE_OUT187 = "16'b0000000011011010" *) (* LC_LOW_BIT_POS_PROBE_OUT188 = "16'b0000000011011011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT189 = "16'b0000000011011100" *) (* LC_LOW_BIT_POS_PROBE_OUT19 = "16'b0000000000110010" *) (* LC_LOW_BIT_POS_PROBE_OUT190 = "16'b0000000011011101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT191 = "16'b0000000011011110" *) (* LC_LOW_BIT_POS_PROBE_OUT192 = "16'b0000000011011111" *) (* LC_LOW_BIT_POS_PROBE_OUT193 = "16'b0000000011100000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT194 = "16'b0000000011100001" *) (* LC_LOW_BIT_POS_PROBE_OUT195 = "16'b0000000011100010" *) (* LC_LOW_BIT_POS_PROBE_OUT196 = "16'b0000000011100011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT197 = "16'b0000000011100100" *) (* LC_LOW_BIT_POS_PROBE_OUT198 = "16'b0000000011100101" *) (* LC_LOW_BIT_POS_PROBE_OUT199 = "16'b0000000011100110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT2 = "16'b0000000000100001" *) (* LC_LOW_BIT_POS_PROBE_OUT20 = "16'b0000000000110011" *) (* LC_LOW_BIT_POS_PROBE_OUT200 = "16'b0000000011100111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT201 = "16'b0000000011101000" *) (* LC_LOW_BIT_POS_PROBE_OUT202 = "16'b0000000011101001" *) (* LC_LOW_BIT_POS_PROBE_OUT203 = "16'b0000000011101010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT204 = "16'b0000000011101011" *) (* LC_LOW_BIT_POS_PROBE_OUT205 = "16'b0000000011101100" *) (* LC_LOW_BIT_POS_PROBE_OUT206 = "16'b0000000011101101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT207 = "16'b0000000011101110" *) (* LC_LOW_BIT_POS_PROBE_OUT208 = "16'b0000000011101111" *) (* LC_LOW_BIT_POS_PROBE_OUT209 = "16'b0000000011110000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT21 = "16'b0000000000110100" *) (* LC_LOW_BIT_POS_PROBE_OUT210 = "16'b0000000011110001" *) (* LC_LOW_BIT_POS_PROBE_OUT211 = "16'b0000000011110010" *) 
(* LC_LOW_BIT_POS_PROBE_OUT212 = "16'b0000000011110011" *) (* LC_LOW_BIT_POS_PROBE_OUT213 = "16'b0000000011110100" *) (* LC_LOW_BIT_POS_PROBE_OUT214 = "16'b0000000011110101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT215 = "16'b0000000011110110" *) (* LC_LOW_BIT_POS_PROBE_OUT216 = "16'b0000000011110111" *) (* LC_LOW_BIT_POS_PROBE_OUT217 = "16'b0000000011111000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT218 = "16'b0000000011111001" *) (* LC_LOW_BIT_POS_PROBE_OUT219 = "16'b0000000011111010" *) (* LC_LOW_BIT_POS_PROBE_OUT22 = "16'b0000000000110101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT220 = "16'b0000000011111011" *) (* LC_LOW_BIT_POS_PROBE_OUT221 = "16'b0000000011111100" *) (* LC_LOW_BIT_POS_PROBE_OUT222 = "16'b0000000011111101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT223 = "16'b0000000011111110" *) (* LC_LOW_BIT_POS_PROBE_OUT224 = "16'b0000000011111111" *) (* LC_LOW_BIT_POS_PROBE_OUT225 = "16'b0000000100000000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT226 = "16'b0000000100000001" *) (* LC_LOW_BIT_POS_PROBE_OUT227 = "16'b0000000100000010" *) (* LC_LOW_BIT_POS_PROBE_OUT228 = "16'b0000000100000011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT229 = "16'b0000000100000100" *) (* LC_LOW_BIT_POS_PROBE_OUT23 = "16'b0000000000110110" *) (* LC_LOW_BIT_POS_PROBE_OUT230 = "16'b0000000100000101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT231 = "16'b0000000100000110" *) (* LC_LOW_BIT_POS_PROBE_OUT232 = "16'b0000000100000111" *) (* LC_LOW_BIT_POS_PROBE_OUT233 = "16'b0000000100001000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT234 = "16'b0000000100001001" *) (* LC_LOW_BIT_POS_PROBE_OUT235 = "16'b0000000100001010" *) (* LC_LOW_BIT_POS_PROBE_OUT236 = "16'b0000000100001011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT237 = "16'b0000000100001100" *) (* LC_LOW_BIT_POS_PROBE_OUT238 = "16'b0000000100001101" *) (* LC_LOW_BIT_POS_PROBE_OUT239 = "16'b0000000100001110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT24 = "16'b0000000000110111" *) (* LC_LOW_BIT_POS_PROBE_OUT240 = "16'b0000000100001111" *) (* LC_LOW_BIT_POS_PROBE_OUT241 = "16'b0000000100010000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT242 = "16'b0000000100010001" *) (* LC_LOW_BIT_POS_PROBE_OUT243 = "16'b0000000100010010" *) (* LC_LOW_BIT_POS_PROBE_OUT244 = "16'b0000000100010011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT245 = "16'b0000000100010100" *) (* LC_LOW_BIT_POS_PROBE_OUT246 = "16'b0000000100010101" *) (* LC_LOW_BIT_POS_PROBE_OUT247 = "16'b0000000100010110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT248 = "16'b0000000100010111" *) (* LC_LOW_BIT_POS_PROBE_OUT249 = "16'b0000000100011000" *) (* LC_LOW_BIT_POS_PROBE_OUT25 = "16'b0000000000111000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT250 = "16'b0000000100011001" *) (* LC_LOW_BIT_POS_PROBE_OUT251 = "16'b0000000100011010" *) (* LC_LOW_BIT_POS_PROBE_OUT252 = "16'b0000000100011011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT253 = "16'b0000000100011100" *) (* LC_LOW_BIT_POS_PROBE_OUT254 = "16'b0000000100011101" *) (* LC_LOW_BIT_POS_PROBE_OUT255 = "16'b0000000100011110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT26 = "16'b0000000000111001" *) (* LC_LOW_BIT_POS_PROBE_OUT27 = "16'b0000000000111010" *) (* LC_LOW_BIT_POS_PROBE_OUT28 = "16'b0000000000111011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT29 = "16'b0000000000111100" *) (* LC_LOW_BIT_POS_PROBE_OUT3 = "16'b0000000000100010" *) (* LC_LOW_BIT_POS_PROBE_OUT30 = "16'b0000000000111101" *) 
(* LC_LOW_BIT_POS_PROBE_OUT31 = "16'b0000000000111110" *) (* LC_LOW_BIT_POS_PROBE_OUT32 = "16'b0000000000111111" *) (* LC_LOW_BIT_POS_PROBE_OUT33 = "16'b0000000001000000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT34 = "16'b0000000001000001" *) (* LC_LOW_BIT_POS_PROBE_OUT35 = "16'b0000000001000010" *) (* LC_LOW_BIT_POS_PROBE_OUT36 = "16'b0000000001000011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT37 = "16'b0000000001000100" *) (* LC_LOW_BIT_POS_PROBE_OUT38 = "16'b0000000001000101" *) (* LC_LOW_BIT_POS_PROBE_OUT39 = "16'b0000000001000110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT4 = "16'b0000000000100011" *) (* LC_LOW_BIT_POS_PROBE_OUT40 = "16'b0000000001000111" *) (* LC_LOW_BIT_POS_PROBE_OUT41 = "16'b0000000001001000" *) 
(* LC_LOW_BIT_POS_PROBE_OUT42 = "16'b0000000001001001" *) (* LC_LOW_BIT_POS_PROBE_OUT43 = "16'b0000000001001010" *) (* LC_LOW_BIT_POS_PROBE_OUT44 = "16'b0000000001001011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT45 = "16'b0000000001001100" *) (* LC_LOW_BIT_POS_PROBE_OUT46 = "16'b0000000001001101" *) (* LC_LOW_BIT_POS_PROBE_OUT47 = "16'b0000000001001110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT48 = "16'b0000000001001111" *) (* LC_LOW_BIT_POS_PROBE_OUT49 = "16'b0000000001010000" *) (* LC_LOW_BIT_POS_PROBE_OUT5 = "16'b0000000000100100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT50 = "16'b0000000001010001" *) (* LC_LOW_BIT_POS_PROBE_OUT51 = "16'b0000000001010010" *) (* LC_LOW_BIT_POS_PROBE_OUT52 = "16'b0000000001010011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT53 = "16'b0000000001010100" *) (* LC_LOW_BIT_POS_PROBE_OUT54 = "16'b0000000001010101" *) (* LC_LOW_BIT_POS_PROBE_OUT55 = "16'b0000000001010110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT56 = "16'b0000000001010111" *) (* LC_LOW_BIT_POS_PROBE_OUT57 = "16'b0000000001011000" *) (* LC_LOW_BIT_POS_PROBE_OUT58 = "16'b0000000001011001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT59 = "16'b0000000001011010" *) (* LC_LOW_BIT_POS_PROBE_OUT6 = "16'b0000000000100101" *) (* LC_LOW_BIT_POS_PROBE_OUT60 = "16'b0000000001011011" *) 
(* LC_LOW_BIT_POS_PROBE_OUT61 = "16'b0000000001011100" *) (* LC_LOW_BIT_POS_PROBE_OUT62 = "16'b0000000001011101" *) (* LC_LOW_BIT_POS_PROBE_OUT63 = "16'b0000000001011110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT64 = "16'b0000000001011111" *) (* LC_LOW_BIT_POS_PROBE_OUT65 = "16'b0000000001100000" *) (* LC_LOW_BIT_POS_PROBE_OUT66 = "16'b0000000001100001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT67 = "16'b0000000001100010" *) (* LC_LOW_BIT_POS_PROBE_OUT68 = "16'b0000000001100011" *) (* LC_LOW_BIT_POS_PROBE_OUT69 = "16'b0000000001100100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT7 = "16'b0000000000100110" *) (* LC_LOW_BIT_POS_PROBE_OUT70 = "16'b0000000001100101" *) (* LC_LOW_BIT_POS_PROBE_OUT71 = "16'b0000000001100110" *) 
(* LC_LOW_BIT_POS_PROBE_OUT72 = "16'b0000000001100111" *) (* LC_LOW_BIT_POS_PROBE_OUT73 = "16'b0000000001101000" *) (* LC_LOW_BIT_POS_PROBE_OUT74 = "16'b0000000001101001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT75 = "16'b0000000001101010" *) (* LC_LOW_BIT_POS_PROBE_OUT76 = "16'b0000000001101011" *) (* LC_LOW_BIT_POS_PROBE_OUT77 = "16'b0000000001101100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT78 = "16'b0000000001101101" *) (* LC_LOW_BIT_POS_PROBE_OUT79 = "16'b0000000001101110" *) (* LC_LOW_BIT_POS_PROBE_OUT8 = "16'b0000000000100111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT80 = "16'b0000000001101111" *) (* LC_LOW_BIT_POS_PROBE_OUT81 = "16'b0000000001110000" *) (* LC_LOW_BIT_POS_PROBE_OUT82 = "16'b0000000001110001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT83 = "16'b0000000001110010" *) (* LC_LOW_BIT_POS_PROBE_OUT84 = "16'b0000000001110011" *) (* LC_LOW_BIT_POS_PROBE_OUT85 = "16'b0000000001110100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT86 = "16'b0000000001110101" *) (* LC_LOW_BIT_POS_PROBE_OUT87 = "16'b0000000001110110" *) (* LC_LOW_BIT_POS_PROBE_OUT88 = "16'b0000000001110111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT89 = "16'b0000000001111000" *) (* LC_LOW_BIT_POS_PROBE_OUT9 = "16'b0000000000101000" *) (* LC_LOW_BIT_POS_PROBE_OUT90 = "16'b0000000001111001" *) 
(* LC_LOW_BIT_POS_PROBE_OUT91 = "16'b0000000001111010" *) (* LC_LOW_BIT_POS_PROBE_OUT92 = "16'b0000000001111011" *) (* LC_LOW_BIT_POS_PROBE_OUT93 = "16'b0000000001111100" *) 
(* LC_LOW_BIT_POS_PROBE_OUT94 = "16'b0000000001111101" *) (* LC_LOW_BIT_POS_PROBE_OUT95 = "16'b0000000001111110" *) (* LC_LOW_BIT_POS_PROBE_OUT96 = "16'b0000000001111111" *) 
(* LC_LOW_BIT_POS_PROBE_OUT97 = "16'b0000000010000000" *) (* LC_LOW_BIT_POS_PROBE_OUT98 = "16'b0000000010000001" *) (* LC_LOW_BIT_POS_PROBE_OUT99 = "16'b0000000010000010" *) 
(* LC_PROBE_IN_WIDTH_STRING = "2048'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111" *) (* LC_PROBE_OUT_HIGH_BIT_POS_STRING = "4096'bb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
(* LC_PROBE_OUT_LOW_BIT_POS_STRING = "4096'bb
(* LC_TOTAL_PROBE_OUT_WIDTH = "32" *) (* ORIG_REF_NAME = "vio_v3_0_19_vio" *) (* dont_touch = "true" *) 
module top_aurora_0_0_vio_v3_0_19_vio
   (clk,
    probe_in0,
    probe_in1,
    probe_in2,
    probe_in3,
    probe_in4,
    probe_in5,
    probe_in6,
    probe_in7,
    probe_in8,
    probe_in9,
    probe_in10,
    probe_in11,
    probe_in12,
    probe_in13,
    probe_in14,
    probe_in15,
    probe_in16,
    probe_in17,
    probe_in18,
    probe_in19,
    probe_in20,
    probe_in21,
    probe_in22,
    probe_in23,
    probe_in24,
    probe_in25,
    probe_in26,
    probe_in27,
    probe_in28,
    probe_in29,
    probe_in30,
    probe_in31,
    probe_in32,
    probe_in33,
    probe_in34,
    probe_in35,
    probe_in36,
    probe_in37,
    probe_in38,
    probe_in39,
    probe_in40,
    probe_in41,
    probe_in42,
    probe_in43,
    probe_in44,
    probe_in45,
    probe_in46,
    probe_in47,
    probe_in48,
    probe_in49,
    probe_in50,
    probe_in51,
    probe_in52,
    probe_in53,
    probe_in54,
    probe_in55,
    probe_in56,
    probe_in57,
    probe_in58,
    probe_in59,
    probe_in60,
    probe_in61,
    probe_in62,
    probe_in63,
    probe_in64,
    probe_in65,
    probe_in66,
    probe_in67,
    probe_in68,
    probe_in69,
    probe_in70,
    probe_in71,
    probe_in72,
    probe_in73,
    probe_in74,
    probe_in75,
    probe_in76,
    probe_in77,
    probe_in78,
    probe_in79,
    probe_in80,
    probe_in81,
    probe_in82,
    probe_in83,
    probe_in84,
    probe_in85,
    probe_in86,
    probe_in87,
    probe_in88,
    probe_in89,
    probe_in90,
    probe_in91,
    probe_in92,
    probe_in93,
    probe_in94,
    probe_in95,
    probe_in96,
    probe_in97,
    probe_in98,
    probe_in99,
    probe_in100,
    probe_in101,
    probe_in102,
    probe_in103,
    probe_in104,
    probe_in105,
    probe_in106,
    probe_in107,
    probe_in108,
    probe_in109,
    probe_in110,
    probe_in111,
    probe_in112,
    probe_in113,
    probe_in114,
    probe_in115,
    probe_in116,
    probe_in117,
    probe_in118,
    probe_in119,
    probe_in120,
    probe_in121,
    probe_in122,
    probe_in123,
    probe_in124,
    probe_in125,
    probe_in126,
    probe_in127,
    probe_in128,
    probe_in129,
    probe_in130,
    probe_in131,
    probe_in132,
    probe_in133,
    probe_in134,
    probe_in135,
    probe_in136,
    probe_in137,
    probe_in138,
    probe_in139,
    probe_in140,
    probe_in141,
    probe_in142,
    probe_in143,
    probe_in144,
    probe_in145,
    probe_in146,
    probe_in147,
    probe_in148,
    probe_in149,
    probe_in150,
    probe_in151,
    probe_in152,
    probe_in153,
    probe_in154,
    probe_in155,
    probe_in156,
    probe_in157,
    probe_in158,
    probe_in159,
    probe_in160,
    probe_in161,
    probe_in162,
    probe_in163,
    probe_in164,
    probe_in165,
    probe_in166,
    probe_in167,
    probe_in168,
    probe_in169,
    probe_in170,
    probe_in171,
    probe_in172,
    probe_in173,
    probe_in174,
    probe_in175,
    probe_in176,
    probe_in177,
    probe_in178,
    probe_in179,
    probe_in180,
    probe_in181,
    probe_in182,
    probe_in183,
    probe_in184,
    probe_in185,
    probe_in186,
    probe_in187,
    probe_in188,
    probe_in189,
    probe_in190,
    probe_in191,
    probe_in192,
    probe_in193,
    probe_in194,
    probe_in195,
    probe_in196,
    probe_in197,
    probe_in198,
    probe_in199,
    probe_in200,
    probe_in201,
    probe_in202,
    probe_in203,
    probe_in204,
    probe_in205,
    probe_in206,
    probe_in207,
    probe_in208,
    probe_in209,
    probe_in210,
    probe_in211,
    probe_in212,
    probe_in213,
    probe_in214,
    probe_in215,
    probe_in216,
    probe_in217,
    probe_in218,
    probe_in219,
    probe_in220,
    probe_in221,
    probe_in222,
    probe_in223,
    probe_in224,
    probe_in225,
    probe_in226,
    probe_in227,
    probe_in228,
    probe_in229,
    probe_in230,
    probe_in231,
    probe_in232,
    probe_in233,
    probe_in234,
    probe_in235,
    probe_in236,
    probe_in237,
    probe_in238,
    probe_in239,
    probe_in240,
    probe_in241,
    probe_in242,
    probe_in243,
    probe_in244,
    probe_in245,
    probe_in246,
    probe_in247,
    probe_in248,
    probe_in249,
    probe_in250,
    probe_in251,
    probe_in252,
    probe_in253,
    probe_in254,
    probe_in255,
    sl_iport0,
    sl_oport0,
    probe_out0,
    probe_out1,
    probe_out2,
    probe_out3,
    probe_out4,
    probe_out5,
    probe_out6,
    probe_out7,
    probe_out8,
    probe_out9,
    probe_out10,
    probe_out11,
    probe_out12,
    probe_out13,
    probe_out14,
    probe_out15,
    probe_out16,
    probe_out17,
    probe_out18,
    probe_out19,
    probe_out20,
    probe_out21,
    probe_out22,
    probe_out23,
    probe_out24,
    probe_out25,
    probe_out26,
    probe_out27,
    probe_out28,
    probe_out29,
    probe_out30,
    probe_out31,
    probe_out32,
    probe_out33,
    probe_out34,
    probe_out35,
    probe_out36,
    probe_out37,
    probe_out38,
    probe_out39,
    probe_out40,
    probe_out41,
    probe_out42,
    probe_out43,
    probe_out44,
    probe_out45,
    probe_out46,
    probe_out47,
    probe_out48,
    probe_out49,
    probe_out50,
    probe_out51,
    probe_out52,
    probe_out53,
    probe_out54,
    probe_out55,
    probe_out56,
    probe_out57,
    probe_out58,
    probe_out59,
    probe_out60,
    probe_out61,
    probe_out62,
    probe_out63,
    probe_out64,
    probe_out65,
    probe_out66,
    probe_out67,
    probe_out68,
    probe_out69,
    probe_out70,
    probe_out71,
    probe_out72,
    probe_out73,
    probe_out74,
    probe_out75,
    probe_out76,
    probe_out77,
    probe_out78,
    probe_out79,
    probe_out80,
    probe_out81,
    probe_out82,
    probe_out83,
    probe_out84,
    probe_out85,
    probe_out86,
    probe_out87,
    probe_out88,
    probe_out89,
    probe_out90,
    probe_out91,
    probe_out92,
    probe_out93,
    probe_out94,
    probe_out95,
    probe_out96,
    probe_out97,
    probe_out98,
    probe_out99,
    probe_out100,
    probe_out101,
    probe_out102,
    probe_out103,
    probe_out104,
    probe_out105,
    probe_out106,
    probe_out107,
    probe_out108,
    probe_out109,
    probe_out110,
    probe_out111,
    probe_out112,
    probe_out113,
    probe_out114,
    probe_out115,
    probe_out116,
    probe_out117,
    probe_out118,
    probe_out119,
    probe_out120,
    probe_out121,
    probe_out122,
    probe_out123,
    probe_out124,
    probe_out125,
    probe_out126,
    probe_out127,
    probe_out128,
    probe_out129,
    probe_out130,
    probe_out131,
    probe_out132,
    probe_out133,
    probe_out134,
    probe_out135,
    probe_out136,
    probe_out137,
    probe_out138,
    probe_out139,
    probe_out140,
    probe_out141,
    probe_out142,
    probe_out143,
    probe_out144,
    probe_out145,
    probe_out146,
    probe_out147,
    probe_out148,
    probe_out149,
    probe_out150,
    probe_out151,
    probe_out152,
    probe_out153,
    probe_out154,
    probe_out155,
    probe_out156,
    probe_out157,
    probe_out158,
    probe_out159,
    probe_out160,
    probe_out161,
    probe_out162,
    probe_out163,
    probe_out164,
    probe_out165,
    probe_out166,
    probe_out167,
    probe_out168,
    probe_out169,
    probe_out170,
    probe_out171,
    probe_out172,
    probe_out173,
    probe_out174,
    probe_out175,
    probe_out176,
    probe_out177,
    probe_out178,
    probe_out179,
    probe_out180,
    probe_out181,
    probe_out182,
    probe_out183,
    probe_out184,
    probe_out185,
    probe_out186,
    probe_out187,
    probe_out188,
    probe_out189,
    probe_out190,
    probe_out191,
    probe_out192,
    probe_out193,
    probe_out194,
    probe_out195,
    probe_out196,
    probe_out197,
    probe_out198,
    probe_out199,
    probe_out200,
    probe_out201,
    probe_out202,
    probe_out203,
    probe_out204,
    probe_out205,
    probe_out206,
    probe_out207,
    probe_out208,
    probe_out209,
    probe_out210,
    probe_out211,
    probe_out212,
    probe_out213,
    probe_out214,
    probe_out215,
    probe_out216,
    probe_out217,
    probe_out218,
    probe_out219,
    probe_out220,
    probe_out221,
    probe_out222,
    probe_out223,
    probe_out224,
    probe_out225,
    probe_out226,
    probe_out227,
    probe_out228,
    probe_out229,
    probe_out230,
    probe_out231,
    probe_out232,
    probe_out233,
    probe_out234,
    probe_out235,
    probe_out236,
    probe_out237,
    probe_out238,
    probe_out239,
    probe_out240,
    probe_out241,
    probe_out242,
    probe_out243,
    probe_out244,
    probe_out245,
    probe_out246,
    probe_out247,
    probe_out248,
    probe_out249,
    probe_out250,
    probe_out251,
    probe_out252,
    probe_out253,
    probe_out254,
    probe_out255);
  input clk;
  input [31:0]probe_in0;
  input [0:0]probe_in1;
  input [0:0]probe_in2;
  input [0:0]probe_in3;
  input [0:0]probe_in4;
  input [0:0]probe_in5;
  input [0:0]probe_in6;
  input [0:0]probe_in7;
  input [0:0]probe_in8;
  input [0:0]probe_in9;
  input [0:0]probe_in10;
  input [0:0]probe_in11;
  input [0:0]probe_in12;
  input [0:0]probe_in13;
  input [0:0]probe_in14;
  input [0:0]probe_in15;
  input [0:0]probe_in16;
  input [0:0]probe_in17;
  input [0:0]probe_in18;
  input [0:0]probe_in19;
  input [0:0]probe_in20;
  input [0:0]probe_in21;
  input [0:0]probe_in22;
  input [0:0]probe_in23;
  input [0:0]probe_in24;
  input [0:0]probe_in25;
  input [0:0]probe_in26;
  input [0:0]probe_in27;
  input [0:0]probe_in28;
  input [0:0]probe_in29;
  input [0:0]probe_in30;
  input [0:0]probe_in31;
  input [0:0]probe_in32;
  input [0:0]probe_in33;
  input [0:0]probe_in34;
  input [0:0]probe_in35;
  input [0:0]probe_in36;
  input [0:0]probe_in37;
  input [0:0]probe_in38;
  input [0:0]probe_in39;
  input [0:0]probe_in40;
  input [0:0]probe_in41;
  input [0:0]probe_in42;
  input [0:0]probe_in43;
  input [0:0]probe_in44;
  input [0:0]probe_in45;
  input [0:0]probe_in46;
  input [0:0]probe_in47;
  input [0:0]probe_in48;
  input [0:0]probe_in49;
  input [0:0]probe_in50;
  input [0:0]probe_in51;
  input [0:0]probe_in52;
  input [0:0]probe_in53;
  input [0:0]probe_in54;
  input [0:0]probe_in55;
  input [0:0]probe_in56;
  input [0:0]probe_in57;
  input [0:0]probe_in58;
  input [0:0]probe_in59;
  input [0:0]probe_in60;
  input [0:0]probe_in61;
  input [0:0]probe_in62;
  input [0:0]probe_in63;
  input [0:0]probe_in64;
  input [0:0]probe_in65;
  input [0:0]probe_in66;
  input [0:0]probe_in67;
  input [0:0]probe_in68;
  input [0:0]probe_in69;
  input [0:0]probe_in70;
  input [0:0]probe_in71;
  input [0:0]probe_in72;
  input [0:0]probe_in73;
  input [0:0]probe_in74;
  input [0:0]probe_in75;
  input [0:0]probe_in76;
  input [0:0]probe_in77;
  input [0:0]probe_in78;
  input [0:0]probe_in79;
  input [0:0]probe_in80;
  input [0:0]probe_in81;
  input [0:0]probe_in82;
  input [0:0]probe_in83;
  input [0:0]probe_in84;
  input [0:0]probe_in85;
  input [0:0]probe_in86;
  input [0:0]probe_in87;
  input [0:0]probe_in88;
  input [0:0]probe_in89;
  input [0:0]probe_in90;
  input [0:0]probe_in91;
  input [0:0]probe_in92;
  input [0:0]probe_in93;
  input [0:0]probe_in94;
  input [0:0]probe_in95;
  input [0:0]probe_in96;
  input [0:0]probe_in97;
  input [0:0]probe_in98;
  input [0:0]probe_in99;
  input [0:0]probe_in100;
  input [0:0]probe_in101;
  input [0:0]probe_in102;
  input [0:0]probe_in103;
  input [0:0]probe_in104;
  input [0:0]probe_in105;
  input [0:0]probe_in106;
  input [0:0]probe_in107;
  input [0:0]probe_in108;
  input [0:0]probe_in109;
  input [0:0]probe_in110;
  input [0:0]probe_in111;
  input [0:0]probe_in112;
  input [0:0]probe_in113;
  input [0:0]probe_in114;
  input [0:0]probe_in115;
  input [0:0]probe_in116;
  input [0:0]probe_in117;
  input [0:0]probe_in118;
  input [0:0]probe_in119;
  input [0:0]probe_in120;
  input [0:0]probe_in121;
  input [0:0]probe_in122;
  input [0:0]probe_in123;
  input [0:0]probe_in124;
  input [0:0]probe_in125;
  input [0:0]probe_in126;
  input [0:0]probe_in127;
  input [0:0]probe_in128;
  input [0:0]probe_in129;
  input [0:0]probe_in130;
  input [0:0]probe_in131;
  input [0:0]probe_in132;
  input [0:0]probe_in133;
  input [0:0]probe_in134;
  input [0:0]probe_in135;
  input [0:0]probe_in136;
  input [0:0]probe_in137;
  input [0:0]probe_in138;
  input [0:0]probe_in139;
  input [0:0]probe_in140;
  input [0:0]probe_in141;
  input [0:0]probe_in142;
  input [0:0]probe_in143;
  input [0:0]probe_in144;
  input [0:0]probe_in145;
  input [0:0]probe_in146;
  input [0:0]probe_in147;
  input [0:0]probe_in148;
  input [0:0]probe_in149;
  input [0:0]probe_in150;
  input [0:0]probe_in151;
  input [0:0]probe_in152;
  input [0:0]probe_in153;
  input [0:0]probe_in154;
  input [0:0]probe_in155;
  input [0:0]probe_in156;
  input [0:0]probe_in157;
  input [0:0]probe_in158;
  input [0:0]probe_in159;
  input [0:0]probe_in160;
  input [0:0]probe_in161;
  input [0:0]probe_in162;
  input [0:0]probe_in163;
  input [0:0]probe_in164;
  input [0:0]probe_in165;
  input [0:0]probe_in166;
  input [0:0]probe_in167;
  input [0:0]probe_in168;
  input [0:0]probe_in169;
  input [0:0]probe_in170;
  input [0:0]probe_in171;
  input [0:0]probe_in172;
  input [0:0]probe_in173;
  input [0:0]probe_in174;
  input [0:0]probe_in175;
  input [0:0]probe_in176;
  input [0:0]probe_in177;
  input [0:0]probe_in178;
  input [0:0]probe_in179;
  input [0:0]probe_in180;
  input [0:0]probe_in181;
  input [0:0]probe_in182;
  input [0:0]probe_in183;
  input [0:0]probe_in184;
  input [0:0]probe_in185;
  input [0:0]probe_in186;
  input [0:0]probe_in187;
  input [0:0]probe_in188;
  input [0:0]probe_in189;
  input [0:0]probe_in190;
  input [0:0]probe_in191;
  input [0:0]probe_in192;
  input [0:0]probe_in193;
  input [0:0]probe_in194;
  input [0:0]probe_in195;
  input [0:0]probe_in196;
  input [0:0]probe_in197;
  input [0:0]probe_in198;
  input [0:0]probe_in199;
  input [0:0]probe_in200;
  input [0:0]probe_in201;
  input [0:0]probe_in202;
  input [0:0]probe_in203;
  input [0:0]probe_in204;
  input [0:0]probe_in205;
  input [0:0]probe_in206;
  input [0:0]probe_in207;
  input [0:0]probe_in208;
  input [0:0]probe_in209;
  input [0:0]probe_in210;
  input [0:0]probe_in211;
  input [0:0]probe_in212;
  input [0:0]probe_in213;
  input [0:0]probe_in214;
  input [0:0]probe_in215;
  input [0:0]probe_in216;
  input [0:0]probe_in217;
  input [0:0]probe_in218;
  input [0:0]probe_in219;
  input [0:0]probe_in220;
  input [0:0]probe_in221;
  input [0:0]probe_in222;
  input [0:0]probe_in223;
  input [0:0]probe_in224;
  input [0:0]probe_in225;
  input [0:0]probe_in226;
  input [0:0]probe_in227;
  input [0:0]probe_in228;
  input [0:0]probe_in229;
  input [0:0]probe_in230;
  input [0:0]probe_in231;
  input [0:0]probe_in232;
  input [0:0]probe_in233;
  input [0:0]probe_in234;
  input [0:0]probe_in235;
  input [0:0]probe_in236;
  input [0:0]probe_in237;
  input [0:0]probe_in238;
  input [0:0]probe_in239;
  input [0:0]probe_in240;
  input [0:0]probe_in241;
  input [0:0]probe_in242;
  input [0:0]probe_in243;
  input [0:0]probe_in244;
  input [0:0]probe_in245;
  input [0:0]probe_in246;
  input [0:0]probe_in247;
  input [0:0]probe_in248;
  input [0:0]probe_in249;
  input [0:0]probe_in250;
  input [0:0]probe_in251;
  input [0:0]probe_in252;
  input [0:0]probe_in253;
  input [0:0]probe_in254;
  input [0:0]probe_in255;
  (* dont_touch = "true" *) input [36:0]sl_iport0;
  (* dont_touch = "true" *) output [16:0]sl_oport0;
  output [31:0]probe_out0;
  output [0:0]probe_out1;
  output [0:0]probe_out2;
  output [0:0]probe_out3;
  output [0:0]probe_out4;
  output [0:0]probe_out5;
  output [0:0]probe_out6;
  output [0:0]probe_out7;
  output [0:0]probe_out8;
  output [0:0]probe_out9;
  output [0:0]probe_out10;
  output [0:0]probe_out11;
  output [0:0]probe_out12;
  output [0:0]probe_out13;
  output [0:0]probe_out14;
  output [0:0]probe_out15;
  output [0:0]probe_out16;
  output [0:0]probe_out17;
  output [0:0]probe_out18;
  output [0:0]probe_out19;
  output [0:0]probe_out20;
  output [0:0]probe_out21;
  output [0:0]probe_out22;
  output [0:0]probe_out23;
  output [0:0]probe_out24;
  output [0:0]probe_out25;
  output [0:0]probe_out26;
  output [0:0]probe_out27;
  output [0:0]probe_out28;
  output [0:0]probe_out29;
  output [0:0]probe_out30;
  output [0:0]probe_out31;
  output [0:0]probe_out32;
  output [0:0]probe_out33;
  output [0:0]probe_out34;
  output [0:0]probe_out35;
  output [0:0]probe_out36;
  output [0:0]probe_out37;
  output [0:0]probe_out38;
  output [0:0]probe_out39;
  output [0:0]probe_out40;
  output [0:0]probe_out41;
  output [0:0]probe_out42;
  output [0:0]probe_out43;
  output [0:0]probe_out44;
  output [0:0]probe_out45;
  output [0:0]probe_out46;
  output [0:0]probe_out47;
  output [0:0]probe_out48;
  output [0:0]probe_out49;
  output [0:0]probe_out50;
  output [0:0]probe_out51;
  output [0:0]probe_out52;
  output [0:0]probe_out53;
  output [0:0]probe_out54;
  output [0:0]probe_out55;
  output [0:0]probe_out56;
  output [0:0]probe_out57;
  output [0:0]probe_out58;
  output [0:0]probe_out59;
  output [0:0]probe_out60;
  output [0:0]probe_out61;
  output [0:0]probe_out62;
  output [0:0]probe_out63;
  output [0:0]probe_out64;
  output [0:0]probe_out65;
  output [0:0]probe_out66;
  output [0:0]probe_out67;
  output [0:0]probe_out68;
  output [0:0]probe_out69;
  output [0:0]probe_out70;
  output [0:0]probe_out71;
  output [0:0]probe_out72;
  output [0:0]probe_out73;
  output [0:0]probe_out74;
  output [0:0]probe_out75;
  output [0:0]probe_out76;
  output [0:0]probe_out77;
  output [0:0]probe_out78;
  output [0:0]probe_out79;
  output [0:0]probe_out80;
  output [0:0]probe_out81;
  output [0:0]probe_out82;
  output [0:0]probe_out83;
  output [0:0]probe_out84;
  output [0:0]probe_out85;
  output [0:0]probe_out86;
  output [0:0]probe_out87;
  output [0:0]probe_out88;
  output [0:0]probe_out89;
  output [0:0]probe_out90;
  output [0:0]probe_out91;
  output [0:0]probe_out92;
  output [0:0]probe_out93;
  output [0:0]probe_out94;
  output [0:0]probe_out95;
  output [0:0]probe_out96;
  output [0:0]probe_out97;
  output [0:0]probe_out98;
  output [0:0]probe_out99;
  output [0:0]probe_out100;
  output [0:0]probe_out101;
  output [0:0]probe_out102;
  output [0:0]probe_out103;
  output [0:0]probe_out104;
  output [0:0]probe_out105;
  output [0:0]probe_out106;
  output [0:0]probe_out107;
  output [0:0]probe_out108;
  output [0:0]probe_out109;
  output [0:0]probe_out110;
  output [0:0]probe_out111;
  output [0:0]probe_out112;
  output [0:0]probe_out113;
  output [0:0]probe_out114;
  output [0:0]probe_out115;
  output [0:0]probe_out116;
  output [0:0]probe_out117;
  output [0:0]probe_out118;
  output [0:0]probe_out119;
  output [0:0]probe_out120;
  output [0:0]probe_out121;
  output [0:0]probe_out122;
  output [0:0]probe_out123;
  output [0:0]probe_out124;
  output [0:0]probe_out125;
  output [0:0]probe_out126;
  output [0:0]probe_out127;
  output [0:0]probe_out128;
  output [0:0]probe_out129;
  output [0:0]probe_out130;
  output [0:0]probe_out131;
  output [0:0]probe_out132;
  output [0:0]probe_out133;
  output [0:0]probe_out134;
  output [0:0]probe_out135;
  output [0:0]probe_out136;
  output [0:0]probe_out137;
  output [0:0]probe_out138;
  output [0:0]probe_out139;
  output [0:0]probe_out140;
  output [0:0]probe_out141;
  output [0:0]probe_out142;
  output [0:0]probe_out143;
  output [0:0]probe_out144;
  output [0:0]probe_out145;
  output [0:0]probe_out146;
  output [0:0]probe_out147;
  output [0:0]probe_out148;
  output [0:0]probe_out149;
  output [0:0]probe_out150;
  output [0:0]probe_out151;
  output [0:0]probe_out152;
  output [0:0]probe_out153;
  output [0:0]probe_out154;
  output [0:0]probe_out155;
  output [0:0]probe_out156;
  output [0:0]probe_out157;
  output [0:0]probe_out158;
  output [0:0]probe_out159;
  output [0:0]probe_out160;
  output [0:0]probe_out161;
  output [0:0]probe_out162;
  output [0:0]probe_out163;
  output [0:0]probe_out164;
  output [0:0]probe_out165;
  output [0:0]probe_out166;
  output [0:0]probe_out167;
  output [0:0]probe_out168;
  output [0:0]probe_out169;
  output [0:0]probe_out170;
  output [0:0]probe_out171;
  output [0:0]probe_out172;
  output [0:0]probe_out173;
  output [0:0]probe_out174;
  output [0:0]probe_out175;
  output [0:0]probe_out176;
  output [0:0]probe_out177;
  output [0:0]probe_out178;
  output [0:0]probe_out179;
  output [0:0]probe_out180;
  output [0:0]probe_out181;
  output [0:0]probe_out182;
  output [0:0]probe_out183;
  output [0:0]probe_out184;
  output [0:0]probe_out185;
  output [0:0]probe_out186;
  output [0:0]probe_out187;
  output [0:0]probe_out188;
  output [0:0]probe_out189;
  output [0:0]probe_out190;
  output [0:0]probe_out191;
  output [0:0]probe_out192;
  output [0:0]probe_out193;
  output [0:0]probe_out194;
  output [0:0]probe_out195;
  output [0:0]probe_out196;
  output [0:0]probe_out197;
  output [0:0]probe_out198;
  output [0:0]probe_out199;
  output [0:0]probe_out200;
  output [0:0]probe_out201;
  output [0:0]probe_out202;
  output [0:0]probe_out203;
  output [0:0]probe_out204;
  output [0:0]probe_out205;
  output [0:0]probe_out206;
  output [0:0]probe_out207;
  output [0:0]probe_out208;
  output [0:0]probe_out209;
  output [0:0]probe_out210;
  output [0:0]probe_out211;
  output [0:0]probe_out212;
  output [0:0]probe_out213;
  output [0:0]probe_out214;
  output [0:0]probe_out215;
  output [0:0]probe_out216;
  output [0:0]probe_out217;
  output [0:0]probe_out218;
  output [0:0]probe_out219;
  output [0:0]probe_out220;
  output [0:0]probe_out221;
  output [0:0]probe_out222;
  output [0:0]probe_out223;
  output [0:0]probe_out224;
  output [0:0]probe_out225;
  output [0:0]probe_out226;
  output [0:0]probe_out227;
  output [0:0]probe_out228;
  output [0:0]probe_out229;
  output [0:0]probe_out230;
  output [0:0]probe_out231;
  output [0:0]probe_out232;
  output [0:0]probe_out233;
  output [0:0]probe_out234;
  output [0:0]probe_out235;
  output [0:0]probe_out236;
  output [0:0]probe_out237;
  output [0:0]probe_out238;
  output [0:0]probe_out239;
  output [0:0]probe_out240;
  output [0:0]probe_out241;
  output [0:0]probe_out242;
  output [0:0]probe_out243;
  output [0:0]probe_out244;
  output [0:0]probe_out245;
  output [0:0]probe_out246;
  output [0:0]probe_out247;
  output [0:0]probe_out248;
  output [0:0]probe_out249;
  output [0:0]probe_out250;
  output [0:0]probe_out251;
  output [0:0]probe_out252;
  output [0:0]probe_out253;
  output [0:0]probe_out254;
  output [0:0]probe_out255;

  wire \<const0> ;
  wire [15:0]Bus_Data_out;
  wire DECODER_INST_n_4;
  wire DECODER_INST_n_6;
  wire DECODER_INST_n_7;
  wire DECODER_INST_n_8;
  wire DECODER_INST_n_9;
  wire PROBE_OUT_ALL_INST_n_32;
  wire PROBE_OUT_ALL_INST_n_33;
  wire PROBE_OUT_ALL_INST_n_34;
  wire PROBE_OUT_ALL_INST_n_35;
  wire PROBE_OUT_ALL_INST_n_36;
  wire PROBE_OUT_ALL_INST_n_37;
  wire PROBE_OUT_ALL_INST_n_38;
  wire PROBE_OUT_ALL_INST_n_39;
  wire PROBE_OUT_ALL_INST_n_40;
  wire PROBE_OUT_ALL_INST_n_41;
  wire PROBE_OUT_ALL_INST_n_42;
  wire PROBE_OUT_ALL_INST_n_43;
  wire PROBE_OUT_ALL_INST_n_44;
  wire PROBE_OUT_ALL_INST_n_45;
  wire PROBE_OUT_ALL_INST_n_46;
  wire PROBE_OUT_ALL_INST_n_47;
  wire [16:0]bus_addr;
  (* DONT_TOUCH *) wire bus_clk;
  wire \bus_data_int_reg_n_0_[0] ;
  wire \bus_data_int_reg_n_0_[10] ;
  wire \bus_data_int_reg_n_0_[11] ;
  wire \bus_data_int_reg_n_0_[12] ;
  wire \bus_data_int_reg_n_0_[13] ;
  wire \bus_data_int_reg_n_0_[14] ;
  wire \bus_data_int_reg_n_0_[15] ;
  wire \bus_data_int_reg_n_0_[2] ;
  wire \bus_data_int_reg_n_0_[3] ;
  wire \bus_data_int_reg_n_0_[4] ;
  wire \bus_data_int_reg_n_0_[5] ;
  wire \bus_data_int_reg_n_0_[6] ;
  wire \bus_data_int_reg_n_0_[7] ;
  wire \bus_data_int_reg_n_0_[8] ;
  wire \bus_data_int_reg_n_0_[9] ;
  wire bus_den;
  wire [15:0]bus_di;
  wire [15:0]bus_do;
  wire bus_drdy;
  wire bus_dwe;
  wire bus_rst;
  wire clear;
  wire clk;
  wire committ;
  wire internal_cnt_rst;
  wire p_0_in;
  wire [31:0]probe_in0;
  wire [31:0]probe_out0;
  (* DONT_TOUCH *) wire [36:0]sl_iport0;
  (* DONT_TOUCH *) wire [16:0]sl_oport0;
  wire xsdb_rd;
  wire xsdb_wr__0;

  assign probe_out1[0] = \<const0> ;
  assign probe_out10[0] = \<const0> ;
  assign probe_out100[0] = \<const0> ;
  assign probe_out101[0] = \<const0> ;
  assign probe_out102[0] = \<const0> ;
  assign probe_out103[0] = \<const0> ;
  assign probe_out104[0] = \<const0> ;
  assign probe_out105[0] = \<const0> ;
  assign probe_out106[0] = \<const0> ;
  assign probe_out107[0] = \<const0> ;
  assign probe_out108[0] = \<const0> ;
  assign probe_out109[0] = \<const0> ;
  assign probe_out11[0] = \<const0> ;
  assign probe_out110[0] = \<const0> ;
  assign probe_out111[0] = \<const0> ;
  assign probe_out112[0] = \<const0> ;
  assign probe_out113[0] = \<const0> ;
  assign probe_out114[0] = \<const0> ;
  assign probe_out115[0] = \<const0> ;
  assign probe_out116[0] = \<const0> ;
  assign probe_out117[0] = \<const0> ;
  assign probe_out118[0] = \<const0> ;
  assign probe_out119[0] = \<const0> ;
  assign probe_out12[0] = \<const0> ;
  assign probe_out120[0] = \<const0> ;
  assign probe_out121[0] = \<const0> ;
  assign probe_out122[0] = \<const0> ;
  assign probe_out123[0] = \<const0> ;
  assign probe_out124[0] = \<const0> ;
  assign probe_out125[0] = \<const0> ;
  assign probe_out126[0] = \<const0> ;
  assign probe_out127[0] = \<const0> ;
  assign probe_out128[0] = \<const0> ;
  assign probe_out129[0] = \<const0> ;
  assign probe_out13[0] = \<const0> ;
  assign probe_out130[0] = \<const0> ;
  assign probe_out131[0] = \<const0> ;
  assign probe_out132[0] = \<const0> ;
  assign probe_out133[0] = \<const0> ;
  assign probe_out134[0] = \<const0> ;
  assign probe_out135[0] = \<const0> ;
  assign probe_out136[0] = \<const0> ;
  assign probe_out137[0] = \<const0> ;
  assign probe_out138[0] = \<const0> ;
  assign probe_out139[0] = \<const0> ;
  assign probe_out14[0] = \<const0> ;
  assign probe_out140[0] = \<const0> ;
  assign probe_out141[0] = \<const0> ;
  assign probe_out142[0] = \<const0> ;
  assign probe_out143[0] = \<const0> ;
  assign probe_out144[0] = \<const0> ;
  assign probe_out145[0] = \<const0> ;
  assign probe_out146[0] = \<const0> ;
  assign probe_out147[0] = \<const0> ;
  assign probe_out148[0] = \<const0> ;
  assign probe_out149[0] = \<const0> ;
  assign probe_out15[0] = \<const0> ;
  assign probe_out150[0] = \<const0> ;
  assign probe_out151[0] = \<const0> ;
  assign probe_out152[0] = \<const0> ;
  assign probe_out153[0] = \<const0> ;
  assign probe_out154[0] = \<const0> ;
  assign probe_out155[0] = \<const0> ;
  assign probe_out156[0] = \<const0> ;
  assign probe_out157[0] = \<const0> ;
  assign probe_out158[0] = \<const0> ;
  assign probe_out159[0] = \<const0> ;
  assign probe_out16[0] = \<const0> ;
  assign probe_out160[0] = \<const0> ;
  assign probe_out161[0] = \<const0> ;
  assign probe_out162[0] = \<const0> ;
  assign probe_out163[0] = \<const0> ;
  assign probe_out164[0] = \<const0> ;
  assign probe_out165[0] = \<const0> ;
  assign probe_out166[0] = \<const0> ;
  assign probe_out167[0] = \<const0> ;
  assign probe_out168[0] = \<const0> ;
  assign probe_out169[0] = \<const0> ;
  assign probe_out17[0] = \<const0> ;
  assign probe_out170[0] = \<const0> ;
  assign probe_out171[0] = \<const0> ;
  assign probe_out172[0] = \<const0> ;
  assign probe_out173[0] = \<const0> ;
  assign probe_out174[0] = \<const0> ;
  assign probe_out175[0] = \<const0> ;
  assign probe_out176[0] = \<const0> ;
  assign probe_out177[0] = \<const0> ;
  assign probe_out178[0] = \<const0> ;
  assign probe_out179[0] = \<const0> ;
  assign probe_out18[0] = \<const0> ;
  assign probe_out180[0] = \<const0> ;
  assign probe_out181[0] = \<const0> ;
  assign probe_out182[0] = \<const0> ;
  assign probe_out183[0] = \<const0> ;
  assign probe_out184[0] = \<const0> ;
  assign probe_out185[0] = \<const0> ;
  assign probe_out186[0] = \<const0> ;
  assign probe_out187[0] = \<const0> ;
  assign probe_out188[0] = \<const0> ;
  assign probe_out189[0] = \<const0> ;
  assign probe_out19[0] = \<const0> ;
  assign probe_out190[0] = \<const0> ;
  assign probe_out191[0] = \<const0> ;
  assign probe_out192[0] = \<const0> ;
  assign probe_out193[0] = \<const0> ;
  assign probe_out194[0] = \<const0> ;
  assign probe_out195[0] = \<const0> ;
  assign probe_out196[0] = \<const0> ;
  assign probe_out197[0] = \<const0> ;
  assign probe_out198[0] = \<const0> ;
  assign probe_out199[0] = \<const0> ;
  assign probe_out2[0] = \<const0> ;
  assign probe_out20[0] = \<const0> ;
  assign probe_out200[0] = \<const0> ;
  assign probe_out201[0] = \<const0> ;
  assign probe_out202[0] = \<const0> ;
  assign probe_out203[0] = \<const0> ;
  assign probe_out204[0] = \<const0> ;
  assign probe_out205[0] = \<const0> ;
  assign probe_out206[0] = \<const0> ;
  assign probe_out207[0] = \<const0> ;
  assign probe_out208[0] = \<const0> ;
  assign probe_out209[0] = \<const0> ;
  assign probe_out21[0] = \<const0> ;
  assign probe_out210[0] = \<const0> ;
  assign probe_out211[0] = \<const0> ;
  assign probe_out212[0] = \<const0> ;
  assign probe_out213[0] = \<const0> ;
  assign probe_out214[0] = \<const0> ;
  assign probe_out215[0] = \<const0> ;
  assign probe_out216[0] = \<const0> ;
  assign probe_out217[0] = \<const0> ;
  assign probe_out218[0] = \<const0> ;
  assign probe_out219[0] = \<const0> ;
  assign probe_out22[0] = \<const0> ;
  assign probe_out220[0] = \<const0> ;
  assign probe_out221[0] = \<const0> ;
  assign probe_out222[0] = \<const0> ;
  assign probe_out223[0] = \<const0> ;
  assign probe_out224[0] = \<const0> ;
  assign probe_out225[0] = \<const0> ;
  assign probe_out226[0] = \<const0> ;
  assign probe_out227[0] = \<const0> ;
  assign probe_out228[0] = \<const0> ;
  assign probe_out229[0] = \<const0> ;
  assign probe_out23[0] = \<const0> ;
  assign probe_out230[0] = \<const0> ;
  assign probe_out231[0] = \<const0> ;
  assign probe_out232[0] = \<const0> ;
  assign probe_out233[0] = \<const0> ;
  assign probe_out234[0] = \<const0> ;
  assign probe_out235[0] = \<const0> ;
  assign probe_out236[0] = \<const0> ;
  assign probe_out237[0] = \<const0> ;
  assign probe_out238[0] = \<const0> ;
  assign probe_out239[0] = \<const0> ;
  assign probe_out24[0] = \<const0> ;
  assign probe_out240[0] = \<const0> ;
  assign probe_out241[0] = \<const0> ;
  assign probe_out242[0] = \<const0> ;
  assign probe_out243[0] = \<const0> ;
  assign probe_out244[0] = \<const0> ;
  assign probe_out245[0] = \<const0> ;
  assign probe_out246[0] = \<const0> ;
  assign probe_out247[0] = \<const0> ;
  assign probe_out248[0] = \<const0> ;
  assign probe_out249[0] = \<const0> ;
  assign probe_out25[0] = \<const0> ;
  assign probe_out250[0] = \<const0> ;
  assign probe_out251[0] = \<const0> ;
  assign probe_out252[0] = \<const0> ;
  assign probe_out253[0] = \<const0> ;
  assign probe_out254[0] = \<const0> ;
  assign probe_out255[0] = \<const0> ;
  assign probe_out26[0] = \<const0> ;
  assign probe_out27[0] = \<const0> ;
  assign probe_out28[0] = \<const0> ;
  assign probe_out29[0] = \<const0> ;
  assign probe_out3[0] = \<const0> ;
  assign probe_out30[0] = \<const0> ;
  assign probe_out31[0] = \<const0> ;
  assign probe_out32[0] = \<const0> ;
  assign probe_out33[0] = \<const0> ;
  assign probe_out34[0] = \<const0> ;
  assign probe_out35[0] = \<const0> ;
  assign probe_out36[0] = \<const0> ;
  assign probe_out37[0] = \<const0> ;
  assign probe_out38[0] = \<const0> ;
  assign probe_out39[0] = \<const0> ;
  assign probe_out4[0] = \<const0> ;
  assign probe_out40[0] = \<const0> ;
  assign probe_out41[0] = \<const0> ;
  assign probe_out42[0] = \<const0> ;
  assign probe_out43[0] = \<const0> ;
  assign probe_out44[0] = \<const0> ;
  assign probe_out45[0] = \<const0> ;
  assign probe_out46[0] = \<const0> ;
  assign probe_out47[0] = \<const0> ;
  assign probe_out48[0] = \<const0> ;
  assign probe_out49[0] = \<const0> ;
  assign probe_out5[0] = \<const0> ;
  assign probe_out50[0] = \<const0> ;
  assign probe_out51[0] = \<const0> ;
  assign probe_out52[0] = \<const0> ;
  assign probe_out53[0] = \<const0> ;
  assign probe_out54[0] = \<const0> ;
  assign probe_out55[0] = \<const0> ;
  assign probe_out56[0] = \<const0> ;
  assign probe_out57[0] = \<const0> ;
  assign probe_out58[0] = \<const0> ;
  assign probe_out59[0] = \<const0> ;
  assign probe_out6[0] = \<const0> ;
  assign probe_out60[0] = \<const0> ;
  assign probe_out61[0] = \<const0> ;
  assign probe_out62[0] = \<const0> ;
  assign probe_out63[0] = \<const0> ;
  assign probe_out64[0] = \<const0> ;
  assign probe_out65[0] = \<const0> ;
  assign probe_out66[0] = \<const0> ;
  assign probe_out67[0] = \<const0> ;
  assign probe_out68[0] = \<const0> ;
  assign probe_out69[0] = \<const0> ;
  assign probe_out7[0] = \<const0> ;
  assign probe_out70[0] = \<const0> ;
  assign probe_out71[0] = \<const0> ;
  assign probe_out72[0] = \<const0> ;
  assign probe_out73[0] = \<const0> ;
  assign probe_out74[0] = \<const0> ;
  assign probe_out75[0] = \<const0> ;
  assign probe_out76[0] = \<const0> ;
  assign probe_out77[0] = \<const0> ;
  assign probe_out78[0] = \<const0> ;
  assign probe_out79[0] = \<const0> ;
  assign probe_out8[0] = \<const0> ;
  assign probe_out80[0] = \<const0> ;
  assign probe_out81[0] = \<const0> ;
  assign probe_out82[0] = \<const0> ;
  assign probe_out83[0] = \<const0> ;
  assign probe_out84[0] = \<const0> ;
  assign probe_out85[0] = \<const0> ;
  assign probe_out86[0] = \<const0> ;
  assign probe_out87[0] = \<const0> ;
  assign probe_out88[0] = \<const0> ;
  assign probe_out89[0] = \<const0> ;
  assign probe_out9[0] = \<const0> ;
  assign probe_out90[0] = \<const0> ;
  assign probe_out91[0] = \<const0> ;
  assign probe_out92[0] = \<const0> ;
  assign probe_out93[0] = \<const0> ;
  assign probe_out94[0] = \<const0> ;
  assign probe_out95[0] = \<const0> ;
  assign probe_out96[0] = \<const0> ;
  assign probe_out97[0] = \<const0> ;
  assign probe_out98[0] = \<const0> ;
  assign probe_out99[0] = \<const0> ;
  top_aurora_0_0_vio_v3_0_19_decoder DECODER_INST
       (.\Bus_data_out_reg[15]_0 (bus_do),
        .\Bus_data_out_reg[15]_1 (Bus_Data_out),
        .\Bus_data_out_reg[15]_2 ({PROBE_OUT_ALL_INST_n_32,PROBE_OUT_ALL_INST_n_33,PROBE_OUT_ALL_INST_n_34,PROBE_OUT_ALL_INST_n_35,PROBE_OUT_ALL_INST_n_36,PROBE_OUT_ALL_INST_n_37,PROBE_OUT_ALL_INST_n_38,PROBE_OUT_ALL_INST_n_39,PROBE_OUT_ALL_INST_n_40,PROBE_OUT_ALL_INST_n_41,PROBE_OUT_ALL_INST_n_42,PROBE_OUT_ALL_INST_n_43,PROBE_OUT_ALL_INST_n_44,PROBE_OUT_ALL_INST_n_45,PROBE_OUT_ALL_INST_n_46,PROBE_OUT_ALL_INST_n_47}),
        .CLK(bus_clk),
        .E(DECODER_INST_n_9),
        .Q({\bus_data_int_reg_n_0_[15] ,\bus_data_int_reg_n_0_[14] ,\bus_data_int_reg_n_0_[13] ,\bus_data_int_reg_n_0_[12] ,\bus_data_int_reg_n_0_[11] ,\bus_data_int_reg_n_0_[10] ,\bus_data_int_reg_n_0_[9] ,\bus_data_int_reg_n_0_[8] ,\bus_data_int_reg_n_0_[7] ,\bus_data_int_reg_n_0_[6] ,\bus_data_int_reg_n_0_[5] ,\bus_data_int_reg_n_0_[4] ,\bus_data_int_reg_n_0_[3] ,\bus_data_int_reg_n_0_[2] ,p_0_in,\bus_data_int_reg_n_0_[0] }),
        .Read_int_i_7_0(DECODER_INST_n_7),
        .Read_int_i_7_1(DECODER_INST_n_8),
        .SR(clear),
        .in0(committ),
        .internal_cnt_rst(internal_cnt_rst),
        .s_daddr_o(bus_addr),
        .s_den_o(bus_den),
        .s_drdy_i(bus_drdy),
        .s_dwe_o(bus_dwe),
        .s_rst_o(bus_rst),
        .\wr_en[2]_i_2_0 (DECODER_INST_n_4),
        .\wr_en[2]_i_4_0 (DECODER_INST_n_6),
        .xsdb_rd(xsdb_rd),
        .xsdb_wr__0(xsdb_wr__0));
  GND GND
       (.G(\<const0> ));
  top_aurora_0_0_vio_v3_0_19_probe_in_one PROBE_IN_INST
       (.CLK(bus_clk),
        .E(DECODER_INST_n_9),
        .Q(Bus_Data_out),
        .Read_int_reg_0(DECODER_INST_n_8),
        .clk(clk),
        .internal_cnt_rst(internal_cnt_rst),
        .probe_in0(probe_in0),
        .s_daddr_o(bus_addr),
        .s_den_o(bus_den),
        .s_dwe_o(bus_dwe),
        .s_rst_o(bus_rst),
        .xsdb_rd(xsdb_rd));
  top_aurora_0_0_vio_v3_0_19_probe_out_all PROBE_OUT_ALL_INST
       (.CLK(bus_clk),
        .\G_PROBE_OUT[0].wr_probe_out_reg[0]_0 (DECODER_INST_n_4),
        .\G_PROBE_OUT[0].wr_probe_out_reg[0]_1 (DECODER_INST_n_7),
        .\G_PROBE_OUT[0].wr_probe_out_reg[0]_2 (DECODER_INST_n_6),
        .\Probe_out_reg_int_reg[15]_0 ({PROBE_OUT_ALL_INST_n_32,PROBE_OUT_ALL_INST_n_33,PROBE_OUT_ALL_INST_n_34,PROBE_OUT_ALL_INST_n_35,PROBE_OUT_ALL_INST_n_36,PROBE_OUT_ALL_INST_n_37,PROBE_OUT_ALL_INST_n_38,PROBE_OUT_ALL_INST_n_39,PROBE_OUT_ALL_INST_n_40,PROBE_OUT_ALL_INST_n_41,PROBE_OUT_ALL_INST_n_42,PROBE_OUT_ALL_INST_n_43,PROBE_OUT_ALL_INST_n_44,PROBE_OUT_ALL_INST_n_45,PROBE_OUT_ALL_INST_n_46,PROBE_OUT_ALL_INST_n_47}),
        .Q({\bus_data_int_reg_n_0_[15] ,\bus_data_int_reg_n_0_[14] ,\bus_data_int_reg_n_0_[13] ,\bus_data_int_reg_n_0_[12] ,\bus_data_int_reg_n_0_[11] ,\bus_data_int_reg_n_0_[10] ,\bus_data_int_reg_n_0_[9] ,\bus_data_int_reg_n_0_[8] ,\bus_data_int_reg_n_0_[7] ,\bus_data_int_reg_n_0_[6] ,\bus_data_int_reg_n_0_[5] ,\bus_data_int_reg_n_0_[4] ,\bus_data_int_reg_n_0_[3] ,\bus_data_int_reg_n_0_[2] ,p_0_in,\bus_data_int_reg_n_0_[0] }),
        .SR(clear),
        .clk(clk),
        .in0(committ),
        .internal_cnt_rst(internal_cnt_rst),
        .probe_out0(probe_out0),
        .s_daddr_o({bus_addr[15:8],bus_addr[3:1]}),
        .s_den_o(bus_den),
        .s_dwe_o(bus_dwe),
        .xsdb_wr__0(xsdb_wr__0));
  (* C_BUILD_REVISION = "0" *) 
  (* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_CORE_MAJOR_VER = "2" *) 
  (* C_CORE_MINOR_VER = "0" *) 
  (* C_CORE_TYPE = "2" *) 
  (* C_CSE_DRV_VER = "1" *) 
  (* C_MAJOR_VERSION = "2013" *) 
  (* C_MINOR_VERSION = "1" *) 
  (* C_NEXT_SLAVE = "0" *) 
  (* C_PIPE_IFACE = "0" *) 
  (* C_USE_TEST_REG = "1" *) 
  (* C_XDEVICEFAMILY = "virtex7" *) 
  (* C_XSDB_SLAVE_TYPE = "33" *) 
  (* DONT_TOUCH *) 
  top_aurora_0_0_xsdbs_v1_0_2_xsdbs U_XSDB_SLAVE
       (.s_daddr_o(bus_addr),
        .s_dclk_o(bus_clk),
        .s_den_o(bus_den),
        .s_di_o(bus_di),
        .s_do_i(bus_do),
        .s_drdy_i(bus_drdy),
        .s_dwe_o(bus_dwe),
        .s_rst_o(bus_rst),
        .sl_iport_i(sl_iport0),
        .sl_oport_o(sl_oport0));
  FDRE \bus_data_int_reg[0] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[0]),
        .Q(\bus_data_int_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[10] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[10]),
        .Q(\bus_data_int_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[11] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[11]),
        .Q(\bus_data_int_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[12] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[12]),
        .Q(\bus_data_int_reg_n_0_[12] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[13] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[13]),
        .Q(\bus_data_int_reg_n_0_[13] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[14] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[14]),
        .Q(\bus_data_int_reg_n_0_[14] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[15] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[15]),
        .Q(\bus_data_int_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[1] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[1]),
        .Q(p_0_in),
        .R(1'b0));
  FDRE \bus_data_int_reg[2] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[2]),
        .Q(\bus_data_int_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[3] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[3]),
        .Q(\bus_data_int_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[4] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[4]),
        .Q(\bus_data_int_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[5] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[5]),
        .Q(\bus_data_int_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[6] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[6]),
        .Q(\bus_data_int_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[7] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[7]),
        .Q(\bus_data_int_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[8] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[8]),
        .Q(\bus_data_int_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \bus_data_int_reg[9] 
       (.C(bus_clk),
        .CE(1'b1),
        .D(bus_di[9]),
        .Q(\bus_data_int_reg_n_0_[9] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module top_aurora_0_0_wr_bin_cntr
   (Q,
    \gcc0.gc1.gsym.count_d1_reg[9]_0 ,
    \gcc0.gc1.gsym.count_d2_reg[9]_0 ,
    \gcc0.gc1.gsym.count_reg[0]_0 ,
    E,
    s_aclk);
  output [9:0]Q;
  output [9:0]\gcc0.gc1.gsym.count_d1_reg[9]_0 ;
  output [9:0]\gcc0.gc1.gsym.count_d2_reg[9]_0 ;
  input \gcc0.gc1.gsym.count_reg[0]_0 ;
  input [0:0]E;
  input s_aclk;

  wire [0:0]E;
  wire [9:0]Q;
  wire \gcc0.gc1.gsym.count[9]_i_2_n_0 ;
  wire [9:0]\gcc0.gc1.gsym.count_d1_reg[9]_0 ;
  wire [9:0]\gcc0.gc1.gsym.count_d2_reg[9]_0 ;
  wire \gcc0.gc1.gsym.count_reg[0]_0 ;
  wire [9:0]plusOp__0;
  wire s_aclk;

  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc1.gsym.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc1.gsym.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc1.gsym.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc1.gsym.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc1.gsym.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gcc0.gc1.gsym.count[5]_i_1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[5]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc1.gsym.count[6]_i_1 
       (.I0(\gcc0.gc1.gsym.count[9]_i_2_n_0 ),
        .I1(Q[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc1.gsym.count[7]_i_1 
       (.I0(Q[6]),
        .I1(\gcc0.gc1.gsym.count[9]_i_2_n_0 ),
        .I2(Q[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc1.gsym.count[8]_i_1 
       (.I0(\gcc0.gc1.gsym.count[9]_i_2_n_0 ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(Q[8]),
        .O(plusOp__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gcc0.gc1.gsym.count[9]_i_1 
       (.I0(\gcc0.gc1.gsym.count[9]_i_2_n_0 ),
        .I1(Q[8]),
        .I2(Q[7]),
        .I3(Q[6]),
        .I4(Q[9]),
        .O(plusOp__0[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gcc0.gc1.gsym.count[9]_i_2 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[5]),
        .O(\gcc0.gc1.gsym.count[9]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc1.gsym.count_d1_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[0]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [0]),
        .S(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[1]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [1]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[2]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [2]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[3]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [3]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[4]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [4]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[5]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [5]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[6]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [6]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[7]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [7]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[8]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [8]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[9] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[9]),
        .Q(\gcc0.gc1.gsym.count_d1_reg[9]_0 [9]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [0]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [0]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [1]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [1]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [2]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [2]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [3]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [3]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [4]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [4]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [5]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [5]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [6]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [6]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [7]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [7]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [8]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [8]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[9] 
       (.C(s_aclk),
        .CE(E),
        .D(\gcc0.gc1.gsym.count_d1_reg[9]_0 [9]),
        .Q(\gcc0.gc1.gsym.count_d2_reg[9]_0 [9]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc1.gsym.count_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .S(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(Q[4]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(Q[5]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(Q[6]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(Q[7]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(Q[8]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[9] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[9]),
        .Q(Q[9]),
        .R(\gcc0.gc1.gsym.count_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module top_aurora_0_0_wr_logic
   (out,
    ram_full_fb_i_reg,
    axis_wr_eop,
    E,
    Q,
    \gaf.gaf0.ram_afull_i_reg ,
    s_axis_tready,
    \gcc0.gc1.gsym.count_d1_reg[9] ,
    \gcc0.gc1.gsym.count_d2_reg[9] ,
    \gmux.gm[1].gms.ms ,
    \gmux.gm[2].gms.ms ,
    \gmux.gm[3].gms.ms ,
    \gmux.gm[4].gms.ms ,
    ram_full_i_reg,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    \gaf.gaf0.ram_afull_i_reg_0 ,
    \gmux.gm[1].gms.ms_1 ,
    \gmux.gm[2].gms.ms_1 ,
    \gmux.gm[3].gms.ms_1 ,
    \gmux.gm[4].gms.ms_1 ,
    \gaf.gaf0.ram_afull_i_reg_1 ,
    \gcc0.gc1.gsym.count_reg[0] ,
    s_aclk,
    \gaf.gaf0.ram_afull_i_reg_2 ,
    \gaf.gaf0.ram_afull_i_reg_3 ,
    s_axis_tlast,
    s_axis_tvalid,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg );
  output out;
  output ram_full_fb_i_reg;
  output axis_wr_eop;
  output [0:0]E;
  output [9:0]Q;
  output \gaf.gaf0.ram_afull_i_reg ;
  output s_axis_tready;
  output [9:0]\gcc0.gc1.gsym.count_d1_reg[9] ;
  output [9:0]\gcc0.gc1.gsym.count_d2_reg[9] ;
  input \gmux.gm[1].gms.ms ;
  input \gmux.gm[2].gms.ms ;
  input \gmux.gm[3].gms.ms ;
  input \gmux.gm[4].gms.ms ;
  input ram_full_i_reg;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input \gaf.gaf0.ram_afull_i_reg_0 ;
  input \gmux.gm[1].gms.ms_1 ;
  input \gmux.gm[2].gms.ms_1 ;
  input \gmux.gm[3].gms.ms_1 ;
  input \gmux.gm[4].gms.ms_1 ;
  input \gaf.gaf0.ram_afull_i_reg_1 ;
  input \gcc0.gc1.gsym.count_reg[0] ;
  input s_aclk;
  input \gaf.gaf0.ram_afull_i_reg_2 ;
  input \gaf.gaf0.ram_afull_i_reg_3 ;
  input s_axis_tlast;
  input s_axis_tvalid;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;

  wire [0:0]E;
  wire [9:0]Q;
  wire axis_wr_eop;
  wire \gaf.gaf0.ram_afull_i_reg ;
  wire \gaf.gaf0.ram_afull_i_reg_0 ;
  wire \gaf.gaf0.ram_afull_i_reg_1 ;
  wire \gaf.gaf0.ram_afull_i_reg_2 ;
  wire \gaf.gaf0.ram_afull_i_reg_3 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  wire [9:0]\gcc0.gc1.gsym.count_d1_reg[9] ;
  wire [9:0]\gcc0.gc1.gsym.count_d2_reg[9] ;
  wire \gcc0.gc1.gsym.count_reg[0] ;
  wire \gmux.gm[1].gms.ms ;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[1].gms.ms_1 ;
  wire \gmux.gm[2].gms.ms ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_1 ;
  wire \gmux.gm[3].gms.ms ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_1 ;
  wire \gmux.gm[4].gms.ms ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_1 ;
  wire out;
  wire ram_full_fb_i_reg;
  wire ram_full_i_reg;
  wire s_aclk;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  top_aurora_0_0_wr_status_flags_ss \gwss.wsts 
       (.E(E),
        .axis_wr_eop(axis_wr_eop),
        .\gaf.gaf0.ram_afull_i_reg_0 (\gaf.gaf0.ram_afull_i_reg ),
        .\gaf.gaf0.ram_afull_i_reg_1 (\gaf.gaf0.ram_afull_i_reg_0 ),
        .\gaf.gaf0.ram_afull_i_reg_2 (\gaf.gaf0.ram_afull_i_reg_1 ),
        .\gaf.gaf0.ram_afull_i_reg_3 (\gaf.gaf0.ram_afull_i_reg_2 ),
        .\gaf.gaf0.ram_afull_i_reg_4 (\gaf.gaf0.ram_afull_i_reg_3 ),
        .\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg (\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ),
        .\gmux.gm[1].gms.ms (\gmux.gm[1].gms.ms ),
        .\gmux.gm[1].gms.ms_0 (\gmux.gm[1].gms.ms_0 ),
        .\gmux.gm[1].gms.ms_1 (\gmux.gm[1].gms.ms_1 ),
        .\gmux.gm[2].gms.ms (\gmux.gm[2].gms.ms ),
        .\gmux.gm[2].gms.ms_0 (\gmux.gm[2].gms.ms_0 ),
        .\gmux.gm[2].gms.ms_1 (\gmux.gm[2].gms.ms_1 ),
        .\gmux.gm[3].gms.ms (\gmux.gm[3].gms.ms ),
        .\gmux.gm[3].gms.ms_0 (\gmux.gm[3].gms.ms_0 ),
        .\gmux.gm[3].gms.ms_1 (\gmux.gm[3].gms.ms_1 ),
        .\gmux.gm[4].gms.ms (\gmux.gm[4].gms.ms ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms_0 ),
        .\gmux.gm[4].gms.ms_1 (\gmux.gm[4].gms.ms_1 ),
        .out(out),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .ram_full_fb_i_reg_1(\gcc0.gc1.gsym.count_reg[0] ),
        .ram_full_i_reg_0(ram_full_i_reg),
        .s_aclk(s_aclk),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
  top_aurora_0_0_wr_bin_cntr wpntr
       (.E(E),
        .Q(Q),
        .\gcc0.gc1.gsym.count_d1_reg[9]_0 (\gcc0.gc1.gsym.count_d1_reg[9] ),
        .\gcc0.gc1.gsym.count_d2_reg[9]_0 (\gcc0.gc1.gsym.count_d2_reg[9] ),
        .\gcc0.gc1.gsym.count_reg[0]_0 (\gcc0.gc1.gsym.count_reg[0] ),
        .s_aclk(s_aclk));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module top_aurora_0_0_wr_status_flags_ss
   (out,
    ram_full_fb_i_reg_0,
    axis_wr_eop,
    E,
    \gaf.gaf0.ram_afull_i_reg_0 ,
    s_axis_tready,
    \gmux.gm[1].gms.ms ,
    \gmux.gm[2].gms.ms ,
    \gmux.gm[3].gms.ms ,
    \gmux.gm[4].gms.ms ,
    ram_full_i_reg_0,
    \gmux.gm[1].gms.ms_0 ,
    \gmux.gm[2].gms.ms_0 ,
    \gmux.gm[3].gms.ms_0 ,
    \gmux.gm[4].gms.ms_0 ,
    \gaf.gaf0.ram_afull_i_reg_1 ,
    \gmux.gm[1].gms.ms_1 ,
    \gmux.gm[2].gms.ms_1 ,
    \gmux.gm[3].gms.ms_1 ,
    \gmux.gm[4].gms.ms_1 ,
    \gaf.gaf0.ram_afull_i_reg_2 ,
    ram_full_fb_i_reg_1,
    s_aclk,
    \gaf.gaf0.ram_afull_i_reg_3 ,
    \gaf.gaf0.ram_afull_i_reg_4 ,
    s_axis_tlast,
    s_axis_tvalid,
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg );
  output out;
  output ram_full_fb_i_reg_0;
  output axis_wr_eop;
  output [0:0]E;
  output \gaf.gaf0.ram_afull_i_reg_0 ;
  output s_axis_tready;
  input \gmux.gm[1].gms.ms ;
  input \gmux.gm[2].gms.ms ;
  input \gmux.gm[3].gms.ms ;
  input \gmux.gm[4].gms.ms ;
  input ram_full_i_reg_0;
  input \gmux.gm[1].gms.ms_0 ;
  input \gmux.gm[2].gms.ms_0 ;
  input \gmux.gm[3].gms.ms_0 ;
  input \gmux.gm[4].gms.ms_0 ;
  input \gaf.gaf0.ram_afull_i_reg_1 ;
  input \gmux.gm[1].gms.ms_1 ;
  input \gmux.gm[2].gms.ms_1 ;
  input \gmux.gm[3].gms.ms_1 ;
  input \gmux.gm[4].gms.ms_1 ;
  input \gaf.gaf0.ram_afull_i_reg_2 ;
  input ram_full_fb_i_reg_1;
  input s_aclk;
  input \gaf.gaf0.ram_afull_i_reg_3 ;
  input \gaf.gaf0.ram_afull_i_reg_4 ;
  input s_axis_tlast;
  input s_axis_tvalid;
  input \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;

  wire [0:0]E;
  wire axis_wr_eop;
  wire c0_n_0;
  wire comp1;
  wire \gaf.gaf0.ram_afull_i_reg_0 ;
  wire \gaf.gaf0.ram_afull_i_reg_1 ;
  wire \gaf.gaf0.ram_afull_i_reg_2 ;
  wire \gaf.gaf0.ram_afull_i_reg_3 ;
  wire \gaf.gaf0.ram_afull_i_reg_4 ;
  wire \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ;
  wire \gmux.gm[1].gms.ms ;
  wire \gmux.gm[1].gms.ms_0 ;
  wire \gmux.gm[1].gms.ms_1 ;
  wire \gmux.gm[2].gms.ms ;
  wire \gmux.gm[2].gms.ms_0 ;
  wire \gmux.gm[2].gms.ms_1 ;
  wire \gmux.gm[3].gms.ms ;
  wire \gmux.gm[3].gms.ms_0 ;
  wire \gmux.gm[3].gms.ms_1 ;
  wire \gmux.gm[4].gms.ms ;
  wire \gmux.gm[4].gms.ms_0 ;
  wire \gmux.gm[4].gms.ms_1 ;
  wire p_0_in;
  wire p_2_out;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  wire ram_full_fb_i_reg_1;
  (* DONT_TOUCH *) wire ram_full_i;
  wire ram_full_i_reg_0;
  wire s_aclk;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_3 
       (.I0(s_axis_tvalid),
        .I1(ram_full_fb_i),
        .O(E));
  top_aurora_0_0_compare c0
       (.comp1(comp1),
        .\gmux.gm[1].gms.ms_0 (\gmux.gm[1].gms.ms ),
        .\gmux.gm[2].gms.ms_0 (\gmux.gm[2].gms.ms ),
        .\gmux.gm[3].gms.ms_0 (\gmux.gm[3].gms.ms ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms ),
        .\grstd1.grst_full.grst_f.rst_d3_reg (c0_n_0),
        .out(ram_full_fb_i),
        .ram_full_i_reg(ram_full_i_reg_0),
        .ram_full_i_reg_0(\gaf.gaf0.ram_afull_i_reg_3 ),
        .ram_full_i_reg_1(\gaf.gaf0.ram_afull_i_reg_4 ),
        .s_axis_tvalid(s_axis_tvalid));
  top_aurora_0_0_compare_0 c1
       (.comp1(comp1),
        .\gaf.gaf0.ram_afull_i_reg (\gaf.gaf0.ram_afull_i_reg_1 ),
        .\gaf.gaf0.ram_afull_i_reg_0 (\gaf.gaf0.ram_afull_i_reg_3 ),
        .\gaf.gaf0.ram_afull_i_reg_1 (\gaf.gaf0.ram_afull_i_reg_4 ),
        .\gaf.gaf0.ram_afull_i_reg_2 (ram_full_fb_i_reg_0),
        .\gmux.gm[1].gms.ms_0 (\gmux.gm[1].gms.ms_0 ),
        .\gmux.gm[2].gms.ms_0 (\gmux.gm[2].gms.ms_0 ),
        .\gmux.gm[3].gms.ms_0 (\gmux.gm[3].gms.ms_0 ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms_0 ),
        .out(ram_afull_i),
        .p_0_in(p_0_in),
        .p_2_out(p_2_out));
  top_aurora_0_0_compare_1 \gaf.c2 
       (.\gaf.gaf0.ram_afull_i_reg (\gaf.gaf0.ram_afull_i_reg_2 ),
        .\gmux.gm[1].gms.ms_0 (\gmux.gm[1].gms.ms_1 ),
        .\gmux.gm[2].gms.ms_0 (\gmux.gm[2].gms.ms_1 ),
        .\gmux.gm[3].gms.ms_0 (\gmux.gm[3].gms.ms_1 ),
        .\gmux.gm[4].gms.ms_0 (\gmux.gm[4].gms.ms_1 ),
        .p_0_in(p_0_in));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    \gaf.gaf0.ram_afull_i_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(ram_afull_i),
        .S(ram_full_fb_i_reg_1));
  LUT2 #(
    .INIT(4'h2)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_i_4 
       (.I0(ram_afull_i),
        .I1(\gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_pkt_read_reg ),
        .O(\gaf.gaf0.ram_afull_i_reg_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \gaxis_fifo.gaxisf.gaxis_pkt_fifo_cc.axis_wr_eop_d1_i_1 
       (.I0(s_axis_tlast),
        .I1(s_axis_tvalid),
        .I2(ram_full_fb_i),
        .O(axis_wr_eop));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_fb));
  LUT2 #(
    .INIT(4'hB)) 
    ram_empty_fb_i_i_2
       (.I0(ram_full_fb_i),
        .I1(s_axis_tvalid),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_full_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_full_fb_i),
        .S(ram_full_fb_i_reg_1));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_full_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_full_i),
        .S(ram_full_fb_i_reg_1));
  LUT1 #(
    .INIT(2'h1)) 
    s_axis_tready_INST_0
       (.I0(ram_full_i),
        .O(s_axis_tready));
endmodule

(* C_BUILD_REVISION = "0" *) (* C_CORE_INFO1 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_CORE_INFO2 = "128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_CORE_MAJOR_VER = "2" *) (* C_CORE_MINOR_VER = "0" *) (* C_CORE_TYPE = "2" *) 
(* C_CSE_DRV_VER = "1" *) (* C_MAJOR_VERSION = "2013" *) (* C_MINOR_VERSION = "1" *) 
(* C_NEXT_SLAVE = "0" *) (* C_PIPE_IFACE = "0" *) (* C_USE_TEST_REG = "1" *) 
(* C_XDEVICEFAMILY = "virtex7" *) (* C_XSDB_SLAVE_TYPE = "33" *) (* ORIG_REF_NAME = "xsdbs_v1_0_2_xsdbs" *) 
(* dont_touch = "true" *) 
module top_aurora_0_0_xsdbs_v1_0_2_xsdbs
   (s_rst_o,
    s_dclk_o,
    s_den_o,
    s_dwe_o,
    s_daddr_o,
    s_di_o,
    sl_oport_o,
    s_do_i,
    sl_iport_i,
    s_drdy_i);
  output s_rst_o;
  output s_dclk_o;
  output s_den_o;
  output s_dwe_o;
  output [16:0]s_daddr_o;
  output [15:0]s_di_o;
  output [16:0]sl_oport_o;
  input [15:0]s_do_i;
  input [36:0]sl_iport_i;
  input s_drdy_i;

  wire [15:0]reg_do;
  wire \reg_do[0]_i_2_n_0 ;
  wire \reg_do[0]_i_3_n_0 ;
  wire \reg_do[0]_i_4_n_0 ;
  wire \reg_do[10]_i_2_n_0 ;
  wire \reg_do[10]_i_3_n_0 ;
  wire \reg_do[10]_i_4_n_0 ;
  wire \reg_do[10]_i_5_n_0 ;
  wire \reg_do[11]_i_2_n_0 ;
  wire \reg_do[11]_i_3_n_0 ;
  wire \reg_do[12]_i_2_n_0 ;
  wire \reg_do[12]_i_3_n_0 ;
  wire \reg_do[13]_i_2_n_0 ;
  wire \reg_do[13]_i_3_n_0 ;
  wire \reg_do[14]_i_2_n_0 ;
  wire \reg_do[14]_i_3_n_0 ;
  wire \reg_do[15]_i_2_n_0 ;
  wire \reg_do[15]_i_3_n_0 ;
  wire \reg_do[15]_i_4_n_0 ;
  wire \reg_do[15]_i_5_n_0 ;
  wire \reg_do[15]_i_6_n_0 ;
  wire \reg_do[1]_i_2_n_0 ;
  wire \reg_do[1]_i_3_n_0 ;
  wire \reg_do[1]_i_4_n_0 ;
  wire \reg_do[2]_i_2_n_0 ;
  wire \reg_do[2]_i_3_n_0 ;
  wire \reg_do[2]_i_4_n_0 ;
  wire \reg_do[3]_i_2_n_0 ;
  wire \reg_do[3]_i_3_n_0 ;
  wire \reg_do[3]_i_4_n_0 ;
  wire \reg_do[4]_i_2_n_0 ;
  wire \reg_do[4]_i_3_n_0 ;
  wire \reg_do[4]_i_4_n_0 ;
  wire \reg_do[5]_i_2_n_0 ;
  wire \reg_do[5]_i_3_n_0 ;
  wire \reg_do[5]_i_4_n_0 ;
  wire \reg_do[5]_i_5_n_0 ;
  wire \reg_do[6]_i_2_n_0 ;
  wire \reg_do[6]_i_3_n_0 ;
  wire \reg_do[6]_i_4_n_0 ;
  wire \reg_do[7]_i_2_n_0 ;
  wire \reg_do[7]_i_3_n_0 ;
  wire \reg_do[7]_i_4_n_0 ;
  wire \reg_do[8]_i_2_n_0 ;
  wire \reg_do[8]_i_3_n_0 ;
  wire \reg_do[8]_i_4_n_0 ;
  wire \reg_do[9]_i_2_n_0 ;
  wire \reg_do[9]_i_3_n_0 ;
  wire \reg_do[9]_i_4_n_0 ;
  wire \reg_do[9]_i_5_n_0 ;
  wire \reg_do[9]_i_6_n_0 ;
  wire \reg_do_reg_n_0_[0] ;
  wire \reg_do_reg_n_0_[10] ;
  wire \reg_do_reg_n_0_[11] ;
  wire \reg_do_reg_n_0_[12] ;
  wire \reg_do_reg_n_0_[13] ;
  wire \reg_do_reg_n_0_[14] ;
  wire \reg_do_reg_n_0_[15] ;
  wire \reg_do_reg_n_0_[1] ;
  wire \reg_do_reg_n_0_[2] ;
  wire \reg_do_reg_n_0_[3] ;
  wire \reg_do_reg_n_0_[4] ;
  wire \reg_do_reg_n_0_[5] ;
  wire \reg_do_reg_n_0_[6] ;
  wire \reg_do_reg_n_0_[7] ;
  wire \reg_do_reg_n_0_[8] ;
  wire \reg_do_reg_n_0_[9] ;
  wire reg_drdy;
  wire reg_drdy_i_1_n_0;
  wire [15:0]reg_test;
  wire reg_test0;
  wire s_den_o;
  wire s_den_o_INST_0_i_1_n_0;
  wire [15:0]s_do_i;
  wire s_drdy_i;
  wire [36:0]sl_iport_i;
  wire [16:0]sl_oport_o;
  (* DONT_TOUCH *) (* UUID = "1" *) wire [127:0]uuid_stamp;

  assign s_daddr_o[16:0] = sl_iport_i[20:4];
  assign s_dclk_o = sl_iport_i[1];
  assign s_di_o[15:0] = sl_iport_i[36:21];
  assign s_dwe_o = sl_iport_i[3];
  assign s_rst_o = sl_iport_i[0];
  LUT6 #(
    .INIT(64'hAAAAAAAA0020AAAA)) 
    \reg_do[0]_i_1 
       (.I0(\reg_do[0]_i_2_n_0 ),
        .I1(\reg_do[9]_i_3_n_0 ),
        .I2(reg_test[0]),
        .I3(sl_iport_i[4]),
        .I4(sl_iport_i[5]),
        .I5(\reg_do[9]_i_2_n_0 ),
        .O(reg_do[0]));
  LUT6 #(
    .INIT(64'hABABABAAAAAAABAA)) 
    \reg_do[0]_i_2 
       (.I0(\reg_do[5]_i_3_n_0 ),
        .I1(sl_iport_i[8]),
        .I2(sl_iport_i[7]),
        .I3(\reg_do[0]_i_3_n_0 ),
        .I4(sl_iport_i[6]),
        .I5(\reg_do[0]_i_4_n_0 ),
        .O(\reg_do[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[0]_i_3 
       (.I0(uuid_stamp[48]),
        .I1(uuid_stamp[32]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[16]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[0]),
        .O(\reg_do[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[0]_i_4 
       (.I0(uuid_stamp[112]),
        .I1(uuid_stamp[96]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[80]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[64]),
        .O(\reg_do[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF2808)) 
    \reg_do[10]_i_1 
       (.I0(\reg_do[10]_i_2_n_0 ),
        .I1(sl_iport_i[4]),
        .I2(sl_iport_i[5]),
        .I3(reg_test[10]),
        .I4(\reg_do[10]_i_3_n_0 ),
        .O(reg_do[10]));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \reg_do[10]_i_2 
       (.I0(sl_iport_i[6]),
        .I1(sl_iport_i[9]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(sl_iport_i[11]),
        .I5(sl_iport_i[10]),
        .O(\reg_do[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[10]_i_3 
       (.I0(\reg_do[10]_i_4_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[10]_i_5_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[10]_i_4 
       (.I0(uuid_stamp[122]),
        .I1(uuid_stamp[106]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[90]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[74]),
        .O(\reg_do[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[10]_i_5 
       (.I0(uuid_stamp[58]),
        .I1(uuid_stamp[42]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[26]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[10]),
        .O(\reg_do[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \reg_do[11]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[11]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[11]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[11]),
        .O(reg_do[11]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[11]_i_2 
       (.I0(uuid_stamp[59]),
        .I1(uuid_stamp[43]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[27]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[11]),
        .O(\reg_do[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[11]_i_3 
       (.I0(uuid_stamp[123]),
        .I1(uuid_stamp[107]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[91]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[75]),
        .O(\reg_do[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h5404FFFF54045404)) 
    \reg_do[12]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[12]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[12]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[12]),
        .O(reg_do[12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[12]_i_2 
       (.I0(uuid_stamp[124]),
        .I1(uuid_stamp[108]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[92]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[76]),
        .O(\reg_do[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[12]_i_3 
       (.I0(uuid_stamp[60]),
        .I1(uuid_stamp[44]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[28]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[12]),
        .O(\reg_do[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \reg_do[13]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[13]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[13]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[13]),
        .O(reg_do[13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[13]_i_2 
       (.I0(uuid_stamp[61]),
        .I1(uuid_stamp[45]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[29]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[13]),
        .O(\reg_do[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[13]_i_3 
       (.I0(uuid_stamp[125]),
        .I1(uuid_stamp[109]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[93]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[77]),
        .O(\reg_do[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \reg_do[14]_i_1 
       (.I0(\reg_do[15]_i_4_n_0 ),
        .I1(\reg_do[14]_i_2_n_0 ),
        .I2(\reg_do[15]_i_2_n_0 ),
        .I3(\reg_do[14]_i_3_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[14]),
        .O(reg_do[14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[14]_i_2 
       (.I0(uuid_stamp[62]),
        .I1(uuid_stamp[46]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[30]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[14]),
        .O(\reg_do[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[14]_i_3 
       (.I0(uuid_stamp[126]),
        .I1(uuid_stamp[110]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[94]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[78]),
        .O(\reg_do[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0B01FFFF0B010B01)) 
    \reg_do[15]_i_1 
       (.I0(\reg_do[15]_i_2_n_0 ),
        .I1(\reg_do[15]_i_3_n_0 ),
        .I2(\reg_do[15]_i_4_n_0 ),
        .I3(\reg_do[15]_i_5_n_0 ),
        .I4(\reg_do[15]_i_6_n_0 ),
        .I5(reg_test[15]),
        .O(reg_do[15]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h45)) 
    \reg_do[15]_i_2 
       (.I0(sl_iport_i[8]),
        .I1(sl_iport_i[7]),
        .I2(sl_iport_i[6]),
        .O(\reg_do[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \reg_do[15]_i_3 
       (.I0(uuid_stamp[127]),
        .I1(uuid_stamp[111]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[95]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[79]),
        .O(\reg_do[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \reg_do[15]_i_4 
       (.I0(sl_iport_i[7]),
        .I1(sl_iport_i[8]),
        .I2(sl_iport_i[9]),
        .I3(sl_iport_i[11]),
        .I4(sl_iport_i[10]),
        .O(\reg_do[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[15]_i_5 
       (.I0(uuid_stamp[63]),
        .I1(uuid_stamp[47]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[31]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[15]),
        .O(\reg_do[15]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFD0FFFFFFFF)) 
    \reg_do[15]_i_6 
       (.I0(sl_iport_i[6]),
        .I1(sl_iport_i[7]),
        .I2(sl_iport_i[8]),
        .I3(\reg_do[9]_i_2_n_0 ),
        .I4(sl_iport_i[4]),
        .I5(sl_iport_i[5]),
        .O(\reg_do[15]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAFEAA)) 
    \reg_do[1]_i_1 
       (.I0(\reg_do[1]_i_2_n_0 ),
        .I1(reg_test[1]),
        .I2(\reg_do[9]_i_3_n_0 ),
        .I3(sl_iport_i[5]),
        .I4(sl_iport_i[4]),
        .I5(\reg_do[9]_i_2_n_0 ),
        .O(reg_do[1]));
  LUT6 #(
    .INIT(64'h00000000FFAE00A2)) 
    \reg_do[1]_i_2 
       (.I0(\reg_do[1]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[1]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[1]_i_3 
       (.I0(uuid_stamp[49]),
        .I1(uuid_stamp[33]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[17]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[1]),
        .O(\reg_do[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[1]_i_4 
       (.I0(uuid_stamp[113]),
        .I1(uuid_stamp[97]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[81]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[65]),
        .O(\reg_do[1]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[2]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[2]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[2]_i_2_n_0 ),
        .O(reg_do[2]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[2]_i_2 
       (.I0(\reg_do[2]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[2]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[2]_i_3 
       (.I0(uuid_stamp[114]),
        .I1(uuid_stamp[98]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[82]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[66]),
        .O(\reg_do[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[2]_i_4 
       (.I0(uuid_stamp[50]),
        .I1(uuid_stamp[34]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[18]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[2]),
        .O(\reg_do[2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[3]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[3]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[3]_i_2_n_0 ),
        .O(reg_do[3]));
  LUT6 #(
    .INIT(64'h000000003333AA3A)) 
    \reg_do[3]_i_2 
       (.I0(\reg_do[3]_i_3_n_0 ),
        .I1(\reg_do[3]_i_4_n_0 ),
        .I2(sl_iport_i[6]),
        .I3(sl_iport_i[7]),
        .I4(sl_iport_i[8]),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[3]_i_3 
       (.I0(uuid_stamp[51]),
        .I1(uuid_stamp[35]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[19]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[3]),
        .O(\reg_do[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h05F5030305F5F3F3)) 
    \reg_do[3]_i_4 
       (.I0(uuid_stamp[83]),
        .I1(uuid_stamp[67]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[115]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[99]),
        .O(\reg_do[3]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[4]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[4]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[4]_i_2_n_0 ),
        .O(reg_do[4]));
  LUT6 #(
    .INIT(64'h00000000FFAE00A2)) 
    \reg_do[4]_i_2 
       (.I0(\reg_do[4]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[4]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[4]_i_3 
       (.I0(uuid_stamp[52]),
        .I1(uuid_stamp[36]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[20]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[4]),
        .O(\reg_do[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[4]_i_4 
       (.I0(uuid_stamp[116]),
        .I1(uuid_stamp[100]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[84]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[68]),
        .O(\reg_do[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h888888888A88A8A8)) 
    \reg_do[5]_i_1 
       (.I0(\reg_do[5]_i_2_n_0 ),
        .I1(\reg_do[9]_i_2_n_0 ),
        .I2(\reg_do[9]_i_3_n_0 ),
        .I3(reg_test[5]),
        .I4(sl_iport_i[5]),
        .I5(sl_iport_i[4]),
        .O(reg_do[5]));
  LUT6 #(
    .INIT(64'hABABABAAAAAAABAA)) 
    \reg_do[5]_i_2 
       (.I0(\reg_do[5]_i_3_n_0 ),
        .I1(sl_iport_i[8]),
        .I2(sl_iport_i[7]),
        .I3(\reg_do[5]_i_4_n_0 ),
        .I4(sl_iport_i[6]),
        .I5(\reg_do[5]_i_5_n_0 ),
        .O(\reg_do[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \reg_do[5]_i_3 
       (.I0(sl_iport_i[10]),
        .I1(sl_iport_i[11]),
        .I2(sl_iport_i[9]),
        .I3(sl_iport_i[8]),
        .O(\reg_do[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[5]_i_4 
       (.I0(uuid_stamp[53]),
        .I1(uuid_stamp[37]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[21]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[5]),
        .O(\reg_do[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[5]_i_5 
       (.I0(uuid_stamp[117]),
        .I1(uuid_stamp[101]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[85]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[69]),
        .O(\reg_do[5]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[6]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[6]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[6]_i_2_n_0 ),
        .O(reg_do[6]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[6]_i_2 
       (.I0(\reg_do[6]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[6]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[6]_i_3 
       (.I0(uuid_stamp[118]),
        .I1(uuid_stamp[102]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[86]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[70]),
        .O(\reg_do[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[6]_i_4 
       (.I0(uuid_stamp[54]),
        .I1(uuid_stamp[38]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[22]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[6]),
        .O(\reg_do[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6200)) 
    \reg_do[7]_i_1 
       (.I0(sl_iport_i[4]),
        .I1(sl_iport_i[5]),
        .I2(reg_test[7]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[7]_i_2_n_0 ),
        .O(reg_do[7]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[7]_i_2 
       (.I0(\reg_do[7]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[7]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[7]_i_3 
       (.I0(uuid_stamp[119]),
        .I1(uuid_stamp[103]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[87]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[71]),
        .O(\reg_do[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[7]_i_4 
       (.I0(uuid_stamp[55]),
        .I1(uuid_stamp[39]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[23]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[7]),
        .O(\reg_do[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7500)) 
    \reg_do[8]_i_1 
       (.I0(sl_iport_i[5]),
        .I1(sl_iport_i[4]),
        .I2(reg_test[8]),
        .I3(\reg_do[10]_i_2_n_0 ),
        .I4(\reg_do[8]_i_2_n_0 ),
        .O(reg_do[8]));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[8]_i_2 
       (.I0(\reg_do[8]_i_3_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[8]_i_4_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[8]_i_3 
       (.I0(uuid_stamp[120]),
        .I1(uuid_stamp[104]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[88]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[72]),
        .O(\reg_do[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[8]_i_4 
       (.I0(uuid_stamp[56]),
        .I1(uuid_stamp[40]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[24]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[8]),
        .O(\reg_do[8]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40144010)) 
    \reg_do[9]_i_1 
       (.I0(\reg_do[9]_i_2_n_0 ),
        .I1(sl_iport_i[5]),
        .I2(sl_iport_i[4]),
        .I3(\reg_do[9]_i_3_n_0 ),
        .I4(reg_test[9]),
        .I5(\reg_do[9]_i_4_n_0 ),
        .O(reg_do[9]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hFF7FFFFF)) 
    \reg_do[9]_i_2 
       (.I0(sl_iport_i[10]),
        .I1(sl_iport_i[11]),
        .I2(sl_iport_i[8]),
        .I3(sl_iport_i[7]),
        .I4(sl_iport_i[9]),
        .O(\reg_do[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \reg_do[9]_i_3 
       (.I0(sl_iport_i[8]),
        .I1(sl_iport_i[7]),
        .I2(sl_iport_i[6]),
        .O(\reg_do[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAFBAA08)) 
    \reg_do[9]_i_4 
       (.I0(\reg_do[9]_i_5_n_0 ),
        .I1(sl_iport_i[6]),
        .I2(sl_iport_i[7]),
        .I3(sl_iport_i[8]),
        .I4(\reg_do[9]_i_6_n_0 ),
        .I5(\reg_do[15]_i_4_n_0 ),
        .O(\reg_do[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[9]_i_5 
       (.I0(uuid_stamp[121]),
        .I1(uuid_stamp[105]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[89]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[73]),
        .O(\reg_do[9]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \reg_do[9]_i_6 
       (.I0(uuid_stamp[57]),
        .I1(uuid_stamp[41]),
        .I2(sl_iport_i[5]),
        .I3(uuid_stamp[25]),
        .I4(sl_iport_i[4]),
        .I5(uuid_stamp[9]),
        .O(\reg_do[9]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[0] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[0]),
        .Q(\reg_do_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[10] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[10]),
        .Q(\reg_do_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[11] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[11]),
        .Q(\reg_do_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[12] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[12]),
        .Q(\reg_do_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[13] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[13]),
        .Q(\reg_do_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[14] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[14]),
        .Q(\reg_do_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[15] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[15]),
        .Q(\reg_do_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[1] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[1]),
        .Q(\reg_do_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[2] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[2]),
        .Q(\reg_do_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[3] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[3]),
        .Q(\reg_do_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[4] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[4]),
        .Q(\reg_do_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[5] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[5]),
        .Q(\reg_do_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[6] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[6]),
        .Q(\reg_do_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[7] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[7]),
        .Q(\reg_do_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[8] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[8]),
        .Q(\reg_do_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_do_reg[9] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_do[9]),
        .Q(\reg_do_reg_n_0_[9] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    reg_drdy_i_1
       (.I0(s_den_o_INST_0_i_1_n_0),
        .I1(sl_iport_i[12]),
        .I2(sl_iport_i[13]),
        .I3(sl_iport_i[14]),
        .I4(sl_iport_i[0]),
        .I5(sl_iport_i[2]),
        .O(reg_drdy_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    reg_drdy_reg
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(reg_drdy_i_1_n_0),
        .Q(reg_drdy),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \reg_test[15]_i_1 
       (.I0(s_den_o_INST_0_i_1_n_0),
        .I1(sl_iport_i[12]),
        .I2(sl_iport_i[13]),
        .I3(sl_iport_i[14]),
        .I4(sl_iport_i[3]),
        .I5(sl_iport_i[2]),
        .O(reg_test0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[0] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[21]),
        .Q(reg_test[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[10] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[31]),
        .Q(reg_test[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[11] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[32]),
        .Q(reg_test[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[12] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[33]),
        .Q(reg_test[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[13] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[34]),
        .Q(reg_test[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[14] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[35]),
        .Q(reg_test[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[15] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[36]),
        .Q(reg_test[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[1] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[22]),
        .Q(reg_test[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[2] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[23]),
        .Q(reg_test[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[3] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[24]),
        .Q(reg_test[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[4] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[25]),
        .Q(reg_test[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[5] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[26]),
        .Q(reg_test[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[6] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[27]),
        .Q(reg_test[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[7] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[28]),
        .Q(reg_test[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[8] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[29]),
        .Q(reg_test[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \reg_test_reg[9] 
       (.C(sl_iport_i[1]),
        .CE(reg_test0),
        .D(sl_iport_i[30]),
        .Q(reg_test[9]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h7FFF0000)) 
    s_den_o_INST_0
       (.I0(s_den_o_INST_0_i_1_n_0),
        .I1(sl_iport_i[12]),
        .I2(sl_iport_i[13]),
        .I3(sl_iport_i[14]),
        .I4(sl_iport_i[2]),
        .O(s_den_o));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    s_den_o_INST_0_i_1
       (.I0(sl_iport_i[15]),
        .I1(sl_iport_i[16]),
        .I2(sl_iport_i[17]),
        .I3(sl_iport_i[18]),
        .I4(sl_iport_i[20]),
        .I5(sl_iport_i[19]),
        .O(s_den_o_INST_0_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \sl_oport_o[0]_INST_0 
       (.I0(reg_drdy),
        .I1(s_drdy_i),
        .O(sl_oport_o[0]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[10]_INST_0 
       (.I0(\reg_do_reg_n_0_[9] ),
        .I1(reg_drdy),
        .I2(s_do_i[9]),
        .O(sl_oport_o[10]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[11]_INST_0 
       (.I0(\reg_do_reg_n_0_[10] ),
        .I1(reg_drdy),
        .I2(s_do_i[10]),
        .O(sl_oport_o[11]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[12]_INST_0 
       (.I0(\reg_do_reg_n_0_[11] ),
        .I1(reg_drdy),
        .I2(s_do_i[11]),
        .O(sl_oport_o[12]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[13]_INST_0 
       (.I0(\reg_do_reg_n_0_[12] ),
        .I1(reg_drdy),
        .I2(s_do_i[12]),
        .O(sl_oport_o[13]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[14]_INST_0 
       (.I0(\reg_do_reg_n_0_[13] ),
        .I1(reg_drdy),
        .I2(s_do_i[13]),
        .O(sl_oport_o[14]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[15]_INST_0 
       (.I0(\reg_do_reg_n_0_[14] ),
        .I1(reg_drdy),
        .I2(s_do_i[14]),
        .O(sl_oport_o[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[16]_INST_0 
       (.I0(\reg_do_reg_n_0_[15] ),
        .I1(reg_drdy),
        .I2(s_do_i[15]),
        .O(sl_oport_o[16]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[1]_INST_0 
       (.I0(\reg_do_reg_n_0_[0] ),
        .I1(reg_drdy),
        .I2(s_do_i[0]),
        .O(sl_oport_o[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[2]_INST_0 
       (.I0(\reg_do_reg_n_0_[1] ),
        .I1(reg_drdy),
        .I2(s_do_i[1]),
        .O(sl_oport_o[2]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[3]_INST_0 
       (.I0(\reg_do_reg_n_0_[2] ),
        .I1(reg_drdy),
        .I2(s_do_i[2]),
        .O(sl_oport_o[3]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[4]_INST_0 
       (.I0(\reg_do_reg_n_0_[3] ),
        .I1(reg_drdy),
        .I2(s_do_i[3]),
        .O(sl_oport_o[4]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[5]_INST_0 
       (.I0(\reg_do_reg_n_0_[4] ),
        .I1(reg_drdy),
        .I2(s_do_i[4]),
        .O(sl_oport_o[5]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[6]_INST_0 
       (.I0(\reg_do_reg_n_0_[5] ),
        .I1(reg_drdy),
        .I2(s_do_i[5]),
        .O(sl_oport_o[6]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[7]_INST_0 
       (.I0(\reg_do_reg_n_0_[6] ),
        .I1(reg_drdy),
        .I2(s_do_i[6]),
        .O(sl_oport_o[7]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[8]_INST_0 
       (.I0(\reg_do_reg_n_0_[7] ),
        .I1(reg_drdy),
        .I2(s_do_i[7]),
        .O(sl_oport_o[8]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \sl_oport_o[9]_INST_0 
       (.I0(\reg_do_reg_n_0_[8] ),
        .I1(reg_drdy),
        .I2(s_do_i[8]),
        .O(sl_oport_o[9]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[0] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[0]),
        .Q(uuid_stamp[0]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[100] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[100]),
        .Q(uuid_stamp[100]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[101] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[101]),
        .Q(uuid_stamp[101]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[102] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[102]),
        .Q(uuid_stamp[102]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[103] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[103]),
        .Q(uuid_stamp[103]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[104] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[104]),
        .Q(uuid_stamp[104]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[105] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[105]),
        .Q(uuid_stamp[105]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[106] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[106]),
        .Q(uuid_stamp[106]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[107] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[107]),
        .Q(uuid_stamp[107]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[108] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[108]),
        .Q(uuid_stamp[108]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[109] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[109]),
        .Q(uuid_stamp[109]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[10] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[10]),
        .Q(uuid_stamp[10]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[110] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[110]),
        .Q(uuid_stamp[110]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[111] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[111]),
        .Q(uuid_stamp[111]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[112] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[112]),
        .Q(uuid_stamp[112]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[113] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[113]),
        .Q(uuid_stamp[113]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[114] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[114]),
        .Q(uuid_stamp[114]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[115] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[115]),
        .Q(uuid_stamp[115]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[116] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[116]),
        .Q(uuid_stamp[116]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[117] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[117]),
        .Q(uuid_stamp[117]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[118] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[118]),
        .Q(uuid_stamp[118]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[119] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[119]),
        .Q(uuid_stamp[119]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[11] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[11]),
        .Q(uuid_stamp[11]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[120] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[120]),
        .Q(uuid_stamp[120]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[121] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[121]),
        .Q(uuid_stamp[121]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[122] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[122]),
        .Q(uuid_stamp[122]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[123] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[123]),
        .Q(uuid_stamp[123]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[124] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[124]),
        .Q(uuid_stamp[124]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[125] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[125]),
        .Q(uuid_stamp[125]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[126] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[126]),
        .Q(uuid_stamp[126]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[127] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[127]),
        .Q(uuid_stamp[127]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[12] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[12]),
        .Q(uuid_stamp[12]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[13] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[13]),
        .Q(uuid_stamp[13]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[14] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[14]),
        .Q(uuid_stamp[14]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[15] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[15]),
        .Q(uuid_stamp[15]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[16] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[16]),
        .Q(uuid_stamp[16]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[17] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[17]),
        .Q(uuid_stamp[17]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[18] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[18]),
        .Q(uuid_stamp[18]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[19] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[19]),
        .Q(uuid_stamp[19]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[1] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[1]),
        .Q(uuid_stamp[1]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[20] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[20]),
        .Q(uuid_stamp[20]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[21] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[21]),
        .Q(uuid_stamp[21]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[22] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[22]),
        .Q(uuid_stamp[22]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[23] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[23]),
        .Q(uuid_stamp[23]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[24] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[24]),
        .Q(uuid_stamp[24]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[25] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[25]),
        .Q(uuid_stamp[25]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[26] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[26]),
        .Q(uuid_stamp[26]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[27] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[27]),
        .Q(uuid_stamp[27]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[28] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[28]),
        .Q(uuid_stamp[28]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[29] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[29]),
        .Q(uuid_stamp[29]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[2] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[2]),
        .Q(uuid_stamp[2]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[30] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[30]),
        .Q(uuid_stamp[30]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[31] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[31]),
        .Q(uuid_stamp[31]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[32] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[32]),
        .Q(uuid_stamp[32]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[33] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[33]),
        .Q(uuid_stamp[33]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[34] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[34]),
        .Q(uuid_stamp[34]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[35] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[35]),
        .Q(uuid_stamp[35]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[36] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[36]),
        .Q(uuid_stamp[36]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[37] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[37]),
        .Q(uuid_stamp[37]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[38] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[38]),
        .Q(uuid_stamp[38]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[39] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[39]),
        .Q(uuid_stamp[39]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[3] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[3]),
        .Q(uuid_stamp[3]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[40] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[40]),
        .Q(uuid_stamp[40]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[41] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[41]),
        .Q(uuid_stamp[41]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[42] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[42]),
        .Q(uuid_stamp[42]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[43] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[43]),
        .Q(uuid_stamp[43]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[44] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[44]),
        .Q(uuid_stamp[44]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[45] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[45]),
        .Q(uuid_stamp[45]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[46] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[46]),
        .Q(uuid_stamp[46]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[47] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[47]),
        .Q(uuid_stamp[47]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[48] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[48]),
        .Q(uuid_stamp[48]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[49] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[49]),
        .Q(uuid_stamp[49]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[4] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[4]),
        .Q(uuid_stamp[4]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[50] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[50]),
        .Q(uuid_stamp[50]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[51] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[51]),
        .Q(uuid_stamp[51]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[52] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[52]),
        .Q(uuid_stamp[52]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[53] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[53]),
        .Q(uuid_stamp[53]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[54] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[54]),
        .Q(uuid_stamp[54]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[55] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[55]),
        .Q(uuid_stamp[55]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[56] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[56]),
        .Q(uuid_stamp[56]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[57] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[57]),
        .Q(uuid_stamp[57]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[58] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[58]),
        .Q(uuid_stamp[58]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[59] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[59]),
        .Q(uuid_stamp[59]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[5] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[5]),
        .Q(uuid_stamp[5]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[60] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[60]),
        .Q(uuid_stamp[60]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[61] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[61]),
        .Q(uuid_stamp[61]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[62] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[62]),
        .Q(uuid_stamp[62]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[63] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[63]),
        .Q(uuid_stamp[63]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[64] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[64]),
        .Q(uuid_stamp[64]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[65] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[65]),
        .Q(uuid_stamp[65]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[66] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[66]),
        .Q(uuid_stamp[66]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[67] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[67]),
        .Q(uuid_stamp[67]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[68] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[68]),
        .Q(uuid_stamp[68]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[69] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[69]),
        .Q(uuid_stamp[69]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[6] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[6]),
        .Q(uuid_stamp[6]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[70] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[70]),
        .Q(uuid_stamp[70]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[71] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[71]),
        .Q(uuid_stamp[71]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[72] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[72]),
        .Q(uuid_stamp[72]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[73] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[73]),
        .Q(uuid_stamp[73]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[74] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[74]),
        .Q(uuid_stamp[74]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[75] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[75]),
        .Q(uuid_stamp[75]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[76] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[76]),
        .Q(uuid_stamp[76]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[77] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[77]),
        .Q(uuid_stamp[77]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[78] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[78]),
        .Q(uuid_stamp[78]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[79] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[79]),
        .Q(uuid_stamp[79]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[7] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[7]),
        .Q(uuid_stamp[7]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[80] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[80]),
        .Q(uuid_stamp[80]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[81] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[81]),
        .Q(uuid_stamp[81]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[82] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[82]),
        .Q(uuid_stamp[82]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[83] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[83]),
        .Q(uuid_stamp[83]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[84] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[84]),
        .Q(uuid_stamp[84]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[85] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[85]),
        .Q(uuid_stamp[85]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[86] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[86]),
        .Q(uuid_stamp[86]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[87] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[87]),
        .Q(uuid_stamp[87]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[88] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[88]),
        .Q(uuid_stamp[88]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[89] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[89]),
        .Q(uuid_stamp[89]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[8] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[8]),
        .Q(uuid_stamp[8]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[90] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[90]),
        .Q(uuid_stamp[90]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[91] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[91]),
        .Q(uuid_stamp[91]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[92] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[92]),
        .Q(uuid_stamp[92]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[93] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[93]),
        .Q(uuid_stamp[93]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[94] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[94]),
        .Q(uuid_stamp[94]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[95] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[95]),
        .Q(uuid_stamp[95]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[96] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[96]),
        .Q(uuid_stamp[96]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[97] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[97]),
        .Q(uuid_stamp[97]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[98] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[98]),
        .Q(uuid_stamp[98]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[99] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[99]),
        .Q(uuid_stamp[99]),
        .R(1'b0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* UUID = "1" *) 
  FDRE \uuid_stamp_reg[9] 
       (.C(sl_iport_i[1]),
        .CE(1'b1),
        .D(uuid_stamp[9]),
        .Q(uuid_stamp[9]),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
